{"mappings":"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","sources":["wasm/build/game_api.js","src/constants.ts","src/transform.ts","src/client_data_canvas/visual_styles.ts","src/scene/scene_map.ts","src/scene/scene_item.ts","src/scene/click_cursor.ts","src/scene/scene_tile.ts","src/scene/person.ts","src/scene/player.ts","src/scene/monster.ts","src/scene/cooldawn.ts","src/scene/effect.ts","src/scene/bullet.ts","src/scene/scene.ts","src/utilities.ts","src/ui/ui_element.ts","src/ui/ui_html_element.ts","src/ui/ui_html_text_element.ts","src/ui/ui_fps.ts","src/ui/ui_items.ts","src/ui/ui.ts","src/game_setup.ts","src/client_base.ts","src/client_data_canvas/draws.ts","src/index.ts","src/client_data_canvas/client_data_canvas.ts"],"sourcesContent":["export async function instantiate(module, imports = {}) {\n  const adaptedImports = {\n    env: Object.assign(Object.create(globalThis), imports.env || {}, {\n      abort(message, fileName, lineNumber, columnNumber) {\n        // ~lib/builtins/abort(~lib/string/String | null?, ~lib/string/String | null?, u32?, u32?) => void\n        message = __liftString(message >>> 0);\n        fileName = __liftString(fileName >>> 0);\n        lineNumber = lineNumber >>> 0;\n        columnNumber = columnNumber >>> 0;\n        (() => {\n          // @external.js\n          throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);\n        })();\n      },\n      \"host.entity_resurrect\"(entity, life, max_life) {\n        // assembly/external/entity_resurrect(u32, u32, u32) => void\n        entity = entity >>> 0;\n        life = life >>> 0;\n        max_life = max_life >>> 0;\n        host.entity_resurrect(entity, life, max_life);\n      },\n      \"host.update_entity_params\"(entity, is_dead, life, max_life, shield, max_shield, select_radius, atack_distance, attack_time) {\n        // assembly/external/update_entity_params(u32, bool, u32, u32, f32, f32, f32, f32, f32) => void\n        entity = entity >>> 0;\n        is_dead = is_dead != 0;\n        life = life >>> 0;\n        max_life = max_life >>> 0;\n        host.update_entity_params(entity, is_dead, life, max_life, shield, max_shield, select_radius, atack_distance, attack_time);\n      },\n      \"host.define_level\"(level_width, level_height, tile_size) {\n        // assembly/external/define_level(u32, u32, f32) => void\n        level_width = level_width >>> 0;\n        level_height = level_height >>> 0;\n        host.define_level(level_width, level_height, tile_size);\n      },\n      \"host.define_total_tiles\"(total_tiles) {\n        // assembly/external/define_total_tiles(u32) => void\n        total_tiles = total_tiles >>> 0;\n        host.define_total_tiles(total_tiles);\n      },\n      \"host.define_navmesh\"(vertices, polygons, sizes) {\n        // assembly/external/define_navmesh(~lib/staticarray/StaticArray<f32>, ~lib/staticarray/StaticArray<i32>, ~lib/staticarray/StaticArray<i32>) => void\n        vertices = __liftStaticArray(__getF32, 2, vertices >>> 0);\n        polygons = __liftStaticArray(__getI32, 2, polygons >>> 0);\n        sizes = __liftStaticArray(__getI32, 2, sizes >>> 0);\n        host.define_navmesh(vertices, polygons, sizes);\n      },\n      \"host.create_player\"(entity, pos_x, pos_y, radius, team) {\n        // assembly/external/create_player(u32, f32, f32, f32, i32) => void\n        entity = entity >>> 0;\n        host.create_player(entity, pos_x, pos_y, radius, team);\n      },\n      \"host.define_person_changes\"(entity, pos_x, pos_y, angle, move_status, life, max_life, shield, max_shield, is_dead) {\n        // assembly/external/define_person_changes(u32, f32, f32, f32, u32, u32, u32, f32, f32, bool) => void\n        entity = entity >>> 0;\n        move_status = move_status >>> 0;\n        life = life >>> 0;\n        max_life = max_life >>> 0;\n        is_dead = is_dead != 0;\n        host.define_person_changes(entity, pos_x, pos_y, angle, move_status, life, max_life, shield, max_shield, is_dead);\n      },\n      \"host.entity_finish_melee_attack\"(entity, interrupt) {\n        // assembly/external/entity_finish_melee_attack(u32, bool) => void\n        entity = entity >>> 0;\n        interrupt = interrupt != 0;\n        host.entity_finish_melee_attack(entity, interrupt);\n      },\n      \"host.entity_finish_hand_attack\"(entity, interrupt) {\n        // assembly/external/entity_finish_hand_attack(u32, bool) => void\n        entity = entity >>> 0;\n        interrupt = interrupt != 0;\n        host.entity_finish_hand_attack(entity, interrupt);\n      },\n      \"host.entity_finish_range_attack\"(entity, interrupt) {\n        // assembly/external/entity_finish_range_attack(u32, bool) => void\n        entity = entity >>> 0;\n        interrupt = interrupt != 0;\n        host.entity_finish_range_attack(entity, interrupt);\n      },\n      \"host.entity_finish_hide\"(entity, interrupt) {\n        // assembly/external/entity_finish_hide(u32, bool) => void\n        entity = entity >>> 0;\n        interrupt = interrupt != 0;\n        host.entity_finish_hide(entity, interrupt);\n      },\n      \"host.entity_finish_shadow_attack\"(entity, interrupt) {\n        // assembly/external/entity_finish_shadow_attack(u32, bool) => void\n        entity = entity >>> 0;\n        interrupt = interrupt != 0;\n        host.entity_finish_shadow_attack(entity, interrupt);\n      },\n      \"host.entity_finish_skill\"(entity, skill, interrupt) {\n        // assembly/external/entity_finish_skill(u32, u32, bool) => void\n        entity = entity >>> 0;\n        skill = skill >>> 0;\n        interrupt = interrupt != 0;\n        host.entity_finish_skill(entity, skill, interrupt);\n      },\n      \"host.entity_release_shield\"(entity) {\n        // assembly/external/entity_release_shield(u32) => void\n        entity = entity >>> 0;\n        host.entity_release_shield(entity);\n      },\n      \"host.entity_start_shadow_attack\"(entity, time, damage_distance) {\n        // assembly/external/entity_start_shadow_attack(u32, f32, f32) => void\n        entity = entity >>> 0;\n        host.entity_start_shadow_attack(entity, time, damage_distance);\n      },\n      \"host.entity_start_cooldawn\"(entity, cooldawn_id, cooldawn_time) {\n        // assembly/external/entity_start_cooldawn(u32, u32, f32) => void\n        entity = entity >>> 0;\n        cooldawn_id = cooldawn_id >>> 0;\n        host.entity_start_cooldawn(entity, cooldawn_id, cooldawn_time);\n      },\n      \"host.entity_start_melee_attack\"(entity, time, damage_distance, damage_spread) {\n        // assembly/external/entity_start_melee_attack(u32, f32, f32, f32) => void\n        entity = entity >>> 0;\n        host.entity_start_melee_attack(entity, time, damage_distance, damage_spread);\n      },\n      \"host.entity_start_range_attack\"(entity, time) {\n        // assembly/external/entity_start_range_attack(u32, f32) => void\n        entity = entity >>> 0;\n        host.entity_start_range_attack(entity, time);\n      },\n      \"host.entity_start_hand_attack\"(entity, time, damage_distance) {\n        // assembly/external/entity_start_hand_attack(u32, f32, f32) => void\n        entity = entity >>> 0;\n        host.entity_start_hand_attack(entity, time, damage_distance);\n      },\n      \"host.entity_switch_hide\"(entity, hide_active) {\n        // assembly/external/entity_switch_hide(u32, bool) => void\n        entity = entity >>> 0;\n        hide_active = hide_active != 0;\n        host.entity_switch_hide(entity, hide_active);\n      },\n      \"host.entity_start_skill_stun_cone\"(entity, cast_time, cone_spread, cone_size) {\n        // assembly/external/entity_start_skill_stun_cone(u32, f32, f32, f32) => void\n        entity = entity >>> 0;\n        host.entity_start_skill_stun_cone(entity, cast_time, cone_spread, cone_size);\n      },\n      \"host.click_entity\"(entity, action) {\n        // assembly/external/click_entity(u32, u32) => void\n        entity = entity >>> 0;\n        action = action >>> 0;\n        host.click_entity(entity, action);\n      },\n      \"host.click_position\"(pos_x, pos_y) {\n        // assembly/external/click_position(f32, f32) => void\n        host.click_position(pos_x, pos_y);\n      },\n      \"host.entity_start_shift\"(entity) {\n        // assembly/external/entity_start_shift(u32) => void\n        entity = entity >>> 0;\n        host.entity_start_shift(entity);\n      },\n      \"host.entity_activate_shield\"(entity) {\n        // assembly/external/entity_activate_shield(u32) => void\n        entity = entity >>> 0;\n        host.entity_activate_shield(entity);\n      },\n      \"host.entity_start_hide\"(entity, activation_time) {\n        // assembly/external/entity_start_hide(u32, f32) => void\n        entity = entity >>> 0;\n        host.entity_start_hide(entity, activation_time);\n      },\n      \"host.entity_start_skill_round_attack\"(entity, cast_time, area_size) {\n        // assembly/external/entity_start_skill_round_attack(u32, f32, f32) => void\n        entity = entity >>> 0;\n        host.entity_start_skill_round_attack(entity, cast_time, area_size);\n      },\n      \"host.entity_start_stun\"(entity, duration) {\n        // assembly/external/entity_start_stun(u32, f32) => void\n        entity = entity >>> 0;\n        host.entity_start_stun(entity, duration);\n      },\n      \"host.define_total_update_entities\"(count) {\n        // assembly/external/define_total_update_entities(u32) => void\n        count = count >>> 0;\n        host.define_total_update_entities(count);\n      },\n      \"host.define_bullet_changes\"(entity, pos_x, pos_y, angle) {\n        // assembly/external/define_bullet_changes(u32, f32, f32, f32) => void\n        entity = entity >>> 0;\n        host.define_bullet_changes(entity, pos_x, pos_y, angle);\n      },\n      \"host.debug_entity_walk_path\"(entity, points) {\n        // assembly/external/debug_entity_walk_path(u32, ~lib/staticarray/StaticArray<f32>) => void\n        entity = entity >>> 0;\n        points = __liftStaticArray(__getF32, 2, points >>> 0);\n        host.debug_entity_walk_path(entity, points);\n      },\n      \"host.debug_close_entity\"(e1, pos_x1, pos_y1, e2, pos_x2, pos_y2) {\n        // assembly/external/debug_close_entity(u32, f32, f32, u32, f32, f32) => void\n        e1 = e1 >>> 0;\n        e2 = e2 >>> 0;\n        host.debug_close_entity(e1, pos_x1, pos_y1, e2, pos_x2, pos_y2);\n      },\n      \"host.debug_visible_quad\"(start_x, start_y, end_x, end_y) {\n        // assembly/external/debug_visible_quad(f32, f32, f32, f32) => void\n        host.debug_visible_quad(start_x, start_y, end_x, end_y);\n      },\n      \"host.debug_neighbourhood_quad\"(start_x, start_y, end_x, end_y) {\n        // assembly/external/debug_neighbourhood_quad(f32, f32, f32, f32) => void\n        host.debug_neighbourhood_quad(start_x, start_y, end_x, end_y);\n      },\n      \"host.debug_search_quad\"(start_x, start_y, end_x, end_y) {\n        // assembly/external/debug_search_quad(f32, f32, f32, f32) => void\n        host.debug_search_quad(start_x, start_y, end_x, end_y);\n      },\n      \"host.debug_mid_quad\"(start_x, start_y, end_x, end_y) {\n        // assembly/external/debug_mid_quad(f32, f32, f32, f32) => void\n        host.debug_mid_quad(start_x, start_y, end_x, end_y);\n      },\n      \"host.debug_enemies_list\"(entity, search_radius, enemies) {\n        // assembly/external/debug_enemies_list(u32, f32, ~lib/staticarray/StaticArray<u32>) => void\n        entity = entity >>> 0;\n        enemies = __liftStaticArray(pointer => __getU32(pointer) >>> 0, 2, enemies >>> 0);\n        host.debug_enemies_list(entity, search_radius, enemies);\n      },\n      \"host.tile_delete\"(index) {\n        // assembly/external/tile_delete(u32) => void\n        index = index >>> 0;\n        host.tile_delete(index);\n      },\n      \"host.tile_create\"(x, y, index, type) {\n        // assembly/external/tile_create(u32, u32, u32, u32) => void\n        x = x >>> 0;\n        y = y >>> 0;\n        index = index >>> 0;\n        type = type >>> 0;\n        host.tile_create(x, y, index, type);\n      },\n      \"host.remove_entity\"(entity, actor_type, remove_reason) {\n        // assembly/external/remove_entity(u32, u32, u32) => void\n        entity = entity >>> 0;\n        actor_type = actor_type >>> 0;\n        remove_reason = remove_reason >>> 0;\n        host.remove_entity(entity, actor_type, remove_reason);\n      },\n      \"host.create_monster\"(entity, pos_x, pos_y, angle, radius, search_radius, search_spread, team) {\n        // assembly/external/create_monster(u32, f32, f32, f32, f32, f32, f32, i32) => void\n        entity = entity >>> 0;\n        host.create_monster(entity, pos_x, pos_y, angle, radius, search_radius, search_spread, team);\n      },\n      \"host.create_bullet\"(entity, pos_x, pos_y, target_x, target_y, angle, bullet_type) {\n        // assembly/external/create_bullet(u32, f32, f32, f32, f32, f32, u32) => void\n        entity = entity >>> 0;\n        bullet_type = bullet_type >>> 0;\n        host.create_bullet(entity, pos_x, pos_y, target_x, target_y, angle, bullet_type);\n      },\n      \"host.entity_finish_shift\"(entity) {\n        // assembly/external/entity_finish_shift(u32) => void\n        entity = entity >>> 0;\n        host.entity_finish_shift(entity);\n      },\n      \"host.entity_finish_stun\"(entity) {\n        // assembly/external/entity_finish_stun(u32) => void\n        entity = entity >>> 0;\n        host.entity_finish_stun(entity);\n      },\n      \"host.entity_damaged\"(attacker_entity, target_entity, damage, damage_type) {\n        // assembly/external/entity_damaged(u32, u32, u32, u32) => void\n        attacker_entity = attacker_entity >>> 0;\n        target_entity = target_entity >>> 0;\n        damage = damage >>> 0;\n        damage_type = damage_type >>> 0;\n        host.entity_damaged(attacker_entity, target_entity, damage, damage_type);\n      },\n      \"host.entity_dead\"(entity) {\n        // assembly/external/entity_dead(u32) => void\n        entity = entity >>> 0;\n        host.entity_dead(entity);\n      },\n    }),\n  };\n  const { exports } = await WebAssembly.instantiate(module, adaptedImports);\n  const memory = exports.memory || imports.env.memory;\n  const adaptedExports = Object.setPrototypeOf({\n    create_settings() {\n      // assembly/game_api/create_settings() => assembly/game/settings/Settings\n      return __liftInternref(exports.create_settings() >>> 0);\n    },\n    settings_set_seed(settings, seed) {\n      // assembly/game_api/settings_set_seed(assembly/game/settings/Settings, u32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_seed(settings, seed);\n    },\n    settings_set_generate(settings, level_size, room_min_size, room_max_size, rooms_count) {\n      // assembly/game_api/settings_set_generate(assembly/game/settings/Settings, u32, u32, u32, u32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_generate(settings, level_size, room_min_size, room_max_size, rooms_count);\n    },\n    settings_set_use_debug(settings, in_use_debug) {\n      // assembly/game_api/settings_set_use_debug(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_use_debug = in_use_debug ? 1 : 0;\n      exports.settings_set_use_debug(settings, in_use_debug);\n    },\n    settings_set_debug_flags(settings, in_show_path, in_show_closest, in_show_visible, in_show_neighborhood, in_show_search, in_show_mid, in_show_enemy_targets) {\n      // assembly/game_api/settings_set_debug_flags(assembly/game/settings/Settings, bool, bool, bool, bool, bool, bool, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_show_path = in_show_path ? 1 : 0;\n      in_show_closest = in_show_closest ? 1 : 0;\n      in_show_visible = in_show_visible ? 1 : 0;\n      in_show_neighborhood = in_show_neighborhood ? 1 : 0;\n      in_show_search = in_show_search ? 1 : 0;\n      in_show_mid = in_show_mid ? 1 : 0;\n      in_show_enemy_targets = in_show_enemy_targets ? 1 : 0;\n      exports.settings_set_debug_flags(settings, in_show_path, in_show_closest, in_show_visible, in_show_neighborhood, in_show_search, in_show_mid, in_show_enemy_targets);\n    },\n    settings_set_neighbourhood_quad_size(settings, in_size) {\n      // assembly/game_api/settings_set_neighbourhood_quad_size(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_neighbourhood_quad_size(settings, in_size);\n    },\n    settings_set_visible_quad_size(settings, in_size) {\n      // assembly/game_api/settings_set_visible_quad_size(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_visible_quad_size(settings, in_size);\n    },\n    settings_set_search_quad_size(settings, in_size) {\n      // assembly/game_api/settings_set_search_quad_size(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_search_quad_size(settings, in_size);\n    },\n    settings_set_mid_quad_size(settings, in_size) {\n      // assembly/game_api/settings_set_mid_quad_size(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_mid_quad_size(settings, in_size);\n    },\n    settings_set_rvo_time_horizon(settings, in_time) {\n      // assembly/game_api/settings_set_rvo_time_horizon(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_rvo_time_horizon(settings, in_time);\n    },\n    settings_set_use_rvo(settings, in_value) {\n      // assembly/game_api/settings_set_use_rvo(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_value = in_value ? 1 : 0;\n      exports.settings_set_use_rvo(settings, in_value);\n    },\n    settings_set_snap_to_navmesh(settings, in_value) {\n      // assembly/game_api/settings_set_snap_to_navmesh(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_value = in_value ? 1 : 0;\n      exports.settings_set_snap_to_navmesh(settings, in_value);\n    },\n    settings_set_velocity_boundary_control(settings, in_value) {\n      // assembly/game_api/settings_set_velocity_boundary_control(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_value = in_value ? 1 : 0;\n      exports.settings_set_velocity_boundary_control(settings, in_value);\n    },\n    settings_set_path_recalculate_time(settings, common_value, follow_value) {\n      // assembly/game_api/settings_set_path_recalculate_time(assembly/game/settings/Settings, f32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_path_recalculate_time(settings, common_value, follow_value);\n    },\n    settings_set_tiles_visible_radius(settings, in_value) {\n      // assembly/game_api/settings_set_tiles_visible_radius(assembly/game/settings/Settings, i32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_tiles_visible_radius(settings, in_value);\n    },\n    settings_set_search_system_chunk_count(settings, in_value) {\n      // assembly/game_api/settings_set_search_system_chunk_count(assembly/game/settings/Settings, u32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_search_system_chunk_count(settings, in_value);\n    },\n    settings_set_monster_iddle_time(settings, min_value, max_value) {\n      // assembly/game_api/settings_set_monster_iddle_time(assembly/game/settings/Settings, f32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_monster_iddle_time(settings, min_value, max_value);\n    },\n    settings_set_monsters_per_room(settings, min_value, max_value) {\n      // assembly/game_api/settings_set_monsters_per_room(assembly/game/settings/Settings, u32, u32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_monsters_per_room(settings, min_value, max_value);\n    },\n    settings_set_select_radius_delta(settings, in_value) {\n      // assembly/game_api/settings_set_select_radius_delta(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_select_radius_delta(settings, in_value);\n    },\n    settings_set_level_tile_size(settings, in_value) {\n      // assembly/game_api/settings_set_level_tile_size(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_level_tile_size(settings, in_value);\n    },\n    settings_set_monster_random_walk_radius(settings, in_value) {\n      // assembly/game_api/settings_set_monster_random_walk_radius(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_monster_random_walk_radius(settings, in_value);\n    },\n    settings_set_bullet_max_distance(settings, in_value) {\n      // assembly/game_api/settings_set_bullet_max_distance(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_bullet_max_distance(settings, in_value);\n    },\n    settings_set_react_attack(settings, in_value) {\n      // assembly/game_api/settings_set_react_attack(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_value = in_value ? 1 : 0;\n      exports.settings_set_react_attack(settings, in_value);\n    },\n    settings_set_default_monster_common(settings, rotation_speed, shield_resurrect, hide_speed_multiplier, hide_activate_time, hide_cooldawn) {\n      // assembly/game_api/settings_set_default_monster_common(assembly/game/settings/Settings, f32, f32, f32, f32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_default_monster_common(settings, rotation_speed, shield_resurrect, hide_speed_multiplier, hide_activate_time, hide_cooldawn);\n    },\n    settings_set_default_monster_person(settings, radius, speed, life, search_radius, search_spread, team) {\n      // assembly/game_api/settings_set_default_monster_person(assembly/game/settings/Settings, f32, f32, u32, f32, f32, i32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_default_monster_person(settings, radius, speed, life, search_radius, search_spread, team);\n    },\n    settings_set_player(settings, radius, speed, life, rotation_speed, shield_resurrect, default_team, shift_speed_multiplier, shift_distance, shift_cooldawn, hide_speed_multiplier, hide_cooldawn, hide_activate_time) {\n      // assembly/game_api/settings_set_player(assembly/game/settings/Settings, f32, f32, u32, f32, f32, i32, f32, f32, f32, f32, f32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_player(settings, radius, speed, life, rotation_speed, shield_resurrect, default_team, shift_speed_multiplier, shift_distance, shift_cooldawn, hide_speed_multiplier, hide_cooldawn, hide_activate_time);\n    },\n    settings_set_default_monster_weapon(settings, attack_time, attack_distance, attack_cooldawn, shield, damage, damage_distance) {\n      // assembly/game_api/settings_set_default_monster_weapon(assembly/game/settings/Settings, f32, f32, f32, f32, u32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_default_monster_weapon(settings, attack_time, attack_distance, attack_cooldawn, shield, damage, damage_distance);\n    },\n    settings_set_default_empty_weapon(settings, attack_time, attack_distance, attack_cooldawn, damage_distance, damage, shield) {\n      // assembly/game_api/settings_set_default_empty_weapon(assembly/game/settings/Settings, f32, f32, f32, f32, u32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_default_empty_weapon(settings, attack_time, attack_distance, attack_cooldawn, damage_distance, damage, shield);\n    },\n    settings_set_default_shadow_weapon(settings, attack_time, attack_distance, attack_cooldawn, damage_distance) {\n      // assembly/game_api/settings_set_default_shadow_weapon(assembly/game/settings/Settings, f32, f32, f32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_default_shadow_weapon(settings, attack_time, attack_distance, attack_cooldawn, damage_distance);\n    },\n    settings_set_skill_round_attack(settings, cast_time, cooldawn, damage, area_radius) {\n      // assembly/game_api/settings_set_skill_round_attack(assembly/game/settings/Settings, f32, f32, u32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_skill_round_attack(settings, cast_time, cooldawn, damage, area_radius);\n    },\n    settings_set_skill_stun_cone(settings, cast_time, cooldawn, distance, damage, cone_spread, cone_size, stun_time) {\n      // assembly/game_api/settings_set_skill_stun_cone(assembly/game/settings/Settings, f32, f32, f32, u32, f32, f32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_skill_stun_cone(settings, cast_time, cooldawn, distance, damage, cone_spread, cone_size, stun_time);\n    },\n    dev_game_resurrect_player(game) {\n      // assembly/game_api/dev_game_resurrect_player(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.dev_game_resurrect_player(game);\n    },\n    dev_game_spawn_monster(game, radius, position_x, position_y, move_speed, life, virtual_weapon, search_radius, search_spread, team, friend_for_player) {\n      // assembly/game_api/dev_game_spawn_monster(assembly/game/Game, f32, f32, f32, f32, u32, assembly/game/virtuals/VirtualWeapon, f32, f32, i32, bool) => void\n      game = __retain(__lowerInternref(game) || __notnull());\n      virtual_weapon = __lowerInternref(virtual_weapon) || __notnull();\n      friend_for_player = friend_for_player ? 1 : 0;\n      try {\n        exports.dev_game_spawn_monster(game, radius, position_x, position_y, move_speed, life, virtual_weapon, search_radius, search_spread, team, friend_for_player);\n      } finally {\n        __release(game);\n      }\n    },\n    dev_game_move_entity(game, entity, pos_x, pos_y) {\n      // assembly/game_api/dev_game_move_entity(assembly/game/Game, u32, f32, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.dev_game_move_entity(game, entity, pos_x, pos_y);\n    },\n    dev_add_sword_to_player(game, attack_distance, attack_time, attack_cooldawn, damage, shield, damage_spread, damage_distance) {\n      // assembly/game_api/dev_add_sword_to_player(assembly/game/Game, f32, f32, f32, u32, f32, f32, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.dev_add_sword_to_player(game, attack_distance, attack_time, attack_cooldawn, damage, shield, damage_spread, damage_distance);\n    },\n    dev_add_bow_to_player(game, attack_distance, attack_time, attack_cooldawn, damage, shield, speed) {\n      // assembly/game_api/dev_add_bow_to_player(assembly/game/Game, f32, f32, f32, u32, f32, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.dev_add_bow_to_player(game, attack_distance, attack_time, attack_cooldawn, damage, shield, speed);\n    },\n    dev_player_equip_sword(game) {\n      // assembly/game_api/dev_player_equip_sword(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.dev_player_equip_sword(game);\n    },\n    dev_player_equip_bow(game) {\n      // assembly/game_api/dev_player_equip_bow(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.dev_player_equip_bow(game);\n    },\n    dev_player_equip_free_hands(game) {\n      // assembly/game_api/dev_player_equip_free_hands(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.dev_player_equip_free_hands(game);\n    },\n    dev_create_virtual_sword(game, attack_distance, attack_time, attack_cooldawn, shield, damage, damage_distance, damage_spread) {\n      // assembly/game_api/dev_create_virtual_sword(assembly/game/Game, f32, f32, f32, f32, u32, f32, f32) => assembly/game/virtuals/VirtualWeapon\n      game = __lowerInternref(game) || __notnull();\n      return __liftInternref(exports.dev_create_virtual_sword(game, attack_distance, attack_time, attack_cooldawn, shield, damage, damage_distance, damage_spread) >>> 0);\n    },\n    dev_create_virtual_bow(game, attack_distance, attack_time, attack_cooldawn, shield, damage, bullet_speed) {\n      // assembly/game_api/dev_create_virtual_bow(assembly/game/Game, f32, f32, f32, f32, u32, f32) => assembly/game/virtuals/VirtualWeapon\n      game = __lowerInternref(game) || __notnull();\n      return __liftInternref(exports.dev_create_virtual_bow(game, attack_distance, attack_time, attack_cooldawn, shield, damage, bullet_speed) >>> 0);\n    },\n    dev_create_virtual_empty_weapon(game, attack_distance, attack_time, attack_cooldawn, shield, damage, damage_distance) {\n      // assembly/game_api/dev_create_virtual_empty_weapon(assembly/game/Game, f32, f32, f32, f32, u32, f32) => assembly/game/virtuals/VirtualWeapon\n      game = __lowerInternref(game) || __notnull();\n      return __liftInternref(exports.dev_create_virtual_empty_weapon(game, attack_distance, attack_time, attack_cooldawn, shield, damage, damage_distance) >>> 0);\n    },\n    create_game(settings) {\n      // assembly/game_api/create_game(assembly/game/settings/Settings) => assembly/game/Game\n      settings = __lowerInternref(settings) || __notnull();\n      return __liftInternref(exports.create_game(settings) >>> 0);\n    },\n    game_update(game, dt) {\n      // assembly/game_api/game_update(assembly/game/Game, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_update(game, dt);\n    },\n    game_client_point(game, in_x, in_y) {\n      // assembly/game_api/game_client_point(assembly/game/Game, f32, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_client_point(game, in_x, in_y);\n    },\n    game_client_shift(game, cursor_x, cursor_y) {\n      // assembly/game_api/game_client_shift(assembly/game/Game, f32, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_client_shift(game, cursor_x, cursor_y);\n    },\n    game_client_shield(game) {\n      // assembly/game_api/game_client_shield(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_client_shield(game);\n    },\n    game_client_release_shield(game) {\n      // assembly/game_api/game_client_release_shield(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_client_release_shield(game);\n    },\n    game_client_toggle_hide(game) {\n      // assembly/game_api/game_client_toggle_hide(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_client_toggle_hide(game);\n    },\n    game_skill_nontarget(game, skill) {\n      // assembly/game_api/game_skill_nontarget(assembly/game/Game, i32) => bool\n      game = __lowerInternref(game) || __notnull();\n      return exports.game_skill_nontarget(game, skill) != 0;\n    },\n    game_skill_target(game, position_x, position_y, skill) {\n      // assembly/game_api/game_skill_target(assembly/game/Game, f32, f32, i32) => bool\n      game = __lowerInternref(game) || __notnull();\n      return exports.game_skill_target(game, position_x, position_y, skill) != 0;\n    },\n    game_add_monsters(game) {\n      // assembly/game_api/game_add_monsters(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_add_monsters(game);\n    },\n    game_make_aggressive(game) {\n      // assembly/game_api/game_make_aggressive(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_make_aggressive(game);\n    },\n    game_damage_all_entities(game, damage) {\n      // assembly/game_api/game_damage_all_entities(assembly/game/Game, u32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_damage_all_entities(game, damage);\n    },\n    game_stun_all_entities(game, duration) {\n      // assembly/game_api/game_stun_all_entities(assembly/game/Game, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_stun_all_entities(game, duration);\n    },\n  }, exports);\n  function __liftString(pointer) {\n    if (!pointer) return null;\n    const\n      end = pointer + new Uint32Array(memory.buffer)[pointer - 4 >>> 2] >>> 1,\n      memoryU16 = new Uint16Array(memory.buffer);\n    let\n      start = pointer >>> 1,\n      string = \"\";\n    while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));\n    return string + String.fromCharCode(...memoryU16.subarray(start, end));\n  }\n  function __liftStaticArray(liftElement, align, pointer) {\n    if (!pointer) return null;\n    const\n      length = __getU32(pointer - 4) >>> align,\n      values = new Array(length);\n    for (let i = 0; i < length; ++i) values[i] = liftElement(pointer + (i << align >>> 0));\n    return values;\n  }\n  class Internref extends Number {}\n  const registry = new FinalizationRegistry(__release);\n  function __liftInternref(pointer) {\n    if (!pointer) return null;\n    const sentinel = new Internref(__retain(pointer));\n    registry.register(sentinel, pointer);\n    return sentinel;\n  }\n  function __lowerInternref(value) {\n    if (value == null) return 0;\n    if (value instanceof Internref) return value.valueOf();\n    throw TypeError(\"internref expected\");\n  }\n  const refcounts = new Map();\n  function __retain(pointer) {\n    if (pointer) {\n      const refcount = refcounts.get(pointer);\n      if (refcount) refcounts.set(pointer, refcount + 1);\n      else refcounts.set(exports.__pin(pointer), 1);\n    }\n    return pointer;\n  }\n  function __release(pointer) {\n    if (pointer) {\n      const refcount = refcounts.get(pointer);\n      if (refcount === 1) exports.__unpin(pointer), refcounts.delete(pointer);\n      else if (refcount) refcounts.set(pointer, refcount - 1);\n      else throw Error(`invalid refcount '${refcount}' for reference '${pointer}'`);\n    }\n  }\n  function __notnull() {\n    throw TypeError(\"value must not be null\");\n  }\n  let __dataview = new DataView(memory.buffer);\n  function __getI32(pointer) {\n    try {\n      return __dataview.getInt32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getInt32(pointer, true);\n    }\n  }\n  function __getU32(pointer) {\n    try {\n      return __dataview.getUint32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getUint32(pointer, true);\n    }\n  }\n  function __getF32(pointer) {\n    try {\n      return __dataview.getFloat32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getFloat32(pointer, true);\n    }\n  }\n  return adaptedExports;\n}\n","export const DEFAULT_WIDTH: number = 1200;\r\nexport const DEFAULT_HEIGHT: number = 700;\r\n\r\nexport const RESIZABLE_WIDTH_CLASS_NAME = \"resizable_width\";\r\nexport const RESIZABLE_HEIGHT_CLASS_NAME = \"resizable_height\";\r\n\r\nexport const TILE_PIXELS_SIZE: number = 50; // the number of pixels for one tile of the level\r\nexport const CLICK_CURSOR_TIME: number = 400; // in milliseconds\r\nexport const CLICK_CURSOR_RADIUS: number = 0.5; // in world units\r\nexport const MAP_TILE_PIXELS_SIZES: number[] = [3, 5, 8, 12, 15, 20, 30, 40, 50];  // arrays of different sizes for map\r\nexport const CAMERA_LERP_COEFFICIENT: number = 1.0;  // for smooth camera\r\n\r\n// delay between mouse clicks, when the button is hold\r\nexport const FIRST_MOUSE_CLICK_DELTA: number = 500;  // in milliseconds\r\nexport const OTHER_MOUSE_CLICK_DELTA: number = 30;  // in milliseconds\r\nexport const DOUBLE_TOUCH_DELTA: number = 200;\r\nexport const DOUBLE_TOUCH_CURSOR_DELTA: number = 2.0; // if second click outside of the square with side = 2 x value, then interpret click as single click\r\n\r\nexport enum EFFECT {\r\n    MELEE_ATTACK,\r\n    RANGE_ATTACK,\r\n    HAND_ATTACK,\r\n    STUN,\r\n    HIDE_ACTIVATION,\r\n    SHADOW_ATTACK,\r\n    SKILL_ROUND_ATTACK,\r\n    SKILL_STUN_CONE,\r\n}\r\n\r\n// the same as in wasm-side\r\nexport enum ACTOR {\r\n    PLAYER,\r\n    MONSTER,\r\n    BULLET,\r\n}\r\n\r\n// sync with wasm side\r\nexport enum BULLET_TYPE {\r\n    ARROW,\r\n}\r\n\r\n// use one of these keys when entity is removed from the scene\r\n// should be the same as in wasm side\r\nexport enum REMOVE_REASON {\r\n    VISIBILITY_OUT,\r\n    COME_TARGET,\r\n    DAMAGE_ELIMINATE\r\n}\r\n\r\nexport enum MOVE_STATUS {\r\n    NONE,\r\n    WALK,\r\n    SHIFT\r\n}\r\n\r\nexport enum TARGET_ACTION {\r\n    NONE,\r\n    ATTACK,\r\n    SKILL_ENTITY,\r\n    SKILL_POSITION,\r\n}\r\n\r\nexport enum COOLDAWN {\r\n    SHIFT,\r\n    HAND_ATTACK,\r\n    MELEE_ATTACK,\r\n    RANGE_ATTACK,\r\n    HIDE_ACTIVATION,\r\n    SHADOW_ATTACK,\r\n    SKILL_ROUND_ATTACK,\r\n    SKILL_STUN_CONE,\r\n}\r\n\r\nexport enum DAMAGE_TYPE {\r\n    UNKNOWN,\r\n    MELEE,\r\n    RANGE,\r\n    ULTIMATE,\r\n}\r\n\r\nexport enum SKILL {\r\n    NONE,\r\n    ROUND_ATTACK,\r\n    STUN_CONE,\r\n}","export class Transform {\r\n    m_matrix = new Float32Array(9);\r\n\r\n    // store separate values for angle and scale\r\n    m_angle: number = 0.0;\r\n    m_scale_x: number = 1.0;\r\n    m_scale_y: number = 1.0;\r\n\r\n    constructor() {\r\n        this.m_matrix[0] = 1.0; this.m_matrix[1] = 0.0; this.m_matrix[2] = 0.0;\r\n        this.m_matrix[3] = 0.0; this.m_matrix[4] = 1.0; this.m_matrix[5] = 0.0;\r\n        this.m_matrix[6] = 0.0; this.m_matrix[7] = 0.0; this.m_matrix[8] = 1.0;  // this row always should be (0.0, 0.0, 1.0)\r\n    }\r\n\r\n    matrix_array(): Float32Array {\r\n        return this.m_matrix;\r\n    }\r\n\r\n    // this method does not properly define local rotation and scale values\r\n    // it should be used only for create temp matrix, apply transform and does not use it anymore\r\n    set_matrix_array(in_array: number[]) {\r\n        for(let i = 0; i < 9; i++) {\r\n            this.m_matrix[i] = in_array[i];\r\n        }\r\n    }\r\n\r\n    set_translation(in_x: number, in_y: number) {\r\n        this.m_matrix[2] = in_x;\r\n        this.m_matrix[5] = in_y;\r\n    }\r\n\r\n    translation(): number[] {\r\n        return [this.m_matrix[2], this.m_matrix[5]];\r\n    }\r\n\r\n    private _update_rotation() {\r\n        this.m_matrix[0] = Math.cos(this.m_angle) * this.m_scale_x;\r\n        this.m_matrix[3] = Math.sin(this.m_angle) * this.m_scale_x;\r\n        this.m_matrix[1] = -Math.sin(this.m_angle) * this.m_scale_y;\r\n        this.m_matrix[4] = Math.cos(this.m_angle) * this.m_scale_y;\r\n    }\r\n\r\n    set_rotation(in_value: number) {  // in_value - in radians from OX in counter clock wise direction\r\n        this.m_angle = in_value;\r\n        this._update_rotation();\r\n    }\r\n\r\n    rotation(): number {\r\n        return this.m_angle;\r\n    }\r\n\r\n    uniform_scale(): number {\r\n        return (this.m_scale_x + this.m_scale_y) / 2.0;\r\n    }\r\n\r\n    scale(): number[] {\r\n        return [this.m_scale_x, this.m_scale_y];\r\n    }\r\n\r\n    set_scale(in_x: number, in_y: number) {\r\n        this.m_scale_x = in_x;\r\n        this.m_scale_y = in_y;\r\n\r\n        this._update_rotation();\r\n    }\r\n\r\n    set_uniform_scale(in_value: number) {\r\n        this.m_scale_x = in_value;\r\n        this.m_scale_y = in_value;\r\n\r\n        this._update_rotation();\r\n    }\r\n\r\n    multiply(in_x: number, in_y: number): number[] {\r\n        return [this.m_matrix[0] * in_x + this.m_matrix[1] * in_y + this.m_matrix[2],\r\n                this.m_matrix[3] * in_x + this.m_matrix[4] * in_y + this.m_matrix[5]];\r\n    }\r\n\r\n    multiply_array(in_coordinates: number[]): number[] {\r\n        return this.multiply(in_coordinates[0], in_coordinates[1]);\r\n    }\r\n\r\n    apply_scale(in_value: number): number {\r\n        // get length of the first vector\r\n        const l1 = Math.sqrt(this.m_matrix[0] * this.m_matrix[0] + this.m_matrix[3] * this.m_matrix[3]);\r\n        // and length of the second vector\r\n        const l2 = Math.sqrt(this.m_matrix[1] * this.m_matrix[1] + this.m_matrix[4] * this.m_matrix[4]);\r\n\r\n        // return the average of these length\r\n        return in_value * (l1 + l2) / 2;\r\n    }\r\n\r\n    // compose current tfm A with other tfm B and return A * B\r\n    compose_tfms(other: Transform): Transform {\r\n        let to_return = new Transform();\r\n\r\n        const a = this.matrix_array();\r\n        const b = other.matrix_array();\r\n\r\n        // multiply these two matrices\r\n        let result = [a[0]*b[0]+a[1]*b[3]+a[2]*b[6], a[0]*b[1]+a[1]*b[4]+a[2]*b[7], a[0]*b[2]+a[1]*b[5]+a[2]*b[8],\r\n                      a[3]*b[0]+a[4]*b[3]+a[5]*b[6], a[3]*b[1]+a[4]*b[4]+a[5]*b[7], a[3]*b[2]+a[4]*b[5]+a[5]*b[8],\r\n                      a[6]*b[0]+a[7]*b[3]+a[8]*b[6], a[6]*b[1]+a[7]*b[4]+a[8]*b[7], a[6]*b[2]+a[7]*b[5]+a[8]*b[8]];\r\n        to_return.set_matrix_array(result);\r\n\r\n        return to_return;\r\n    }\r\n\r\n    private _det2(a: number, b: number, c: number, d: number): number {\r\n        return a*d - b*c;\r\n    }\r\n\r\n    // return inverse transform\r\n    // we setup only matrix, without local scale and rotation\r\n    inverse(): Transform {\r\n        // calculate determinant\r\n        const d = this.m_matrix[0] * this.m_matrix[4] * this.m_matrix[8] +\r\n        this.m_matrix[2] * this.m_matrix[3] * this.m_matrix[7] +\r\n        this.m_matrix[1] * this.m_matrix[5] * this.m_matrix[6] -\r\n        this.m_matrix[2] * this.m_matrix[4] * this.m_matrix[6] -\r\n        this.m_matrix[0] * this.m_matrix[5] * this.m_matrix[7] -\r\n        this.m_matrix[1] * this.m_matrix[3] * this.m_matrix[8];\r\n\r\n        const m = [this._det2(this.m_matrix[4], this.m_matrix[5], this.m_matrix[7], this.m_matrix[8]) / d, -1 * this._det2(this.m_matrix[1], this.m_matrix[2], this.m_matrix[7], this.m_matrix[8]) / d, this._det2(this.m_matrix[1], this.m_matrix[2], this.m_matrix[4], this.m_matrix[5]) / d,\r\n        -1 * this._det2(this.m_matrix[3], this.m_matrix[5], this.m_matrix[6], this.m_matrix[8]) / d, this._det2(this.m_matrix[0], this.m_matrix[2], this.m_matrix[6], this.m_matrix[8]) / d, -1 * this._det2(this.m_matrix[0], this.m_matrix[2], this.m_matrix[3], this.m_matrix[5]) / d,\r\n        this._det2(this.m_matrix[3], this.m_matrix[4], this.m_matrix[6], this.m_matrix[7]) / d, -1 * this._det2(this.m_matrix[0], this.m_matrix[1], this.m_matrix[6], this.m_matrix[7]) / d, this._det2(this.m_matrix[0], this.m_matrix[1], this.m_matrix[3], this.m_matrix[4]) / d];\r\n\r\n        let to_return = new Transform();\r\n        to_return.set_matrix_array(m);\r\n\r\n        return to_return;\r\n    }\r\n\r\n    toString(): string {\r\n        let to_return = \"\";\r\n        to_return += this.m_matrix[0] + \", \" + this.m_matrix[1] + \", \" + this.m_matrix[2] + \"\\n\";\r\n        to_return += this.m_matrix[3] + \", \" + this.m_matrix[4] + \", \" + this.m_matrix[5] + \"\\n\";\r\n        to_return += this.m_matrix[6] + \", \" + this.m_matrix[7] + \", \" + this.m_matrix[8];\r\n        return to_return;\r\n    }\r\n}","export const PLAYER_IS_STROKE = false;\r\nexport const PLAYER_STROKE_WIDTH = 1.0;\r\nexport const PLAYER_STROKE_COLOR = \"rgb(74, 193, 33)\";\r\nexport const PLAYER_SECONDARY_STROKE_COLOR = \"rgba(74, 193, 33, 0.25)\";\r\nexport const PLAYER_LIVE_BACK_COLOR = \"rgba(114, 186, 89, 0.5)\";\r\nexport const PLAYER_IDLE_COLOR = \"rgba(91, 128, 78, 0.75)\";\r\nexport const PLAYER_MOVE_COLOR = \"rgba(91, 128, 78, 0.5)\";\r\nexport const PLAYER_SHIFT_COLOR = \"rgba(91, 128, 78, 0.25)\";\r\nexport const PLAYER_HIDE_COLOR = \"rgba(91, 128, 78, 0.1)\";\r\n\r\nexport const ENTITY_DEAD_BACK_COLOR = \"rgba(145, 145, 145, 0.25)\";\r\nexport const ENTITY_LIFE_CIRCLE_DELTA = 0.8;\r\n\r\nexport const MONSTER_IS_STROKE = false;\r\nexport const MONSTER_STROKE_WIDTH = 1.0;\r\nexport const MONSTER_STROKE_COLOR = \"rgb(226, 55, 27)\";\r\nexport const MONSTER_SECONDARY_STROKE_COLOR = \"rgb(226, 55, 27, 0.15)\";\r\nexport const MONSTER_LIVE_BACK_COLOR = \"rgba(171, 105, 73, 0.5)\";\r\nexport const MONSTER_IDLE_COLOR = \"rgba(196, 94, 45, 0.75)\";\r\nexport const MONSTER_MOVE_COLOR = \"rgba(196, 94, 45, 0.5)\";\r\nexport const MONSTER_SHIFT_COLOR = \"rgba(196, 94, 45, 0.25)\";\r\nexport const MONSTER_HIDE_COLOR = \"rgba(196, 94, 45, 0.1)\";\r\n\r\nexport const BULLET_ARROW_COLOR = \"rgba(32, 32, 59, 0.3)\"\r\nexport const BULLET_ARROW_HEAD_SIZE = 4;\r\nexport const BULLET_ARROW_TAIL_SIZE = 12;\r\n\r\nexport const SELECT_RADIUS_COLOR = \"rgba(64, 64, 64, 0.1)\";\r\n\r\nexport const TILE_IS_STROKE = true;\r\nexport const TILE_STROKE_WIDTH = 0.2;\r\nexport const TILE_STROKE_COLOR = \"rgb(152, 152, 152)\";\r\nexport const TILE_WALKABLE_COLOR = \"rgb(192, 192, 192)\";\r\nexport const TILE_NONWALKABLE_COLOR = \"rgb(64, 64, 64)\";\r\n\r\nexport const CLICK_CURSOR_COLOR = \"rgba(232, 128, 51, 0.25)\";\r\nexport const CLICK_CURSOR_STROKE_COLOR = \"rgba(234, 112, 23, 0.5)\";\r\nexport const CLICK_CURSOR_STROKE_WIDTH = 1.0;\r\nexport const CLICK_CURSOR_CENTER_SIZE = 2.0;\r\n\r\nexport const SELECT_CURSOR_COLOR = \"rgba(209, 63, 52, 0.25)\";\r\nexport const SELECT_CURSOR_STROKE_COLOR = \"rgba(217, 33, 20, 0.75)\";\r\nexport const SELECT_CURSOR_STROKE_WIDTH = 1.0;\r\n\r\nexport const MAP_COLOR = \"rgba(48, 148, 233, 0.5)\";\r\nexport const MAP_PLAYER_SIZE = 2; // in pixels\r\n\r\nexport const DEBUG_TRAJECTORY_COLOR = \"rgb(94, 178, 219)\";\r\nexport const DEBUG_TRAJECTORY_WIDTH = 1.0;\r\nexport const DEBUG_TRAJECTORY_POINT_COLOR = \"rgb(53, 129, 166)\";\r\nexport const DEBUG_TRAJECTORY_POINT_RADIUS = 2.0;\r\n\r\nexport const DEBUG_CLOSEST_PAIR_COLOR = \"rgb(82, 209, 77)\";\r\nexport const DEBUG_CLOSEST_PAIR_WIDTH = 1.0;\r\nexport const DEBUG_RECT_LINE_WIDTH = 1.0;\r\nexport const DEBUG_VISIBILITY_RECT_COLOR = \"rgba(111, 156, 227, 0.5)\";\r\nexport const DEBUG_NEIGHBOURHOOD_RECT_COLOR = \"rgb(134, 227, 111)\";\r\nexport const DEBUG_SEARCH_RECT_COLOR = \"rgb(191, 147, 23)\";\r\nexport const DEBUG_MID_RECT_COLOR = \"rgba(117, 12, 28, 0.25)\";\r\nexport const DEBUG_SEARCH_RADIUS_COLOR = \"rgba(186, 77, 19, 0.25)\";\r\nexport const DEBUG_ENEMIES_TARGET_LINE_COLOR = \"rgba(186, 77, 19, 0.7)\";\r\nexport const DEBUG_ENEMIES_TARGET_LINE_WIDTH: number = 1.0;\r\n\r\nexport const DEBUG_BULLET_TARGET_LINE_COLOR = \"rgba(32, 32, 59, 0.25)\";\r\nexport const DEBUG_BULLET_TARGET_LINE_WIDTH = 1;\r\nexport const DEBUG_BULLET_TARGET_POINT_COLOR = \"rgba(32, 32, 59, 0.75)\";\r\nexport const DEBUG_BULLET_TARGET_POINT_SIZE = 2;\r\n\r\nexport const SHIELD_ACTIVE_COLOR = \"rgba(45, 71, 77, 0.75)\";\r\nexport const SHIELD_ACTIVE_WIDTH = 4.0;\r\nexport const SHIELD_PASSIVE_COLOR = \"rgba(45, 71, 77, 0.25)\";\r\nexport const SHIELD_PASSIVE_WIDTH = 2.0;\r\n\r\nexport const SEARCH_CONE_COLOR = \"rgba(217, 180, 35, 0.5)\";\r\nexport const SEARCH_CONE_STROKE = \"rgba(166, 111, 23, 0.5)\";\r\nexport const SEARCH_CONE_STROKE_WIDTH = 1.0;\r\n\r\n// each cooldawn drawn as circle arc\r\nexport const COOLDAWN_SHIFT_COLOR = \"rgba(255, 255, 255, 0.25)\";\r\nexport const COOLDAWN_SHIFT_WIDTH = 2.0;\r\nexport const COOLDAWN_SHIFT_RADIUS = 6.0;\r\n\r\nexport const COOLDAWN_MELEE_ATTACK_COLOR = \"rgba(255, 164, 164, 0.5)\";\r\nexport const COOLDAWN_MELEE_ATTACK_WIDTH = 2.0;\r\nexport const COOLDAWN_MELEE_ATTACK_RADIUS = 8.0;\r\n\r\nexport const COOLDAWN_RANGE_ATTACK_COLOR = \"rgba(219, 149, 35, 0.5)\";\r\nexport const COOLDAWN_RANGE_ATTACK_WIDTH = 2.0;\r\nexport const COOLDAWN_RANGE_ATTACK_RADIUS = 8.0;\r\n\r\nexport const COOLDAWN_HAND_ATTACK_COLOR = \"rgba(103, 136, 174, 0.25)\";\r\nexport const COOLDAWN_HAND_ATTACK_WIDTH = 2.0;\r\nexport const COOLDAWN_HAND_ATTACK_RADIUS = 8.0;\r\n\r\nexport const COOLDAWN_HIDE_COLOR = \"rgba(255, 255, 255, 0.25)\";\r\nexport const COOLDAWN_HIDE_WIDTH = 2.0;\r\nexport const COOLDAWN_HIDE_RADIUS = 10.0;\r\n\r\nexport const COOLDAWN_SHADOW_ATTACK_COLOR = \"rgba(255, 164, 164, 0.5)\";\r\nexport const COOLDAWN_SHADOW_ATTACK_WIDTH = 2.0;\r\nexport const COOLDAWN_SHADOW_ATTACK_RADIUS = 12.0;\r\n\r\nexport const COOLDAWN_SKILL_ROUND_ATTACK_COLOR = \"rgba(41, 128, 34, 0.5)\";\r\nexport const COOLDAWN_SKILL_ROUND_ATTACK_WIDTH = 4.0;\r\nexport const COOLDAWN_SKILL_ROUND_ATTACK_RADIUS = 6.0;\r\n\r\nexport const COOLDAWN_SKILL_STUN_CONE_COLOR = \"rgba(34, 128, 89, 0.5)\";\r\nexport const COOLDAWN_SKILL_STUN_CONE_WIDTH = 4.0;\r\nexport const COOLDAWN_SKILL_STUN_CONE_RADIUS = 6.0;\r\n\r\n// action effects\r\nexport const EFFECT_MELEE_ATTACK_COLOR = \"rgba(217, 43, 20, 0.5)\";\r\nexport const EFFECT_STUN_COLOR = \"rgba(40, 111, 224, 0.25)\";\r\nexport const EFFECT_STUN_STROKE_COLOR = \"rgba(134, 173, 235, 1.0)\";\r\nexport const EFFECT_STUN_RADIUS_MULTIPLIER = 1.1;\r\n\r\nexport const EFFECT_HIDE_ACTIVATION_COLOR = \"rgba(63, 74, 77, 0.75)\";\r\nexport const EFFECT_HIDE_ACTIVATION_STROKE = \"rgba(21, 29, 43, 1.0)\";\r\n\r\nexport const EFFECT_SHADOW_ATTACK_COLOR = \"rgba(212, 37, 6, 0.5)\";\r\nexport const EFFECT_SHADOW_ATTACK_WIDTH = 4.0;\r\n\r\nexport const EFFECT_HAND_ATTACK_COLOR = \"rgba(103, 136, 174, 0.5)\";\r\n\r\nexport const EFFECT_RANGE_ATTACK_COLOR = \"rgba(219, 149, 35, 0.75)\";\r\nexport const EFFECT_RANGE_ATTACK_WIDTH = 2.0;\r\nexport const EFFECT_RANGE_ATTACK_DELTA = 6.0;  // gap between person circle and effect line\r\n\r\nexport const EFFECT_SKILL_ROUND_ATTACK_COLOR = \"rgba(199, 38, 38, 0.25)\";\r\nexport const EFFECT_SKILL_ROUND_ATTACK_STROKE = \"rgba(199, 38, 38, 0.35)\";\r\n\r\nexport const EFFECT_SKILL_STUN_CONE_COLOR = \"rgba(199, 38, 38, 0.25)\";\r\nexport const EFFECT_SKILL_STUN_CONE_STROKE = \"rgba(199, 38, 38, 0.35)\";\r\n","import { MAP_TILE_PIXELS_SIZES } from \"../constants\";\r\nimport { Transform } from \"../transform\";\r\nimport { MAP_COLOR, MAP_PLAYER_SIZE, PLAYER_IDLE_COLOR } from \"../client_data_canvas/visual_styles\";\r\n\r\nexport class SceneMap {\r\n    m_context: CanvasRenderingContext2D;\r\n    m_wtc_tfm: Transform;\r\n    m_vertices: Float32Array;\r\n    m_polygons: Int32Array;\r\n    m_sizes: Int32Array;\r\n\r\n    m_canvas_width: number;\r\n    m_canvas_height: number;\r\n    m_tile_size: number;\r\n\r\n    m_active: boolean = false;\r\n    m_tfm: Transform = new Transform();\r\n    m_scale: number = 0.0;\r\n    m_scale_index: number = 0;\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, \r\n                in_wtc_tfm: Transform,\r\n                in_tile_size: number,\r\n                in_vertices: Float32Array, \r\n                in_polygons: Int32Array, \r\n                in_sizes: Int32Array) {\r\n        this.m_context = in_ctxt;\r\n        this.m_wtc_tfm = in_wtc_tfm;\r\n\r\n        this.m_canvas_width = in_ctxt.canvas.width;\r\n        this.m_canvas_height = in_ctxt.canvas.height;\r\n\r\n        this.m_tile_size = in_tile_size;\r\n\r\n        this.m_vertices = in_vertices;\r\n        this.m_polygons = in_polygons;\r\n        this.m_sizes = in_sizes;\r\n\r\n        this.m_scale_index = Math.floor(MAP_TILE_PIXELS_SIZES.length / 2);\r\n        this._update_scale();\r\n    }\r\n\r\n    private _update_scale() {\r\n        this.m_scale = MAP_TILE_PIXELS_SIZES[this.m_scale_index] / this.m_tile_size;\r\n    }\r\n\r\n    toggle_active() {\r\n        this.m_active = !this.m_active;\r\n    }\r\n\r\n    scale_up() {\r\n        if(this.m_active) {\r\n            this.m_scale_index++;\r\n            if(this.m_scale_index == MAP_TILE_PIXELS_SIZES.length) {\r\n                this.m_scale_index--;\r\n            }\r\n            this._update_scale();\r\n        }\r\n    }\r\n\r\n    scale_down() {\r\n        if(this.m_active) {\r\n            this.m_scale_index--;\r\n            if(this.m_scale_index == -1) {\r\n                this.m_scale_index++;\r\n            }\r\n            this._update_scale();\r\n        }\r\n    }\r\n\r\n    draw(): void {\r\n        this.m_context.clearRect(0, 0, this.m_canvas_width, this.m_canvas_height);\r\n        \r\n        if(this.m_active) {\r\n            // get player world position from world-to-canvas transform\r\n            const ctw_tfm = this.m_wtc_tfm.inverse();\r\n            const pos = ctw_tfm.multiply(this.m_canvas_width / 2, this.m_canvas_height / 2);\r\n\r\n            this.m_tfm.set_uniform_scale(this.m_scale);\r\n            this.m_tfm.set_translation(this.m_canvas_width / 2 - pos[0] * this.m_scale, this.m_canvas_height / 2 - pos[1] * this.m_scale);\r\n\r\n            this.m_context.save();\r\n            this.m_context.fillStyle = MAP_COLOR;\r\n            this.m_context.strokeStyle = MAP_COLOR;\r\n            this.m_context.lineWidth = 0.125;\r\n            let shift = 0;\r\n            for(let i = 0; i < this.m_sizes.length; i++) {\r\n                // i - polygon index\r\n                const s = this.m_sizes[i];  // polygon size\r\n                \r\n                // start new poligon\r\n                this.m_context.beginPath();\r\n                // get polygon corners\r\n                for(let j = 0; j < s; j++) {\r\n                    const v = this.m_polygons[shift + j];  // v - vertex index\r\n                    const x = this.m_vertices[3*v];\r\n                    const y = this.m_vertices[3*v + 2];  // skip second coordinate, it always equal to 0\r\n\r\n                    const c_position = this.m_tfm.multiply(x, y);\r\n                    if(j == 0) {  // start polygon\r\n                        this.m_context.moveTo(c_position[0], c_position[1]);\r\n                    } else {  // continue polygon\r\n                        this.m_context.lineTo(c_position[0], c_position[1]);\r\n                    }\r\n                }\r\n                // finish the polygon\r\n                this.m_context.fill();\r\n                this.m_context.stroke();\r\n\r\n                shift += s;\r\n            }\r\n\r\n            // next draw the player at the map\r\n            this.m_context.beginPath();\r\n            this.m_context.fillStyle = PLAYER_IDLE_COLOR;\r\n            const c_center = this.m_tfm.multiply(pos[0], pos[1]);\r\n\r\n            this.m_context.arc(c_center[0], c_center[1], MAP_PLAYER_SIZE, 0, 2 * Math.PI);\r\n            this.m_context.fill();\r\n            this.m_context.restore();\r\n        }\r\n    }\r\n}","import { Transform } from \"../transform\";\r\n\r\nexport class SceneItem {\r\n    protected m_tfm: Transform = new Transform();  // in-scene transform (store position, rotation and scale)\r\n    private m_debug_draw: boolean = false;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    set_debug_draw(value: boolean) {\r\n        this.m_debug_draw = value;\r\n    }\r\n    \r\n    set_position(x: number, y: number) {\r\n        this.m_tfm.set_translation(x, y);\r\n    }\r\n\r\n    set_angle(angle: number) {\r\n        this.m_tfm.set_rotation(angle);\r\n    }\r\n\r\n    get_debug_draw(): boolean {\r\n        return this.m_debug_draw;\r\n    }\r\n\r\n    get_tfm(): Transform {\r\n        return this.m_tfm;\r\n    }\r\n\r\n    get_translation(): number[] {\r\n        return this.m_tfm.translation();\r\n    }\r\n}\r\n\r\nexport class SceneIDItem extends SceneItem {\r\n    private m_entity_id: number = -1;\r\n\r\n    constructor(in_id: number) {\r\n        super();\r\n\r\n        this.m_entity_id = in_id;\r\n    }\r\n\r\n    get_id(): number {\r\n        return this.m_entity_id;\r\n    }\r\n\r\n    set_id(in_id: number) {\r\n        this.m_entity_id = in_id;\r\n    }\r\n}","import { CLICK_CURSOR_TIME } from \"../constants\";\r\nimport { Person } from \"./person\";\r\nimport { Scene } from \"./scene\";\r\nimport { SceneItem } from \"./scene_item\";\r\n\r\nexport enum CURSOR_TYPE {\r\n    NONE,\r\n    POSITION,\r\n    ENEMY_ENTITY\r\n}\r\n\r\nexport class ClickCursor extends SceneItem {\r\n    m_active: boolean = false;\r\n    m_charge: boolean = false;  // if true then it ready to activate\r\n\r\n    m_time_accum: number = 0.0;\r\n    m_life_time: number = 0.0;\r\n    m_type = CURSOR_TYPE.NONE;\r\n    m_select_person: Person | null = null;\r\n    m_parent_scene: Scene;  // use this link to the scene to get scene monsters or other information\r\n    \r\n    m_remember_last_select: boolean = false;  // if we deselect entity when it removed (too far), then remember it\r\n    m_remember_id: number = 0;\r\n\r\n    constructor(in_parent_scene: Scene) {\r\n        super();\r\n\r\n        this.m_life_time = CLICK_CURSOR_TIME;\r\n        this.m_parent_scene = in_parent_scene;\r\n    }\r\n\r\n    charge() {\r\n        this.m_charge = true;\r\n    }\r\n\r\n    is_charge(): boolean {\r\n        return this.m_charge;\r\n    }\r\n\r\n    activate_by_position(in_x: number, in_y: number) {\r\n        this.m_tfm.set_translation(in_x, in_y);\r\n\r\n        this.m_time_accum = 0.0;\r\n\r\n        this.m_active = true;\r\n        this.m_charge = false;\r\n        this.m_type = CURSOR_TYPE.POSITION;\r\n\r\n        this.m_remember_last_select = false;\r\n        this.m_remember_id = 0;\r\n    }\r\n\r\n    activate_by_entity_remember(id: number) {\r\n        if (this.m_remember_last_select && this.m_remember_id == id) {\r\n            this.activate_by_enemy_select(id);\r\n        }\r\n    }\r\n\r\n    activate_by_enemy_select(id: number) {\r\n        this.m_time_accum = 0.0;\r\n\r\n        this.m_select_person = this.m_parent_scene.get_person(id);\r\n        if (this.m_select_person) {\r\n            this.m_active = true;\r\n            this.m_charge = false;\r\n            this.m_type = CURSOR_TYPE.ENEMY_ENTITY;\r\n\r\n            this._define_tfm_for_selection();\r\n\r\n            this.m_remember_last_select = false;\r\n            this.m_remember_id = 0;\r\n        } else {\r\n            this.m_remember_last_select = true;\r\n            this.m_remember_id = id;\r\n        }\r\n    }\r\n\r\n    get_type(): CURSOR_TYPE {\r\n        return this.m_type;\r\n    }\r\n\r\n    get_active(): boolean {\r\n        return this.m_active;\r\n    }\r\n\r\n    get_translation(): number[] {\r\n        return this.m_tfm.translation();\r\n    }\r\n\r\n    get_size(): number {\r\n        return this.m_tfm.uniform_scale();\r\n    }\r\n\r\n    private _define_tfm_for_selection() {\r\n        if (this.m_type == CURSOR_TYPE.ENEMY_ENTITY && this.m_select_person) {\r\n            const pos = this.m_select_person.get_tfm().translation();\r\n            this.m_tfm.set_translation(pos[0], pos[1]);\r\n            // encode select radius in transform scale\r\n            this.m_tfm.set_uniform_scale(this.m_select_person.get_select_radius());\r\n        }\r\n    }\r\n\r\n    update(dt: number) {\r\n        if(this.m_active) {\r\n            // calculate position\r\n            if (this.m_type == CURSOR_TYPE.ENEMY_ENTITY) {\r\n                this._define_tfm_for_selection();\r\n            }\r\n            this.m_time_accum += 1000 * dt;\r\n\r\n            if(this.m_type == CURSOR_TYPE.POSITION && this.m_time_accum >= this.m_life_time) {\r\n                // measure time only for position cursor\r\n                this.deactivate();\r\n            }\r\n        }\r\n    }\r\n\r\n    // return the value from [0, 1], measure the cursor life time\r\n    get_proportion(): number {\r\n        return this.m_time_accum / this.m_life_time;\r\n    }\r\n\r\n    get_entity_select(): Person | null {\r\n        if (this.m_type == CURSOR_TYPE.ENEMY_ENTITY) {\r\n            return this.m_select_person;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    deactivate_by_entity_remove(id: number, by_dead: boolean) {\r\n        if (this.m_type == CURSOR_TYPE.ENEMY_ENTITY && this.m_select_person) {\r\n            if (this.m_select_person.get_id() == id) {\r\n                this.deactivate_enemy_select();\r\n\r\n                if (!by_dead) {\r\n                    this.m_remember_last_select = true;\r\n                    this.m_remember_id = id;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    deactivate_enemy_select() {\r\n        if (this.m_type == CURSOR_TYPE.ENEMY_ENTITY) {\r\n            this.deactivate();\r\n        }\r\n    }\r\n\r\n    deactivate() {\r\n        this.m_active = false;\r\n        this.m_charge = false;\r\n        this.m_type = CURSOR_TYPE.NONE;\r\n        this.m_select_person = null;\r\n\r\n        this.m_remember_last_select = false;\r\n        this.m_remember_id = 0;\r\n    }\r\n}","import { SceneItem } from \"./scene_item\";\r\n\r\nexport class SceneTile extends SceneItem {\r\n    m_tile_size: number = 0.0;\r\n    m_type: number = 1;\r\n\r\n    constructor(pos_x: number, pos_y: number, tile_size: number, type: number) {\r\n        super();\r\n\r\n        this.set_position(pos_x, pos_y);\r\n\r\n        this.m_tile_size = tile_size;\r\n        this.m_type = type;\r\n    }\r\n\r\n    get_tile_size(): number {\r\n        return this.m_tile_size;\r\n    }\r\n\r\n    get_type(): number {\r\n        return this.m_type;\r\n    }\r\n}","import { MOVE_STATUS } from \"../constants\";\r\nimport { SceneIDItem, SceneItem } from \"./scene_item\";\r\n\r\n// base class for player, monster and other person stuff\r\nexport class Person extends SceneIDItem {\r\n    private m_radius: number = 0.0;\r\n    private m_attack_distance: number = 0.0;\r\n    private m_life: number = 0;\r\n    private m_max_life: number = 0;\r\n    private m_shield: number = 0.0;\r\n    private m_max_shield: number = 0.0;\r\n    private m_move_status: MOVE_STATUS = MOVE_STATUS.NONE;\r\n    private m_is_dead: boolean = false;\r\n    private m_select_radius: number = 0.0;\r\n    private m_search_radius: number = 0.0;\r\n    private m_search_spread: number = 0.0;\r\n    private m_active_shield: boolean = false;\r\n    private m_team: number;\r\n    private m_is_hide: boolean = false;\r\n    private m_is_visible_search_cone: boolean = false;\r\n\r\n    constructor(in_id: number) {\r\n        super(in_id);\r\n    }\r\n\r\n    set_team(in_value: number) {\r\n        this.m_team = in_value;\r\n    }\r\n\r\n    set_is_dead(in_value: boolean) {\r\n        this.m_is_dead = in_value;\r\n    }\r\n\r\n    set_alive() {\r\n        this.m_is_dead = false;\r\n    }\r\n\r\n    get_is_dead(): boolean {\r\n        return this.m_is_dead;\r\n    }\r\n\r\n    set_radius(radius: number) {\r\n        this.m_radius = radius;\r\n    }\r\n\r\n    set_search_radius(value: number) {\r\n        this.m_search_radius = value;\r\n    }\r\n\r\n    set_search_spread(value: number) {\r\n        this.m_search_spread = value;\r\n    }\r\n\r\n    set_attack_distance(value: number) {\r\n        this.m_attack_distance = value;\r\n    }\r\n\r\n    set_life(life: number, max_life: number) {\r\n        this.m_life = life;\r\n        this.m_max_life = max_life;\r\n    }\r\n\r\n    set_active_shield(in_value: boolean) {\r\n        this.m_active_shield = in_value;\r\n    }\r\n\r\n    set_shield(shield: number, max_shield: number) {\r\n        this.m_shield = shield;\r\n        this.m_max_shield = max_shield;\r\n    }\r\n\r\n    set_select_radius(value: number) {\r\n        this.m_select_radius = value;\r\n    }\r\n\r\n    set_move(in_move: MOVE_STATUS) {\r\n        this.m_move_status = in_move;\r\n    }\r\n\r\n    set_is_hide(in_value: boolean) {\r\n        this.m_is_hide = in_value;\r\n    }\r\n\r\n    set_visible_search_cone(in_value: boolean) {\r\n        this.m_is_visible_search_cone = in_value;\r\n    }\r\n\r\n    get_move(): MOVE_STATUS {\r\n        return this.m_move_status;\r\n    }\r\n\r\n    get_radius(): number {\r\n        return this.m_radius;\r\n    }\r\n\r\n    get_attack_distance(): number {\r\n        return this.m_attack_distance;\r\n    }\r\n\r\n    get_life(): number {\r\n        return this.m_life;\r\n    }\r\n\r\n    get_max_life(): number {\r\n        return this.m_max_life;\r\n    }\r\n\r\n    get_life_proportion(): number {\r\n        return this.m_life / this.m_max_life;\r\n    }\r\n\r\n    get_shield(): number {\r\n        return this.m_shield;\r\n    }\r\n\r\n    get_max_shield(): number {\r\n        return this.m_max_shield;\r\n    }\r\n\r\n    get_shield_proportion(): number {\r\n        return this.m_shield / this.m_max_shield;\r\n    }\r\n\r\n    get_shield_active(): boolean {\r\n        return this.m_active_shield;\r\n    }\r\n\r\n    get_select_radius(): number {\r\n        return this.m_select_radius;\r\n    }\r\n\r\n    get_search_radius(): number {\r\n        return this.m_search_radius;\r\n    }\r\n\r\n    get_search_spread(): number {\r\n        return this.m_search_spread;\r\n    }\r\n\r\n    get_is_hide(): boolean {\r\n        return this.m_is_hide;\r\n    }\r\n\r\n    get_is_visible_search_cone(): boolean {\r\n        return this.m_is_visible_search_cone;\r\n    }\r\n}","import { Person } from \"./person\";\r\n\r\nexport class Player extends Person {\r\n    constructor(in_id: number) {\r\n        super(in_id);\r\n    }\r\n}","import { Person } from \"./person\";\r\n\r\nexport class Monster extends Person {\r\n    constructor(in_id: number) {\r\n        super(in_id);\r\n    }\r\n}","import { COOLDAWN } from \"../constants\"\r\n\r\n// one class to control cooldawns of all entities in the scene\r\nexport class Cooldawn {\r\n    // key - entity id\r\n    // values - map from cooldawn type to the pair (total time, elapsed time)\r\n    private m_cooldawns: Map<number, Map<COOLDAWN, [number, number]>> = new Map<number, Map<COOLDAWN, [number, number]>>();\r\n\r\n    add_entity(id: number) {\r\n        this.m_cooldawns.set(id, new Map<COOLDAWN, [number, number]>);\r\n    }\r\n\r\n    remove_entity(id: number) {\r\n        this.m_cooldawns.delete(id);\r\n    }\r\n\r\n    start_cooldawn(entity: number, cooldawn_id: COOLDAWN, total_time: number) {\r\n        this.m_cooldawns.get(entity)?.set(cooldawn_id, [total_time, 0.0]);\r\n    }\r\n\r\n    update(dt: number) {\r\n        //console.log(this.m_cooldawns.size, this.m_cooldawns);\r\n        this.m_cooldawns.forEach((c_map: Map<COOLDAWN, [number, number]>, entity: number) => {\r\n            c_map.forEach((times: [number, number], id: COOLDAWN) => {\r\n                times[1] += dt;\r\n                if (times[1] >= times[0]) {\r\n                    c_map.delete(id);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    get_cooldawns(in_entity: number): Map<COOLDAWN, [number, number]> {\r\n        const to_return = this.m_cooldawns.get(in_entity);\r\n        if (to_return) {\r\n            return to_return;\r\n        }\r\n        return new Map<COOLDAWN, [number, number]>();\r\n    }\r\n}","import { EFFECT, SKILL } from \"../constants\";\r\n\r\nexport class EffectsCollection {\r\n    // key - entity id\r\n    // value - array of effects over this entity\r\n    private m_effects: Map<number, Array<EffectBase>> = new Map<number, Array<EffectBase>>();\r\n\r\n    private add_effect(id: number, effect: EffectBase) {\r\n        if (!this.m_effects.has(id)) {\r\n            this.m_effects.set(id, new Array<EffectBase>());\r\n        }\r\n\r\n        const effects = this.m_effects.get(id);\r\n        if (effects) {\r\n            effects.push(effect);\r\n        }\r\n    }\r\n\r\n    private remove_by_type(id: number, type: EFFECT) {\r\n        const effects = this.m_effects.get(id);\r\n        // select all effects of the current entity\r\n        if (effects) {\r\n            let i = effects.length - 1;\r\n            while (i >= 0) {\r\n                const effect = effects[i];\r\n                // remove all effects which are melee attack\r\n                if (effect.type() == type) {\r\n                    effects.splice(i, 1);\r\n                }\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n\r\n    add_melee_attack(entity: number, time: number, distance: number, spread: number) {\r\n        this.add_effect(entity, new MeleeAttackEffect(time, distance, spread));\r\n    }\r\n\r\n    add_range_attack(entity: number, time: number) {\r\n        this.add_effect(entity, new RangeAttackEffect(time));\r\n    }\r\n\r\n    add_hand_attack(entity: number, time: number, distance: number) {\r\n        this.add_effect(entity, new HandAttackEffect(time, distance));\r\n    }\r\n\r\n    add_shadow_attack(entity: number, time: number, distance: number) {\r\n        this.add_effect(entity, new ShadowAttackEffect(time, distance));\r\n    }\r\n\r\n    add_stun(entity: number, duration: number) {\r\n        this.add_effect(entity, new StunEffect(duration));\r\n    }\r\n\r\n    add_hide_cast(entity: number, duration: number) {\r\n        this.add_effect(entity, new HideActivationEffect(duration));\r\n    }\r\n\r\n    add_skill_round_attack(entity: number, duration: number, area_size: number) {\r\n        this.add_effect(entity, new SkillRoundAttackEffect(duration, area_size));\r\n    }\r\n\r\n    add_skill_stun_cone(entity: number, duration: number, cone_spread: number, cone_size: number) {\r\n        this.add_effect(entity, new SkillStunConeEffect(duration, cone_spread, cone_size));\r\n    }\r\n\r\n    remove_melee_attack(entity: number) {\r\n        this.remove_by_type(entity, EFFECT.MELEE_ATTACK);\r\n    }\r\n\r\n    remove_range_attack(entity: number) {\r\n        this.remove_by_type(entity, EFFECT.RANGE_ATTACK);\r\n    }\r\n\r\n    remove_hand_attack(entity: number) {\r\n        this.remove_by_type(entity, EFFECT.HAND_ATTACK);\r\n    }\r\n\r\n    remove_shadow_attack(entity: number) {\r\n        this.remove_by_type(entity, EFFECT.SHADOW_ATTACK);\r\n    }\r\n\r\n    remove_skill(entity: number, skill: SKILL) {\r\n        if (skill == SKILL.ROUND_ATTACK) {\r\n            this.remove_by_type(entity, EFFECT.SKILL_ROUND_ATTACK);\r\n        } else if (skill == SKILL.STUN_CONE) {\r\n            this.remove_by_type(entity, EFFECT.SKILL_STUN_CONE);\r\n        }\r\n    }\r\n\r\n    remove_stun(entity: number) {\r\n        this.remove_by_type(entity, EFFECT.STUN);\r\n    }\r\n\r\n    remove_hide_cast(entity: number) {\r\n        this.remove_by_type(entity, EFFECT.HIDE_ACTIVATION);\r\n    }\r\n\r\n    update(dt: number) {\r\n        for (const [entity, effects] of this.m_effects) {\r\n            let i = effects.length - 1;\r\n            while (i >= 0) {\r\n                const effect = effects[i];\r\n                const is_active = effect.update(dt);\r\n                if (!is_active) {\r\n                    effects.splice(i, 1);\r\n                }\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n\r\n    get_entity_effects(entity: number): Array<EffectBase> {\r\n        const effects = this.m_effects.get(entity);\r\n        if (effects) {\r\n            return effects;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n}\r\n\r\nexport class EffectBase {\r\n    private m_total_time: number;\r\n    private m_spend_time: number\r\n    private m_type: EFFECT;\r\n\r\n    constructor(in_total_time: number,\r\n                in_type: EFFECT) {\r\n        this.m_total_time = in_total_time;\r\n        this.m_spend_time = 0.0;\r\n        this.m_type = in_type;\r\n    }\r\n\r\n    // return true if effect is active, false if it should be erased\r\n    update(dt: number): boolean {\r\n        this.m_spend_time += dt;\r\n\r\n        if (this.m_total_time <= this.m_spend_time) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    type(): EFFECT {\r\n        return this.m_type;\r\n    }\r\n\r\n    proportion(): number {\r\n        return this.m_spend_time / this.m_total_time;\r\n    }\r\n}\r\n\r\nexport class MeleeAttackEffect extends EffectBase {\r\n    private m_distance: number;\r\n    private m_spread: number;\r\n\r\n    constructor(in_total_time: number,\r\n                in_distance: number,\r\n                in_spread: number) {\r\n        super(in_total_time, EFFECT.MELEE_ATTACK);\r\n\r\n        this.m_distance = in_distance;\r\n        this.m_spread = in_spread;\r\n    }\r\n\r\n    distance(): number {\r\n        return this.m_distance;\r\n    }\r\n\r\n    spread(): number {\r\n        return this.m_spread;\r\n    }\r\n}\r\n\r\nexport class RangeAttackEffect extends EffectBase {\r\n\r\n    constructor(in_total_time: number) {\r\n        super(in_total_time, EFFECT.RANGE_ATTACK);\r\n    }\r\n}\r\n\r\nexport class HandAttackEffect extends EffectBase {\r\n    private m_distance: number;\r\n\r\n    constructor(in_total_time: number,\r\n                in_distance: number) {\r\n        super(in_total_time, EFFECT.HAND_ATTACK);\r\n\r\n        this.m_distance = in_distance;\r\n    }\r\n\r\n    distance(): number {\r\n        return this.m_distance;\r\n    }\r\n}\r\n\r\nexport class ShadowAttackEffect extends EffectBase {\r\n    private m_distance: number;\r\n\r\n    constructor(in_total_time: number,\r\n                in_distance: number) {\r\n        super(in_total_time, EFFECT.SHADOW_ATTACK);\r\n\r\n        this.m_distance = in_distance;\r\n    }\r\n\r\n    distance(): number {\r\n        return this.m_distance;\r\n    }\r\n}\r\n\r\nexport class StunEffect extends EffectBase {\r\n    constructor(duration: number) {\r\n        super(duration, EFFECT.STUN);\r\n    }\r\n}\r\n\r\nexport class HideActivationEffect extends EffectBase {\r\n    constructor(duration: number) {\r\n        super(duration, EFFECT.HIDE_ACTIVATION);\r\n    }\r\n}\r\n\r\nexport class SkillRoundAttackEffect extends EffectBase {\r\n    private m_area_size: number;\r\n    constructor(duration: number, area_size: number) {\r\n        super(duration, EFFECT.SKILL_ROUND_ATTACK);\r\n        this.m_area_size = area_size;\r\n    }\r\n\r\n    area_size(): number { return this.m_area_size; }\r\n}\r\n\r\nexport class SkillStunConeEffect extends EffectBase {\r\n    private m_cone_spread: number;\r\n    private m_cone_size: number;\r\n    constructor(duration: number, cone_spread: number, cone_size: number) {\r\n        super(duration, EFFECT.SKILL_STUN_CONE);\r\n        this.m_cone_spread = cone_spread;\r\n        this.m_cone_size = cone_size;\r\n    }\r\n\r\n    cone_spread(): number { return this.m_cone_spread; }\r\n    cone_size(): number { return this.m_cone_size; }\r\n}","import { BULLET_TYPE } from \"../constants\";\r\nimport { SceneIDItem, SceneItem } from \"./scene_item\";\r\n\r\nexport class Bullet extends SceneIDItem {\r\n    private m_type: BULLET_TYPE;\r\n\r\n    private m_debug_target_x: number = 0.0;\r\n    private m_debug_target_y: number = 0.0;\r\n\r\n    constructor(id: number, type: BULLET_TYPE) {\r\n        super(id);\r\n\r\n        this.m_type = type;\r\n    }\r\n\r\n    set_debug_target(x: number, y: number) {\r\n        this.m_debug_target_x = x;\r\n        this.m_debug_target_y = y;\r\n    }\r\n\r\n    get_type(): BULLET_TYPE {\r\n        return this.m_type;\r\n    }\r\n\r\n    get_debug_target_x(): number {\r\n        return this.m_debug_target_x;\r\n    }\r\n\r\n    get_debug_target_y(): number {\r\n        return this.m_debug_target_y;\r\n    }\r\n}","import { ClickCursor } from \"./click_cursor\";\r\nimport { BULLET_TYPE, COOLDAWN, FIRST_MOUSE_CLICK_DELTA, MOVE_STATUS, OTHER_MOUSE_CLICK_DELTA, SKILL, TARGET_ACTION } from \"../constants\";\r\nimport { SceneTile } from \"./scene_tile\";\r\nimport { Player } from \"./player\";\r\nimport { Monster } from \"./monster\";\r\nimport { Cooldawn } from \"./cooldawn\";\r\nimport { EffectsCollection, EffectBase } from \"./effect\";\r\nimport { Person } from \"./person\";\r\nimport { Bullet } from \"./bullet\";\r\n\r\n// the Scene instance contains data of objects in the game\r\nexport class Scene {\r\n    private m_level_width: number = 0;\r\n    private m_level_height: number = 0;\r\n    private m_level_tile_size: number = 0.0;\r\n\r\n    private m_last_click_time: number = 0;\r\n    private m_click_number: number = 0;\r\n    private m_click_cursor: ClickCursor = new ClickCursor(this);\r\n    private m_level_tiles: Map<number, SceneTile> = new Map<number, SceneTile>();\r\n    private m_player: Player = new Player(0);\r\n    private m_player_id: number = 0;\r\n    private m_monsters: Map<number, Monster> = new Map<number, Monster>();\r\n    private m_bullets: Map<number, Bullet> = new Map<number, Bullet>();\r\n    private m_cooldawns: Cooldawn = new Cooldawn();\r\n    private m_effects: EffectsCollection = new EffectsCollection();\r\n    private m_visible_search_cones: boolean = false;\r\n\r\n    constructor(level_width: number,\r\n                level_height: number,\r\n                level_tile_size: number) {\r\n        this.m_level_width = level_width;\r\n        this.m_level_height = level_height;\r\n        this.m_level_tile_size = level_tile_size;\r\n    }\r\n\r\n    update(dt: number) {\r\n        this.m_cooldawns.update(dt);\r\n        this.m_effects.update(dt);\r\n        this.m_click_cursor.update(dt);\r\n    }\r\n\r\n    // return true if we should send the click to the game\r\n    // false if it's not required\r\n    // is_force = true when we call this method by mouse press\r\n    // is_force = false if the method called when the mouse is hold\r\n    // if this method return true, then we send command to the game and it will call external method for select entity or point position (or may be nothing)\r\n    input_click(in_canvas_x: number, in_canvas_y: number,\r\n                in_world_x: number, in_world_y: number,\r\n                is_force: boolean): boolean {\r\n        const current_time = performance.now();\r\n        if(is_force || current_time - this.m_last_click_time > (this.m_click_number == 1 ? FIRST_MOUSE_CLICK_DELTA : OTHER_MOUSE_CLICK_DELTA)) {\r\n            this.m_last_click_time = current_time;\r\n            this.m_click_number += 1;\r\n            if(this.m_click_number > 2) {\r\n                this.m_click_number = 2;\r\n            }\r\n\r\n            if (is_force) {\r\n                this.m_click_cursor.charge();\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    input_click_entity(id: number, action: TARGET_ACTION) {\r\n        if (action != TARGET_ACTION.NONE) {\r\n            this.m_click_cursor.activate_by_enemy_select(id);\r\n        }\r\n    }\r\n\r\n    input_click_position(pos_x: number, pos_y: number) {\r\n        if (this.m_click_cursor.is_charge()) {\r\n            this.m_click_cursor.activate_by_position(pos_x, pos_y);\r\n        }\r\n\r\n        this.m_click_cursor.deactivate_enemy_select();\r\n    }\r\n    \r\n    // call when release the mouse\r\n    reset_click() {\r\n        this.m_click_number = 0;\r\n    }\r\n\r\n    // may call from client to draw the cursor on the canvas\r\n    get_click_cursor(): ClickCursor {\r\n        return this.m_click_cursor;\r\n    }\r\n\r\n    get_cooldawns(): Cooldawn {\r\n        return this.m_cooldawns;\r\n    }\r\n\r\n    get_person_cooldawns(entity: number): Map<COOLDAWN, [number, number]> {\r\n        return this.m_cooldawns.get_cooldawns(entity);\r\n    }\r\n\r\n    get_person_effects(entity: number): Array<EffectBase> {\r\n        return this.m_effects.get_entity_effects(entity);\r\n    }\r\n\r\n    get_level_tiles(): Map<number, SceneTile> {\r\n        return this.m_level_tiles;\r\n    }\r\n\r\n    get_player(): Player {\r\n        return this.m_player;\r\n    }\r\n\r\n    get_monsters(): Map<number, Monster> {\r\n        return this.m_monsters;\r\n    }\r\n\r\n    get_bullets(): Map<number, Bullet> {\r\n        return this.m_bullets;\r\n    }\r\n\r\n    get_person(id: number): Person | null {\r\n        if (id == this.m_player_id) {\r\n            return this.m_player;\r\n        } else {\r\n            const monster = this.m_monsters.get(id);\r\n            if (monster) {\r\n                return monster;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    get_bullet(id: number): Bullet | null {\r\n        if (this.m_bullets.has(id)) {\r\n            const b = this.m_bullets.get(id);\r\n            if (b) {\r\n                return b;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    get_entity_position(id: number): number[] {\r\n        if (id == this.m_player_id) {\r\n            return this.m_player.get_tfm().translation();\r\n        } else {\r\n            const monster = this.m_monsters.get(id);\r\n            if (monster) {\r\n                return monster.get_tfm().translation();\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    delete_tile(index: number) {\r\n        if(this.m_level_tiles.has(index)) {\r\n            this.m_level_tiles.delete(index);\r\n        }\r\n    }\r\n\r\n    create_tile(pos_x: number, pos_y: number, index: number, type: number) {\r\n        this.m_level_tiles.set(index, new SceneTile(pos_x, \r\n                                                    pos_y,\r\n                                                    this.m_level_tile_size,\r\n                                                    type));\r\n    }\r\n\r\n    // called when we create the player entity\r\n    set_player_id(in_id: number) {\r\n        this.m_player_id = in_id;\r\n        this.m_player.set_id(in_id);\r\n        this.m_cooldawns.add_entity(in_id);\r\n    }\r\n\r\n    // if player is shift, then destroy the cursor\r\n    entity_start_shift(id: number) {\r\n        if (this.m_player_id == id) {\r\n            this.m_click_cursor.deactivate();\r\n        }\r\n    }\r\n\r\n    is_player(in_id: number): boolean {\r\n        return this.m_player_id == in_id;\r\n    }\r\n\r\n    set_player_radius(radius: number) {\r\n        this.m_player.set_radius(radius);\r\n    }\r\n\r\n    set_entity_attack_distance(id: number, value: number) {\r\n        if (this.m_player_id == id) {\r\n            this.m_player.set_attack_distance(value);\r\n        } else {\r\n            if(this.m_monsters.has(id)) {\r\n                const monster = this.m_monsters.get(id);\r\n                if(monster) {\r\n                    monster.set_attack_distance(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_life(id: number, life: number, max_life: number) {\r\n        if (this.m_player_id == id) {\r\n            this.m_player.set_life(life, max_life);\r\n        } else {\r\n            if(this.m_monsters.has(id)) {\r\n                const monster = this.m_monsters.get(id);\r\n                if(monster) {\r\n                    monster.set_life(life, max_life);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_activate_shield(id: number, is_active: boolean) {\r\n        if (this.m_player_id == id) {\r\n            this.m_player.set_active_shield(is_active);\r\n            this.m_click_cursor.deactivate();\r\n        } else {\r\n            if(this.m_monsters.has(id)) {\r\n                const monster = this.m_monsters.get(id);\r\n                if(monster) {\r\n                    monster.set_active_shield(is_active);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_shield(id: number, shield: number, max_shield: number) {\r\n        if (this.m_player_id == id) {\r\n            this.m_player.set_shield(shield, max_shield);\r\n        } else {\r\n            if(this.m_monsters.has(id)) {\r\n                const monster = this.m_monsters.get(id);\r\n                if(monster) {\r\n                    monster.set_shield(shield, max_shield);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_dead(id: number, is_dead: boolean) {\r\n        if (this.m_player_id == id) {\r\n            this.m_player.set_is_dead(is_dead);\r\n            if (is_dead) {\r\n                this.m_click_cursor.deactivate_enemy_select();\r\n            }\r\n        } else {\r\n            if(this.m_monsters.has(id)) {\r\n                const monster = this.m_monsters.get(id);\r\n                if(monster) {\r\n                    monster.set_is_dead(is_dead);\r\n                }\r\n            }\r\n\r\n            if (is_dead) {\r\n                this.m_click_cursor.deactivate_by_entity_remove(id, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_alive(id: number) {\r\n        if (this.m_player_id == id) {\r\n            this.m_player.set_alive();\r\n        } else {\r\n            if(this.m_monsters.has(id)) {\r\n                const monster = this.m_monsters.get(id);\r\n                if(monster) {\r\n                    monster.set_alive();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_attack_time(id: number, value: number) {\r\n        if (this.m_player_id == id) {\r\n            \r\n        }\r\n    }\r\n\r\n    set_entity_select_radius(id: number, value: number) {\r\n        if (id == this.m_player_id) {\r\n            this.m_player.set_select_radius(value);\r\n        } else {\r\n            if(this.m_monsters.has(id)) {\r\n                const monster = this.m_monsters.get(id);\r\n                if(monster) {\r\n                    monster.set_select_radius(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    create_monster(id: number) {\r\n        const monster = new Monster(id);\r\n        monster.set_visible_search_cone(this.m_visible_search_cones);\r\n        this.m_cooldawns.add_entity(id);\r\n\r\n        this.m_monsters.set(id, monster);\r\n    }\r\n\r\n    create_bullet(id: number, bullet_type: BULLET_TYPE) {\r\n        const bullet = new Bullet(id, bullet_type);\r\n        this.m_bullets.set(id, bullet);\r\n    }\r\n\r\n    post_monster_create(id: number) {\r\n        this.m_click_cursor.activate_by_entity_remember(id);\r\n    }\r\n\r\n    set_entity_position(entity: number, x: number, y: number) {\r\n        if (entity == this.m_player_id) {\r\n            this.m_player.set_position(x, y);\r\n        } else {\r\n            if (this.m_monsters.has(entity)) {\r\n                const monster = this.m_monsters.get(entity);\r\n                if (monster) {\r\n                    monster.set_position(x, y);\r\n                }\r\n            } else if (this.m_bullets.has(entity)) {\r\n                const bullet = this.m_bullets.get(entity);\r\n                if (bullet) {\r\n                    bullet.set_position(x, y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_monster_radius(entity: number, radius: number) {\r\n        if (this.m_monsters.has(entity)) {\r\n            const monster = this.m_monsters.get(entity);\r\n            if (monster) {\r\n                monster.set_radius(radius);\r\n            }\r\n        }\r\n    }\r\n\r\n    set_monster_search_radius(id: number, value: number) {\r\n        if (this.m_monsters.has(id)) {\r\n            const monster = this.m_monsters.get(id);\r\n            if (monster) {\r\n                monster.set_search_radius(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    set_monster_search_spread(id: number, value: number) {\r\n        if(this.m_monsters.has(id)) {\r\n            const monster = this.m_monsters.get(id);\r\n            if(monster) {\r\n                monster.set_search_spread(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_team(id: number, team: number) {\r\n        if (id == this.m_player_id) {\r\n            this.m_player.set_team(team);\r\n        } else {\r\n            if(this.m_monsters.has(id)) {\r\n                const monster = this.m_monsters.get(id);\r\n                if(monster) {\r\n                    monster.set_team(team);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_angle(entity: number, angle: number) {\r\n        if (entity == this.m_player_id) {\r\n            this.m_player.set_angle(angle);\r\n        } else {\r\n            if(this.m_monsters.has(entity)) {\r\n                const monster = this.m_monsters.get(entity);\r\n                if(monster) {\r\n                    monster.set_angle(angle);\r\n                }\r\n            } else if (this.m_bullets.has(entity)) {\r\n                const bullet = this.m_bullets.get(entity);\r\n                if (bullet) {\r\n                    bullet.set_angle(angle);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_move(entity: number, move_status: MOVE_STATUS) {\r\n        if (entity == this.m_player_id) {\r\n            this.m_player.set_move(move_status);\r\n        }\r\n        else {\r\n            if(this.m_monsters.has(entity)) {\r\n                const monster = this.m_monsters.get(entity);\r\n                if(monster) {\r\n                    monster.set_move(move_status);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_hide(id: number, is_hide: boolean) {\r\n        if (id == this.m_player_id) {\r\n            this.m_player.set_is_hide(is_hide);\r\n        }\r\n        else {\r\n            if(this.m_monsters.has(id)) {\r\n                const monster = this.m_monsters.get(id);\r\n                if(monster) {\r\n                    monster.set_is_hide(is_hide);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set_bullet_target_position(id: number, x: number, y: number) {\r\n        if (this.m_bullets.has(id)) {\r\n            const bullet = this.m_bullets.get(id);\r\n            if (bullet) {\r\n                bullet.set_debug_target(x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    activate_monster_search_cones() {\r\n        this.m_visible_search_cones = true;\r\n        for (const [id, monster] of this.m_monsters) {\r\n            monster.set_visible_search_cone(true);\r\n        }\r\n    }\r\n\r\n    deactivate_monster_search_cones() {\r\n        this.m_visible_search_cones = false;\r\n        for (const [id, monster] of this.m_monsters) {\r\n            monster.set_visible_search_cone(false);\r\n        }\r\n    }\r\n\r\n    entity_start_melee_attack(entity: number, time: number, damage_distance: number, damage_spread: number) {\r\n        this.m_effects.add_melee_attack(entity, time, damage_distance, damage_spread);\r\n    }\r\n\r\n    entity_finish_melee_attack(entity: number) {\r\n        this.m_effects.remove_melee_attack(entity);\r\n    }\r\n\r\n    entity_start_range_attack(entity: number, time: number) {\r\n        this.m_effects.add_range_attack(entity, time);\r\n    }\r\n\r\n    entity_finish_range_attack(entity: number) {\r\n        this.m_effects.remove_range_attack(entity);\r\n    }\r\n\r\n    entity_start_hand_attack(entity: number, time: number, damage_distance: number) {\r\n        this.m_effects.add_hand_attack(entity, time, damage_distance);\r\n    }\r\n\r\n    entity_finish_hand_attack(entity: number) {\r\n        this.m_effects.remove_hand_attack(entity);\r\n    }\r\n\r\n    entity_start_shadow_attack(entity: number, time: number, damage_distance: number) {\r\n        this.m_effects.add_shadow_attack(entity, time, damage_distance);\r\n    }\r\n\r\n    entity_finish_shadow_attack(entity: number) {\r\n        this.m_effects.remove_shadow_attack(entity);\r\n    }\r\n\r\n    entity_finish_skill(entity: number, skill: SKILL) {\r\n        this.m_effects.remove_skill(entity, skill);\r\n    }\r\n\r\n    entity_start_stun(id: number, duration: number) {\r\n        if (id == this.m_player_id) {\r\n            this.m_click_cursor.deactivate_enemy_select();\r\n        }\r\n\r\n        this.m_effects.add_stun(id, duration);\r\n    }\r\n\r\n    entity_finish_stun(id: number) {\r\n        this.m_effects.remove_stun(id);\r\n    }\r\n\r\n    entity_start_hide_cast(id: number, duration: number) {\r\n        this.m_effects.add_hide_cast(id, duration);\r\n    }\r\n\r\n    entity_finish_hide_cast(id: number) {\r\n        this.m_effects.remove_hide_cast(id);\r\n    }\r\n\r\n    entity_start_skill_round_attack(id: number, cast_time: number, area_size: number) {\r\n        this.m_effects.add_skill_round_attack(id, cast_time, area_size);\r\n    }\r\n\r\n    entity_start_skill_stun_cone(id: number, cast_time: number, cone_spread: number, cone_size: number) {\r\n        this.m_effects.add_skill_stun_cone(id, cast_time, cone_spread, cone_size);\r\n    }\r\n\r\n    remove_monster(entity: number) {\r\n        if(this.m_monsters.has(entity)) {\r\n            // cursor can have the link to removed entity\r\n            // remove this link and only then delete the entity\r\n            this.m_click_cursor.deactivate_by_entity_remove(entity, false);\r\n            this.m_monsters.delete(entity);\r\n        }\r\n\r\n        this.m_cooldawns.remove_entity(entity);\r\n    }\r\n\r\n    remove_bullet(entity: number) {\r\n        this.m_bullets.delete(entity);\r\n    }\r\n}","export function cursor_coordinates(canvas: HTMLCanvasElement, mouse_event: MouseEvent): number[] {\r\n    const canvas_rect = canvas.getBoundingClientRect();\r\n    return [mouse_event.clientX - canvas_rect.left, mouse_event.clientY - canvas_rect.top];\r\n}\r\n\r\nexport function touch_coordinates(canvas: HTMLCanvasElement, touch_event: TouchEvent): number[] {\r\n    const canvas_rect = canvas.getBoundingClientRect();\r\n    const touches = touch_event.touches;\r\n    if (touches && touches.length > 0) {\r\n        return [touch_event.touches[0].clientX - canvas_rect.left, touch_event.touches[0].clientY - canvas_rect.top];\r\n    } else {\r\n        return [];\r\n    }\r\n}","export class UIElement {\r\n    \r\n}","import { UIElement } from \"./ui_element\";\r\n\r\nexport class UIHTMLElement extends UIElement {\r\n    m_html_element: HTMLElement | null;\r\n\r\n    constructor(html_id: string) {\r\n        super();\r\n\r\n        this.m_html_element = document.getElementById(html_id);\r\n    }\r\n\r\n    show() {\r\n        if(this.m_html_element) {\r\n            this.m_html_element.style.visibility = \"visible\";\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        if(this.m_html_element) {\r\n            this.m_html_element.style.visibility = \"hidden\";\r\n        }\r\n    }\r\n}","import { UIHTMLElement } from \"./ui_html_element\";\r\n\r\nexport class UIHTMLTextElement extends UIHTMLElement {\r\n    constructor(html_id: string) {\r\n        super(html_id);\r\n    }\r\n\r\n    set_text(text: string) {\r\n        if(this.m_html_element) {\r\n            this.m_html_element.innerText = text;\r\n        }\r\n    }\r\n}","import { UIHTMLTextElement } from \"./ui_html_text_element\";\r\n\r\nexport class FPSCounter extends UIHTMLTextElement {\r\n    m_accumulator: number = 0.0;\r\n    m_ticks: number = 0;\r\n    m_value: number = 0.0;\r\n\r\n    constructor(html_id: string) {\r\n        super(html_id);\r\n\r\n\r\n    }\r\n\r\n    update(dt: number) {\r\n        // update fps counter\r\n        // calculate fps\r\n        this.m_accumulator += dt;\r\n        this.m_ticks += 1;\r\n\r\n        if(this.m_accumulator > 2.0) {\r\n            this.m_value = this.m_ticks / this.m_accumulator;\r\n\r\n            // reset fps value\r\n            this.m_accumulator = 0.0;\r\n            this.m_ticks = 0;\r\n\r\n            this.set_text((Math.round(this.m_value * 100) / 100).toFixed(2).toString());\r\n        }\r\n    }\r\n}","import { UIHTMLTextElement } from \"./ui_html_text_element\";\r\n\r\nexport class UIItems {\r\n    m_total_element: UIHTMLTextElement;\r\n    m_visible_element: UIHTMLTextElement;\r\n\r\n    constructor(total_id: string, visible_id: string) {\r\n        this.m_total_element = new UIHTMLTextElement(total_id);\r\n        this.m_visible_element = new UIHTMLTextElement(visible_id);\r\n    }\r\n\r\n    update_values(total: number, visible: number) {\r\n        if(this.m_total_element) {\r\n            this.m_total_element.set_text(total.toString());\r\n        }\r\n\r\n        if(this.m_visible_element) {\r\n            this.m_visible_element.set_text((visible + 1).toString());\r\n        }\r\n    }\r\n}","import { FPSCounter } from \"./ui_fps\";\r\nimport { UIHTMLElement } from \"./ui_html_element\";\r\nimport { UIHTMLTextElement } from \"./ui_html_text_element\";\r\nimport { UIItems } from \"./ui_items\";\r\n\r\nexport class GameUI {\r\n    m_active: boolean = true;\r\n\r\n    m_fps: FPSCounter;\r\n    m_items: UIItems;\r\n    m_pause_screen: UIHTMLElement;\r\n    m_loading: UIHTMLElement;\r\n    m_control_keyboard: UIHTMLElement;\r\n    m_control_touch: UIHTMLElement;\r\n    m_position: UIHTMLTextElement;\r\n\r\n    assign_fps_element(html_id: string) {\r\n        this.m_fps = new FPSCounter(html_id);\r\n    }\r\n\r\n    assign_count_elements(total_id: string, visible_id: string) {\r\n        this.m_items = new UIItems(total_id, visible_id);\r\n    }\r\n\r\n    assign_pause_screen(html_id: string) {\r\n        this.m_pause_screen = new UIHTMLElement(html_id);\r\n    }\r\n\r\n    assign_control_keyboard(html_id: string) {\r\n        this.m_control_keyboard = new UIHTMLElement(html_id);\r\n    }\r\n\r\n    assign_control_touch(html_id: string) {\r\n        this.m_control_touch = new UIHTMLElement(html_id);\r\n    }\r\n\r\n    assign_loading(html_id: string) {\r\n        this.m_loading = new UIHTMLElement(html_id);\r\n    }\r\n\r\n    assign_position(html_id: string) {\r\n        this.m_position = new UIHTMLTextElement(html_id);\r\n    }\r\n\r\n    update_count_values(total: number, visible: number) {\r\n        if(this.m_items) {\r\n            this.m_items.update_values(total, visible);\r\n        }\r\n    }\r\n\r\n    update_position(in_translation: number[]) {\r\n        if (this.m_position && in_translation.length >= 2) {\r\n            this.m_position.set_text(\"(\" + in_translation[0].toFixed(2).toString() + \", \" + in_translation[1].toFixed(2).toString() + \")\");\r\n        }\r\n    }\r\n\r\n    on_pause(is_touch: boolean) {\r\n        this.m_pause_screen.show();\r\n        if (is_touch) {\r\n            this.m_control_touch.show();\r\n            this.m_control_keyboard.hide();\r\n        } else {\r\n            this.m_control_touch.hide();\r\n            this.m_control_keyboard.show();\r\n        }\r\n    }\r\n\r\n    off_pause() {\r\n        this.m_pause_screen.hide();\r\n        this.m_control_keyboard.hide();\r\n        this.m_control_touch.hide();\r\n    }\r\n\r\n    loading_hide() {\r\n        this.m_loading.hide();\r\n    }\r\n\r\n    update(dt: number) {\r\n        if(this.m_active) {\r\n            this.m_fps.update(dt);\r\n        }\r\n    }\r\n}","import { ClientBase } from \"./client_base\";\r\n\r\nexport function game_setup(client: ClientBase, module, settings_ptr, use_debug: boolean) {\r\n    // change default settings\r\n    // select random seed\r\n    const seed = Math.floor(Math.random() * 4294967295);\r\n    // controllable seed ↓ for test\r\n    if (use_debug) {\r\n        module.settings_set_seed(settings_ptr, 12);\r\n    } else {\r\n        module.settings_set_seed(settings_ptr, seed);\r\n    }\r\n    module.settings_set_rvo_time_horizon(settings_ptr, 0.25);\r\n    if (use_debug) {\r\n        // use these settings ↓ for development\r\n        // module.settings_set_generate(settings_ptr, 12, 3, 4, 1);\r\n        // another settings\r\n        module.settings_set_generate(settings_ptr, 18, 6, 6, 2);\r\n    } else {\r\n        module.settings_set_generate(settings_ptr,\r\n            22,  // level size\r\n            2, 4,  // min and max room size\r\n            10  // the number of rooms\r\n        );\r\n    }\r\n\r\n    // activate debug info\r\n    module.settings_set_use_debug(settings_ptr, use_debug);\r\n    client.debug_define_draw_flag(use_debug);  // for the client\r\n    module.settings_set_debug_flags(settings_ptr, \r\n        true,  // show path\r\n        false,  // show lines to the closest entities\r\n        false,  // show visible rect\r\n        false,  // show neighbourhood rect\r\n        false,  // show search rect\r\n        false,  // show mid rect\r\n        true);  // show lines to monster enemies\r\n    // setup engine settings\r\n    if (use_debug) {\r\n        module.settings_set_react_attack(settings_ptr, false);\r\n    }\r\n    module.settings_set_snap_to_navmesh(settings_ptr, true);\r\n    module.settings_set_use_rvo(settings_ptr, true);\r\n    module.settings_set_path_recalculate_time(settings_ptr, 1.0, 0.1);\r\n    module.settings_set_velocity_boundary_control(settings_ptr, true);\r\n    module.settings_set_level_tile_size(settings_ptr, 1.5);  // size of one tile in the map\r\n    module.settings_set_tiles_visible_radius(settings_ptr, 12);  // how many map tiles are visible around the player\r\n    module.settings_set_search_system_chunk_count(settings_ptr, 5);\r\n    module.settings_set_visible_quad_size(settings_ptr, 18.0);  // visibility radius for the player\r\n    module.settings_set_neighbourhood_quad_size(settings_ptr, 1.0);  // tweak this for greater radius for search close entities\r\n    module.settings_set_search_quad_size(settings_ptr, 5.2);  // used for search enemies, should be greater than monster search radius\r\n    module.settings_set_mid_quad_size(settings_ptr, 4.0);  // used for attack, should be greater than weapon (and skills) damage radius\r\n    // setup game items default parameters\r\n    module.settings_set_player(settings_ptr, 0.5,  // radius\r\n        5.0,  // speed\r\n        12,  // life\r\n        24.0,  // rotation speed\r\n        1.0,  // shield resurrect\r\n        1,  // team\r\n        3.0,  // shift speed multiplier\r\n        7.0,  // shift distance\r\n        1.0,  // shift cooldawn\r\n        0.5,  // hide speed multiplier\r\n        1.0,  // hide cooldawn\r\n        0.5);  // hide activate time\r\n    module.settings_set_default_empty_weapon(settings_ptr, 0.5,  // attack time\r\n        1.0,  // attack distance\r\n        0.75,  // attack cooldawn\r\n        1.5,  // damage distance\r\n        4,  // damage\r\n        5.0);  // shield\r\n    \r\n    module.settings_set_default_monster_person(settings_ptr, 0.5,  // radius\r\n        3.0,  // speed\r\n        8,  // life\r\n        5.0,  // search radius\r\n        Math.PI / 2.5,  // search spread\r\n        -1);  // team\r\n    \r\n    if (use_debug) {\r\n        module.settings_set_monster_iddle_time(settings_ptr, 1000.0, 2000.0);\r\n        module.settings_set_monsters_per_room(settings_ptr, 5, 50);  // no random monsters\r\n    } else {\r\n        module.settings_set_monster_iddle_time(settings_ptr, 1.0, 2.0);\r\n        module.settings_set_monsters_per_room(settings_ptr, 3, 5);\r\n    }\r\n}\r\n\r\nexport function setup_player_inventar(module, local_this) {\r\n    // add weapons to the player inventory\r\n    module.dev_add_sword_to_player(local_this.m_game_ptr,\r\n            1.0, 0.75, 1.25, 7, 12.0, Math.PI / 2.0, 2.0);\r\n    module.dev_add_bow_to_player(local_this.m_game_ptr,\r\n        5.5, 0.5, 0.75, 7, 7.0, 12.0);\r\n}","import { __Internref27, instantiate } from \"../wasm/build/game_api\";\r\nimport { SceneMap } from \"./scene/scene_map\";\r\nimport { Scene } from \"./scene/scene\";\r\nimport { Transform } from \"./transform\";\r\nimport { ACTOR, COOLDAWN, DAMAGE_TYPE, DEFAULT_HEIGHT, DEFAULT_WIDTH, DOUBLE_TOUCH_CURSOR_DELTA, DOUBLE_TOUCH_DELTA, MOVE_STATUS, REMOVE_REASON, RESIZABLE_HEIGHT_CLASS_NAME, RESIZABLE_WIDTH_CLASS_NAME, SKILL, TARGET_ACTION, TILE_PIXELS_SIZE } from \"./constants\";\r\nimport { cursor_coordinates, touch_coordinates } from \"./utilities\";\r\nimport { GameUI } from \"./ui/ui\";\r\nimport { game_setup, setup_player_inventar } from \"./game_setup\";\r\n\r\n// base class for client of the game\r\n// it implement functionality for connecting between wasm module (the server) and client IO\r\n// particular graphic backend should use this base class\r\nexport abstract class ClientBase {\r\n    m_game_ptr: __Internref27;\r\n    m_scene_canvas: HTMLCanvasElement;\r\n    m_scene_ctx: CanvasRenderingContext2D;\r\n\r\n    m_map_canvas: HTMLCanvasElement;\r\n    m_map_ctx: CanvasRenderingContext2D;\r\n\r\n    m_scene: Scene;\r\n\r\n    m_ui: GameUI;\r\n\r\n    m_level_width: number;\r\n    m_level_height: number;\r\n    m_level_tile_size: number;\r\n\r\n    m_current_time: number;\r\n    m_module: any = undefined;\r\n    m_is_start: boolean = false;\r\n\r\n    m_is_wait_click: boolean = false;\r\n    m_activated_skill: SKILL = SKILL.NONE;\r\n\r\n    m_map: SceneMap;\r\n    m_wtc_tfm: Transform = new Transform();\r\n    m_wtc_scale: number = 1.0;\r\n    m_is_left_mouse_press: boolean = false;\r\n    m_is_right_mouse_press: boolean = false;\r\n    m_mouse_event: MouseEvent;\r\n    m_last_touch_time: number = performance.now();\r\n    m_last_touch_coords: [number, number] = [0, 0];\r\n\r\n    m_total_level_entities: number = 0;\r\n\r\n    m_is_game_active: boolean = true;\r\n    m_is_pause: boolean = false;  // turn on only when pause the game manually\r\n\r\n    m_is_touch: boolean = false;\r\n\r\n    // in start method current client implementation should start render loop\r\n    // this loop should at first call update method, and only then process other stuff\r\n    abstract start(): void;\r\n    // called by the base when we change the game canvas size (after resizing the window)\r\n    abstract on_canvas_resize(in_width: number, in_height: number): void;\r\n    // input is coordinates on the screen, output is world coordinates of the point\r\n    // conversation depends on the client implementation\r\n    abstract point_to_world(in_x: number, in_y: number) : number[];\r\n    // abstract mouse_click(inc_x: number, inc_y: number, inw_x: number, inw_y: number): void;\r\n    // when we should delete the tile from the scene, call this method to delete the shape from the client\r\n    abstract scene_tile_delete(index: number): void;\r\n    // the same for create new tile\r\n    // pos_x and pos_y world coordinates of the tile\r\n    abstract scene_tile_create(pos_x: number, pos_y: number, index: number, type: number): void;\r\n    // define player methods called after the module update player properties\r\n    // it should be used in the client to update player shape\r\n    abstract scene_create_player(radius: number): void;\r\n    abstract scene_update_entity_position(id: number, pos_x: number, pos_y: number): void;\r\n    abstract scene_update_entity_angle(id: number, angle: number): void;\r\n    abstract scene_update_entity_move_status(id: number, move_status: MOVE_STATUS): void;\r\n    abstract scene_update_entity_life(id: number, life: number, max_life: number): void;\r\n    abstract scene_update_entity_shield(id: number, shield: number, max_shield: number): void;\r\n    abstract scene_update_entity_params(entity: number, is_dead: boolean, life: number, max_life: number, select_radius: number, attack_distance: number, attack_time: number): void;\r\n    abstract scene_create_monster(entity: number, pos_x: number, pos_y: number, radius: number, search_radius: number, search_spread: number, team: number): void;\r\n    abstract scene_create_bullet(entity: number, pos_x: number, pos_y: number, target_x: number, target_y: number, angle: number, bullet_type: number): void;\r\n    abstract scene_remove_monster(entity: number): void;\r\n    abstract scene_remove_bullet(entity: number, reason: REMOVE_REASON): void;\r\n    abstract scene_entity_start_shift(entity: number): void;\r\n    abstract scene_entity_finish_shift(entity: number): void;\r\n    abstract scene_entity_activate_shield(entity: number): void;\r\n    abstract scene_entity_release_shield(entity: number): void;\r\n    abstract scene_entity_start_melee_attack(entity: number, time: number, damage_distance: number, damage_spread: number): void;\r\n    abstract scene_entity_finish_melee_attack(entity: number): void;\r\n    abstract scene_entity_start_range_attack(entity: number, time: number): void;\r\n    abstract scene_entity_finish_range_attack(entity: number): void;\r\n    abstract scene_entity_start_hand_attack(entity: number, time: number, damage_distance: number): void;\r\n    abstract scene_entity_finish_hand_attack(entity: number): void;\r\n    abstract scene_entity_start_shadow_attack(entity: number, time: number, damage_distance: number): void;\r\n    abstract scene_entity_finish_shadow_attack(entity: number): void;\r\n    abstract scene_entity_finish_skill(entity: number, skill: SKILL): void;\r\n    abstract scene_entity_start_cooldawn(entity: number, cooldawn_id: COOLDAWN, time: number): void;\r\n    abstract scene_click_entity(entity: number, action_id: TARGET_ACTION): void;\r\n    abstract scene_click_position(pos_x: number, pos_y: number): void;\r\n    abstract scene_entity_damaged(attacker_entity: number, target_entity: number, damage: number, damage_type: DAMAGE_TYPE): void;\r\n    abstract scene_entity_dead(entity: number): void;\r\n    abstract scene_entity_start_stun(entity: number, duration: number): void;\r\n    abstract scene_entity_finish_stun(entity: number): void;\r\n    abstract scene_entity_start_hide_activation(entity: number, activation_time: number): void;\r\n    abstract scene_entity_finish_hide_activation(entity: number, interrupt: boolean): void;\r\n    abstract scene_entity_start_skill_round_attack(entity: number, cast_time: number, area_size: number): void;\r\n    abstract scene_entity_start_skill_stun_cone(entity: number, cast_time: number, cone_spread: number, cone_size: number): void;\r\n    abstract scene_entity_switch_hide(entity: number, is_hide: boolean): void;\r\n    abstract scene_player_activate_hide(): void;\r\n    abstract scene_player_deactivate_hide(): void;\r\n    abstract scene_entity_resurrect(entity: number, life: number, max_life: number): void;\r\n    abstract scene_command_skill_result(is_start: boolean, is_entity_target: boolean, entity: number, position_x: number, position_y: number, skill: number): void;\r\n    // debug callbacks\r\n    // if debug is off, then these callbacks are not required\r\n    // it never called from the module\r\n    abstract debug_entity_trajectory(entity: number, coordinates: Float32Array): void;\r\n    abstract debug_close_entity_pair(entity_a: number, a_pos_x: number, a_pos_y: number, entity_b: number, b_pos_x: number, b_pos_y: number): void;\r\n    abstract debug_player_visible_quad(start_x: number, start_y: number, end_x: number, end_y: number): void;\r\n    abstract debug_player_neighbourhood_quad(start_x: number, start_y: number, end_x: number, end_y: number): void;\r\n    abstract debug_player_search_quad(start_x: number, start_y: number, end_x: number, end_y: number): void;\r\n    abstract debug_player_mid_quad(start_x: number, start_y: number, end_x: number, end_y: number): void;\r\n    abstract debug_enemies_search(id: number, search_radius: number, enemy_ids: Int32Array): void;\r\n    abstract debug_define_draw_flag(output_debug: boolean): void;\r\n    abstract debug_toggle_draw_flag(): void;\r\n\r\n    constructor() {\r\n        // define host functions for external calls from the wasm module\r\n        globalThis.host = {\r\n            define_level: this.define_level.bind(this),\r\n            define_navmesh: this.define_navmesh.bind(this),\r\n            define_total_tiles: this.define_total_tiles.bind(this),\r\n            tile_delete: this.tile_delete.bind(this),\r\n            tile_create: this.tile_create.bind(this),\r\n            create_player: this.create_player.bind(this),\r\n            update_entity_params: this.update_entity_params.bind(this),\r\n            create_monster: this.create_monster.bind(this),\r\n            create_bullet: this.create_bullet.bind(this),\r\n            define_person_changes: this.define_person_changes.bind(this),\r\n            define_bullet_changes: this.define_bullet_changes.bind(this),\r\n            remove_entity: this.remove_entity.bind(this),\r\n            define_total_update_entities: this.define_total_update_entities.bind(this),\r\n            entity_start_shift: this.entity_start_shift.bind(this),\r\n            entity_finish_shift: this.entity_finish_shift.bind(this),\r\n            entity_activate_shield: this.entity_activate_shield.bind(this),\r\n            entity_release_shield: this.entity_release_shield.bind(this),\r\n            entity_start_melee_attack: this.entity_start_melee_attack.bind(this),\r\n            entity_finish_melee_attack: this.entity_finish_melee_attack.bind(this),\r\n            entity_start_range_attack: this.entity_start_range_attack.bind(this),\r\n            entity_finish_range_attack: this.entity_finish_range_attack.bind(this),\r\n            entity_start_hand_attack: this.entity_start_hand_attack.bind(this),\r\n            entity_finish_hand_attack: this.entity_finish_hand_attack.bind(this),\r\n            entity_start_shadow_attack: this.entity_start_shadow_attack.bind(this),\r\n            entity_finish_shadow_attack: this.entity_finish_shadow_attack.bind(this),\r\n            entity_finish_skill: this.entity_finish_skill.bind(this),\r\n            entity_start_cooldawn: this.entity_start_cooldawn.bind(this),\r\n            entity_start_stun: this.entity_start_stun.bind(this),\r\n            entity_finish_stun: this.entity_finish_stun.bind(this),\r\n            click_entity: this.click_entity.bind(this),\r\n            click_position: this.click_position.bind(this),\r\n            entity_dead: this.entity_dead.bind(this),\r\n            entity_damaged: this.entity_damaged.bind(this),\r\n            entity_switch_hide: this.entity_switch_hide.bind(this),\r\n            entity_start_hide: this.entity_start_hide.bind(this),\r\n            entity_finish_hide: this.entity_finish_hide.bind(this),\r\n            entity_start_skill_round_attack: this.entity_start_skill_round_attack.bind(this),\r\n            entity_start_skill_stun_cone: this.entity_start_skill_stun_cone.bind(this),\r\n            entity_resurrect: this.entity_resurrect.bind(this),\r\n            command_skill_result: this.command_skill_result.bind(this),\r\n            debug_entity_walk_path: this.debug_entity_walk_path.bind(this),\r\n            debug_close_entity: this.debug_close_entity.bind(this),\r\n            debug_visible_quad: this.debug_visible_quad.bind(this),\r\n            debug_neighbourhood_quad: this.debug_neighbourhood_quad.bind(this),\r\n            debug_search_quad: this.debug_search_quad.bind(this),\r\n            debug_mid_quad: this.debug_mid_quad.bind(this),\r\n            debug_enemies_list: this.debug_enemies_list.bind(this)\r\n        };\r\n\r\n        // setup ui\r\n        this.m_ui = new GameUI();\r\n        this.m_ui.assign_fps_element(\"fps\");\r\n        this.m_ui.assign_count_elements(\"level_count\", \"visible_count\");\r\n        this.m_ui.assign_pause_screen(\"pause\");\r\n        this.m_ui.assign_control_keyboard(\"control_keyboard\");\r\n        this.m_ui.assign_control_touch(\"control_touch\");\r\n        this.m_ui.assign_loading(\"loading\");\r\n        this.m_ui.assign_position(\"position\");\r\n\r\n        // get canvas elements from html\r\n        // for scene\r\n        this.m_scene_canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n        this.m_scene_ctx = this.m_scene_canvas.getContext(\"2d\")!;\r\n\r\n        // and for map\r\n        this.m_map_canvas = document.getElementById(\"map_canvas\") as HTMLCanvasElement;\r\n        this.m_map_ctx = this.m_map_canvas.getContext(\"2d\")!;\r\n\r\n        // resize canvases\r\n        this.setup_canvas_size();\r\n\r\n        // disable map canvas mouse interaction\r\n        this.m_map_canvas.style.pointerEvents = \"none\";\r\n\r\n        // store the current time\r\n        this.m_current_time = performance.now();\r\n\r\n        // disable right click menu\r\n        window.addEventListener(\"contextmenu\", event => event.preventDefault());\r\n\r\n        // setup event\r\n        const local_this = this;\r\n        // keyboard\r\n        document.onkeydown = function(event) {\r\n            local_this.key_event(event.key);\r\n\r\n            // stop scrolling the page by the space\r\n            // and also other space actions\r\n            return !(event.key == \" \");\r\n        }\r\n\r\n        local_this.m_is_touch = \"ontouchstart\" in window || (navigator.maxTouchPoints > 0);\r\n        if (local_this.m_is_touch) {\r\n            this.m_scene_canvas.addEventListener(\"touchstart\", (event) => {\r\n                event.preventDefault();\r\n                local_this.touch_start_event(event);\r\n            });\r\n\r\n            this.m_scene_canvas.addEventListener(\"touchend\", (event) => {\r\n                event.preventDefault();\r\n                local_this.touch_end_event(event);\r\n            });\r\n        } else {\r\n            // mouse click, release and move\r\n            this.m_scene_canvas.addEventListener(\"mousedown\", function(event) {\r\n                local_this.mouse_press_event(event);\r\n            });\r\n            this.m_scene_canvas.addEventListener(\"mouseup\", function(event) {\r\n                local_this.mouse_release_event(event);\r\n            });\r\n            document.onmousemove = function(event) {\r\n                local_this.m_mouse_event = event;\r\n            }\r\n        }\r\n\r\n        document.addEventListener(\"visibilitychange\" , function() {\r\n            local_this.visibilitychange_event();\r\n        });\r\n\r\n        window.addEventListener(\"resize\", function() {\r\n            local_this.setup_canvas_size();\r\n        });\r\n\r\n        // finally, load the wasm module\r\n        fetch(\"/build/game_api.wasm\")\r\n            .then((response) => WebAssembly.compileStreaming(response))\r\n            .then((result) => instantiate(result, { env: {}})\r\n            .then((module) => {\r\n                local_this.m_module = module;\r\n                console.log(\"finish to load the module:\", (performance.now() - local_this.m_current_time) / 1000.0, \"seconds\");\r\n                local_this.m_current_time = performance.now();\r\n\r\n                // create settings object\r\n                const settings_ptr = module.create_settings();\r\n                game_setup(this, module, settings_ptr, false);\r\n                \r\n                // create the game\r\n                // this method calls some callbacks:\r\n                // - define_level\r\n                // - define_total_tiles\r\n                // - define_navmesh\r\n                local_this.m_game_ptr = module.create_game(settings_ptr);\r\n\r\n                console.log(\"generate the level:\", (performance.now() - local_this.m_current_time) / 1000.0, \"seconds\");\r\n                local_this.m_current_time = performance.now();\r\n\r\n                setup_player_inventar(module, local_this);\r\n\r\n                // call client start method\r\n                local_this.start();\r\n                local_this.m_is_start = true;\r\n\r\n                // after start disable loading screen\r\n                local_this.m_ui.off_pause();\r\n                local_this.m_ui.loading_hide();\r\n        }));\r\n    }\r\n\r\n    setup_canvas_size() {\r\n        const window_width = window.innerWidth;\r\n        const window_height = window.innerHeight;\r\n\r\n        let game_width = DEFAULT_WIDTH;\r\n        let game_height = DEFAULT_HEIGHT;\r\n        if (window_width < DEFAULT_WIDTH || window_height < DEFAULT_HEIGHT) {\r\n            game_width = window_width;\r\n            game_height = window_height;\r\n        }\r\n\r\n        const width_elements = document.getElementsByClassName(RESIZABLE_WIDTH_CLASS_NAME);\r\n        for (let i = 0; i < width_elements.length; i++) {\r\n            const element = width_elements[i] as HTMLElement;\r\n            element.style.width = game_width + \"px\";\r\n        }\r\n        const height_elements = document.getElementsByClassName(RESIZABLE_HEIGHT_CLASS_NAME);\r\n        for (let i = 0; i < height_elements.length; i++) {\r\n            const element = height_elements[i] as HTMLElement;\r\n            element.style.height = game_height + \"px\";\r\n        }\r\n\r\n        // resize both canvases\r\n        if (this.m_scene_canvas) {\r\n            this.m_scene_canvas.width  = game_width;\r\n            this.m_scene_canvas.height = game_height;\r\n        }\r\n        if (this.m_map_canvas) {\r\n            this.m_map_canvas.width  = game_width;\r\n            this.m_map_canvas.height = game_height;\r\n        }\r\n\r\n        // get main window div\r\n        const window_div = document.getElementById(\"window\");\r\n        if (window_div) {\r\n            window_div.style.left = (window_width - game_width) / 2.0 + \"px\";\r\n            window_div.style.top = (window_height - game_height) / 2.0 + \"px\";\r\n        }\r\n\r\n        // update the host\r\n        this.on_canvas_resize(game_width, game_height);\r\n    }\r\n\r\n    visibilitychange_event() {\r\n        if (document.hidden) {\r\n            this.deactivate();\r\n        } else {\r\n            if(!this.m_is_pause) {\r\n                this.activate();\r\n            }\r\n        }\r\n    }\r\n\r\n    activate() {\r\n        this.m_is_game_active = true;\r\n        this.m_current_time = performance.now();\r\n\r\n        this.m_ui.off_pause();\r\n    }\r\n\r\n    deactivate() {\r\n        this.m_is_game_active = false;\r\n\r\n        this.m_ui.on_pause(this.m_is_touch);\r\n    }\r\n\r\n    toggle_activate() {\r\n        if(this.m_is_game_active) {\r\n            this.deactivate();\r\n            this.m_is_pause = true;\r\n        } else {\r\n            this.activate();\r\n            this.m_is_pause = false;\r\n        }\r\n    }\r\n\r\n    click_event(canvas_x: number, canvas_y: number, world_x: number, world_y: number, is_force: boolean) {\r\n        const is_send = this.m_scene.input_click(canvas_x, canvas_y, world_x, world_y, is_force);\r\n        if (is_send) {\r\n            if (this.m_is_wait_click && this.m_activated_skill != SKILL.NONE) {\r\n                const click_result = this.m_module.game_skill_target(this.m_game_ptr, world_x, world_y, this.m_activated_skill);\r\n\r\n                this.m_is_wait_click = false;\r\n                this.m_activated_skill = SKILL.NONE;\r\n            } else {\r\n                this.m_module.game_client_point(this.m_game_ptr, world_x, world_y);\r\n            }\r\n        }\r\n    }\r\n\r\n    activate_target_skill(skill: SKILL) {\r\n        this.m_is_wait_click = true;\r\n        this.m_activated_skill = SKILL.STUN_CONE;\r\n\r\n        // check may be the enemy already selected\r\n        // then command to use the skill\r\n        const cursor = this.m_scene.get_click_cursor();\r\n        const select_person = cursor.get_entity_select();\r\n        if (select_person) {\r\n            const position = select_person.get_translation();\r\n            this.m_module.game_skill_target(this.m_game_ptr, position[0], position[1], skill);\r\n\r\n            this.m_is_wait_click = false;\r\n            this.m_activated_skill = SKILL.NONE;\r\n        }\r\n    }\r\n\r\n    touch_start_event(event: TouchEvent) {\r\n        if (this.m_is_start && this.m_is_game_active) {\r\n            if (event.touches.length == 2) {\r\n                this.m_module.game_client_shield(this.m_game_ptr);\r\n            } else if (event.touches.length == 1) {\r\n                const c = touch_coordinates(this.m_scene_canvas, event);\r\n                if (c.length > 0) {\r\n                    const touch_time = performance.now();\r\n                    const c_world = this.point_to_world(c[0], c[1]);\r\n                    if (touch_time - this.m_last_touch_time < DOUBLE_TOUCH_DELTA && \r\n                        Math.abs(c_world[0] - this.m_last_touch_coords[0]) < DOUBLE_TOUCH_CURSOR_DELTA &&\r\n                        Math.abs(c_world[1] - this.m_last_touch_coords[1]) < DOUBLE_TOUCH_CURSOR_DELTA) {\r\n                        // this is double touch\r\n                        // make the shift\r\n                        this.m_module.game_client_shift(this.m_game_ptr, c_world[0], c_world[1]);\r\n                    } else {\r\n                        // this is single touch\r\n                        this.click_event(c[0], c[1], c_world[0], c_world[1], true);\r\n                    }\r\n\r\n                    this.m_last_touch_time = touch_time;\r\n                    this.m_last_touch_coords[0] = c_world[0];\r\n                    this.m_last_touch_coords[1] = c_world[1];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // TODO: touch end event fires even when the user still hold fingers on the screen\r\n    // in particular, it's impossible to hold the shield several time\r\n    // try to use another ux approach\r\n    touch_end_event(event: TouchEvent) {\r\n        // always release the shield\r\n        // on the game side it will skip the action if the shield is not active\r\n        this.m_module.game_client_release_shield(this.m_game_ptr);\r\n    }\r\n\r\n    mouse_press_event(event: MouseEvent) {\r\n        this.m_mouse_event = event;\r\n        const is_left_click = event.button == 0;\r\n        const is_right_click = event.button == 2;\r\n        if (this.m_is_start && this.m_is_game_active) {\r\n            if (is_left_click) {\r\n                this.m_is_left_mouse_press = true;\r\n    \r\n                const c = cursor_coordinates(this.m_scene_canvas, event);\r\n                const c_world = this.point_to_world(c[0], c[1]);\r\n                this.click_event(c[0], c[1], c_world[0], c_world[1], true);\r\n            }\r\n            if (is_right_click) {\r\n                this.m_is_right_mouse_press = true;\r\n                this.m_module.game_client_shield(this.m_game_ptr);\r\n            }\r\n        }\r\n    }\r\n\r\n    mouse_release_event(event: MouseEvent) {\r\n        const is_left_release = event.button == 0;\r\n        const is_right_release = event.button == 2;\r\n        if(this.m_is_start) {\r\n            if (is_left_release) {\r\n                this.m_is_left_mouse_press = false;\r\n                this.m_scene.reset_click();\r\n            }\r\n            if(is_right_release) {\r\n                this.m_is_right_mouse_press = false;\r\n                this.m_module.game_client_release_shield(this.m_game_ptr);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    key_event(key: string) {\r\n        // reset skill wait machine\r\n        this.m_is_wait_click = false;\r\n        this.m_activated_skill = SKILL.NONE;\r\n\r\n        if(this.m_is_start) {\r\n            if(key == \"Escape\") {\r\n                // pause the game\r\n                this.toggle_activate();\r\n            } else if(this.m_is_game_active) {\r\n                // read all other keys only when the game is active\r\n                if(key == \"s\") {\r\n                    // add monster over cursor\r\n                    const c = cursor_coordinates(this.m_scene_canvas, this.m_mouse_event);\r\n                    const c_world = this.point_to_world(c[0], c[1]);\r\n                    // create virtual weapon\r\n                    const weapon_ptr = this.m_module.dev_create_virtual_sword(this.m_game_ptr,\r\n                        0.75,  // attack distance\r\n                        0.5,  // attack time\r\n                        1.5,  // attack cooldawn\r\n                        6.0,  // shield\r\n                        4,  // damage\r\n                        1.5,  // damage distance\r\n                        Math.PI / 2.0);  // damage spread\r\n                    \r\n                    this.m_module.dev_game_spawn_monster(this.m_game_ptr,\r\n                                                         0.5,  // radius\r\n                                                         c_world[0], c_world[1],  // position\r\n                                                         3.0,  // move speed\r\n                                                         12,  // life\r\n                                                         weapon_ptr,  // pointer to the weapon\r\n                                                         5.0,  // search radius\r\n                                                         Math.PI / 2.0,  // search spread\r\n                                                         -1,  // team\r\n                                                         false);  // friend for player\r\n                } else if (key == \"S\") {\r\n                    // add friend to player monster over cursor\r\n                    const c = cursor_coordinates(this.m_scene_canvas, this.m_mouse_event);\r\n                    const c_world = this.point_to_world(c[0], c[1]);\r\n\r\n                    const weapon_ptr = this.m_module.dev_create_virtual_bow(this.m_game_ptr,\r\n                        5.5,  // attack distance\r\n                        0.5,  // attack time\r\n                        0.75,  // attack cooldawn\r\n                        12.0,  // shield\r\n                        5,  // damage\r\n                        12.0);  // bullet speed\r\n                    \r\n                    this.m_module.dev_game_spawn_monster(this.m_game_ptr,\r\n                                                         0.4,  // radius\r\n                                                         c_world[0], c_world[1],  // position\r\n                                                         4.0,  // move speed\r\n                                                         8,  // life\r\n                                                         weapon_ptr,  // pointer to the weapon\r\n                                                         5.0,  // search radius\r\n                                                         Math.PI / 2.0,  // search spread\r\n                                                         -2,  // team\r\n                                                         true);  // friend for player\r\n                } else if (key == \"q\") {\r\n                    this.m_module.game_skill_nontarget(this.m_game_ptr, SKILL.ROUND_ATTACK);\r\n                } else if (key == \"w\") {\r\n                    // this will be target skill\r\n                    // we should activate the wait mechanism and release it after any click\r\n                    this.activate_target_skill(SKILL.STUN_CONE);\r\n                } else if (key == \"r\") {\r\n                    this.m_module.dev_game_resurrect_player(this.m_game_ptr);\r\n                } else if(key == \"a\") {\r\n                    this.m_module.game_make_aggressive(this.m_game_ptr);\r\n                } else if(key == \"d\") {\r\n                    this.m_module.game_damage_all_entities(this.m_game_ptr, 1.5);\r\n                } else if (key == \"t\") {\r\n                    this.m_module.game_stun_all_entities(this.m_game_ptr, 1.0);\r\n                } else if (key == \"1\") {\r\n                    this.m_module.dev_player_equip_free_hands(this.m_game_ptr);\r\n                } else if (key == \"2\") {\r\n                    this.m_module.dev_player_equip_sword(this.m_game_ptr);\r\n                } else if (key == \"3\") {\r\n                    this.m_module.dev_player_equip_bow(this.m_game_ptr);\r\n                } else if(key == \"m\") {\r\n                    this.m_map.toggle_active();\r\n                } else if(key == \"h\") {\r\n                    // allow to toggle only if mouse is not pressed\r\n                    if (!this.m_is_left_mouse_press && !this.m_is_right_mouse_press) {\r\n                        this.m_module.game_client_toggle_hide(this.m_game_ptr);\r\n                    }\r\n                } else if(key == \"i\") {\r\n                    // toggle debug draws\r\n                    this.debug_toggle_draw_flag();\r\n                } else if(key == \"+\") {\r\n                    this.m_map.scale_up();\r\n                } else if(key == \"-\") {\r\n                    this.m_map.scale_down();\r\n                } else if (key == \" \") {\r\n                    const c = cursor_coordinates(this.m_scene_canvas, this.m_mouse_event);\r\n                    const c_world = this.point_to_world(c[0], c[1]);\r\n                    this.m_module.game_client_shift(this.m_game_ptr, c_world[0], c_world[1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    update() {\r\n        if (this.m_is_game_active) {\r\n            // update game only when tab is active\r\n            // in non-active tab the delta time is nearly 2 seconds\r\n            // it's too big value for correct behaviour\r\n            if(this.m_is_left_mouse_press && this.m_mouse_event && this.m_scene_canvas) {\r\n                const c = cursor_coordinates(this.m_scene_canvas, this.m_mouse_event);\r\n                const c_world = this.point_to_world(c[0], c[1]);\r\n                this.click_event(c[0], c[1], c_world[0], c_world[1], false);\r\n            }\r\n\r\n            // read the current time\r\n            const time = performance.now();\r\n            // calculate delta time\r\n            const dt = (time - this.m_current_time) / 1000.0;\r\n            // write the current time\r\n            this.m_current_time = time;\r\n            this.m_total_level_entities = 0;\r\n    \r\n            // update the game\r\n            if(this.m_module) {\r\n                // this method calls many callbacks in the current host\r\n                // it transfer data about changed entities\r\n                this.m_module.game_update(this.m_game_ptr, dt);\r\n            }\r\n\r\n            this.m_scene.update(dt);\r\n\r\n            this.m_ui.update(dt);\r\n            this.m_ui.update_count_values(this.m_total_level_entities, this.m_scene.get_monsters().size);\r\n            this.m_ui.update_position(this.m_scene.get_player().get_translation());\r\n        }\r\n\r\n        // draw the map, if we need\r\n        this.draw_map();\r\n    }\r\n\r\n    draw_map() {\r\n        if(this.m_map) {\r\n            this.m_map.draw();\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------------\r\n    // ----------------callbacks from the wasm side--------------------------\r\n\r\n    define_level(level_width: number, level_height: number, tile_size: number) {\r\n        this.m_level_width = level_width;\r\n        this.m_level_height = level_height;\r\n        this.m_level_tile_size = tile_size;\r\n\r\n        // create the scene\r\n        this.m_scene = new Scene(this.m_level_width,\r\n            this.m_level_height,\r\n            this.m_level_tile_size);\r\n        \r\n        this.m_wtc_scale = TILE_PIXELS_SIZE / this.m_level_tile_size;\r\n        this.m_wtc_tfm.set_uniform_scale(this.m_wtc_scale);\r\n    }\r\n\r\n    define_navmesh(vertices: Float32Array, polygons: Int32Array, sizes: Int32Array) {\r\n        // create the scene minimap\r\n        // this world-to-canvas transform is universal\r\n        // it can be used for different canvases and different purposes\r\n        // when the game change the player position, we should update this transform\r\n        this.m_map = new SceneMap(this.m_map_ctx,\r\n            this.m_wtc_tfm,\r\n            this.m_level_tile_size, \r\n            vertices, \r\n            polygons, \r\n            sizes);\r\n    }\r\n\r\n    define_total_tiles(total_tiles: number) {\r\n        // for info only\r\n        // nothing to do here\r\n    }\r\n\r\n    tile_delete(index: number) {\r\n        this.m_scene.delete_tile(index);\r\n        this.scene_tile_delete(index);\r\n    }\r\n\r\n    tile_create(x: number, y: number, index: number, type: number) {\r\n        const pos_x = x * this.m_level_tile_size;\r\n        const pos_y = y * this.m_level_tile_size;\r\n\r\n        this.m_scene.create_tile(pos_x, pos_y, index, type);\r\n        this.scene_tile_create(pos_x, pos_y, index, type);\r\n    }\r\n\r\n    create_player(id: number, pos_x: number, pos_y: number, radius: number, team: number) {\r\n        this.m_scene.set_player_id(id);\r\n        this.m_scene.set_player_radius(radius);\r\n        this.m_scene.set_entity_position(id, pos_x, pos_y);\r\n        this.scene_create_player(radius);\r\n    }\r\n\r\n    update_entity_params(id: number, is_dead: boolean, life: number, max_life: number, shield: number, max_shield: number, select_radius: number, attack_distance: number, attack_time: number) {\r\n        this.m_scene.set_entity_dead(id, is_dead);\r\n        this.m_scene.set_entity_attack_distance(id, attack_distance);\r\n        this.m_scene.set_entity_life(id, life, max_life);\r\n        this.m_scene.set_entity_shield(id, shield, max_shield);\r\n        this.m_scene.set_entity_attack_time(id, attack_time);\r\n        this.m_scene.set_entity_select_radius(id, select_radius);\r\n        this.scene_update_entity_params(id, is_dead, life, max_life, select_radius, attack_distance, attack_time);\r\n    }\r\n\r\n    create_monster(entity: number, pos_x: number, pos_y: number, angle: number, radius: number, search_radius: number, search_spread: number, team: number) {\r\n        // create with default parameters\r\n        this.m_scene.create_monster(entity);\r\n\r\n        // next define specific parameters\r\n        this.m_scene.set_entity_angle(entity, angle);\r\n        this.m_scene.set_monster_radius(entity, radius);\r\n        this.m_scene.set_entity_position(entity, pos_x, pos_y);\r\n        this.m_scene.set_entity_team(entity, team);\r\n        this.m_scene.set_monster_search_radius(entity, search_radius);\r\n        this.m_scene.set_monster_search_spread(entity, search_spread);\r\n        this.m_scene.post_monster_create(entity);\r\n\r\n        this.scene_create_monster(entity, pos_x, pos_y, radius, search_radius, search_spread, team);\r\n    }\r\n\r\n    create_bullet(entity: number, pos_x: number, pos_y: number, target_x: number, target_y: number, angle: number, bullet_type: number) {\r\n        this.m_scene.create_bullet(entity, bullet_type);\r\n\r\n        this.m_scene.set_entity_position(entity, pos_x, pos_y);\r\n        this.m_scene.set_entity_angle(entity, angle);\r\n        this.m_scene.set_bullet_target_position(entity, target_x, target_y);\r\n\r\n        this.scene_create_bullet(entity, pos_x, pos_y, target_x, target_y, angle, bullet_type);\r\n    }\r\n\r\n    define_person_changes(entity: number, \r\n                          pos_x: number, pos_y: number,\r\n                          angle: number, \r\n                          move_status: number,\r\n                          life: number, max_life: number,\r\n                          shield: number, max_shield: number,\r\n                          is_dead: boolean) {\r\n        this.m_scene.set_entity_position(entity, pos_x, pos_y);\r\n        this.m_scene.set_entity_angle(entity, angle);\r\n        this.m_scene.set_entity_move(entity, move_status);\r\n        this.m_scene.set_entity_life(entity, life, max_life);\r\n        this.m_scene.set_entity_shield(entity, shield, max_shield);\r\n        this.m_scene.set_entity_dead(entity, is_dead);\r\n\r\n        this.scene_update_entity_position(entity, pos_x, pos_y);\r\n        this.scene_update_entity_angle(entity, angle);\r\n        this.scene_update_entity_move_status(entity, move_status);\r\n        this.scene_update_entity_life(entity, life, max_life);\r\n        this.scene_update_entity_shield(entity, shield, max_shield);\r\n    }\r\n\r\n    define_bullet_changes(entity: number, pos_x: number, pos_y: number, angle: number) {\r\n        this.m_scene.set_entity_position(entity, pos_x, pos_y);\r\n        this.m_scene.set_entity_angle(entity, angle);\r\n\r\n        this.scene_update_entity_position(entity, pos_x, pos_y);\r\n        this.scene_update_entity_angle(entity, angle);\r\n    }\r\n\r\n    remove_entity(entity: number, actor_type: number, remove_reason: number) {\r\n        if (actor_type == ACTOR.MONSTER) {\r\n            this.m_scene.remove_monster(entity);\r\n            this.scene_remove_monster(entity);\r\n        } else if (actor_type == ACTOR.BULLET) {\r\n            this.m_scene.remove_bullet(entity);\r\n            this.scene_remove_bullet(entity, remove_reason);\r\n        }\r\n    }\r\n\r\n    define_total_update_entities(count: number) {\r\n        this.m_total_level_entities = count;\r\n    }\r\n\r\n    entity_start_shift(entity: number) {\r\n        this.m_scene.entity_start_shift(entity);\r\n        this.scene_entity_start_shift(entity);\r\n    }\r\n\r\n    entity_finish_shift(entity: number) {\r\n        this.scene_entity_finish_shift(entity);\r\n    }\r\n\r\n    entity_activate_shield(entity: number) {\r\n        this.m_scene.set_entity_activate_shield(entity, true);\r\n        this.scene_entity_activate_shield(entity);\r\n    }\r\n\r\n    entity_release_shield(entity: number) {\r\n        this.m_scene.set_entity_activate_shield(entity, false);\r\n        this.scene_entity_release_shield(entity);\r\n    }\r\n\r\n    entity_start_melee_attack(entity: number, time: number, damage_distance: number, damage_spread: number) {\r\n        this.m_scene.entity_start_melee_attack(entity, time, damage_distance, damage_spread);\r\n        this.scene_entity_start_melee_attack(entity, time, damage_distance, damage_spread);\r\n    }\r\n\r\n    entity_finish_melee_attack(entity: number, interrupt: boolean) {\r\n        this.m_scene.entity_finish_melee_attack(entity);\r\n        this.scene_entity_finish_melee_attack(entity);\r\n    }\r\n\r\n    entity_start_range_attack(entity: number, time: number) {\r\n        this.m_scene.entity_start_range_attack(entity, time);\r\n        this.scene_entity_start_range_attack(entity, time);\r\n    }\r\n\r\n    entity_finish_range_attack(entity: number, interrupt: boolean) {\r\n        this.m_scene.entity_finish_range_attack(entity);\r\n        this.scene_entity_finish_range_attack(entity);\r\n    }\r\n\r\n    entity_start_hand_attack(entity: number, time: number, damage_distance: number) {\r\n        this.m_scene.entity_start_hand_attack(entity, time, damage_distance);\r\n        this.scene_entity_start_hand_attack(entity, time, damage_distance);\r\n    }\r\n\r\n    entity_finish_hand_attack(entity: number, interrupt: boolean) {\r\n        this.m_scene.entity_finish_hand_attack(entity);\r\n        this.scene_entity_finish_hand_attack(entity);\r\n    }\r\n\r\n    entity_start_shadow_attack(entity: number, time: number, damage_distance: number) {\r\n        this.m_scene.entity_start_shadow_attack(entity, time, damage_distance);\r\n        this.scene_entity_start_shadow_attack(entity, time, damage_distance);\r\n    }\r\n\r\n    entity_finish_shadow_attack(entity: number, interrupt: boolean) {\r\n        this.m_scene.entity_finish_shadow_attack(entity);\r\n        this.scene_entity_finish_shadow_attack(entity);\r\n    }\r\n\r\n    entity_finish_skill(entity: number, skill: number, interrupt: boolean) {\r\n        this.m_scene.entity_finish_skill(entity, skill);\r\n        this.scene_entity_finish_skill(entity, skill);\r\n    }\r\n\r\n    entity_start_cooldawn(entity: number, cooldawn_id: number, cooldawn_time: number) {\r\n        this.m_scene.get_cooldawns().start_cooldawn(entity, cooldawn_id, cooldawn_time);\r\n        this.scene_entity_start_cooldawn(entity, cooldawn_id, cooldawn_time);\r\n    }\r\n\r\n    click_entity(entity: number, action_id: TARGET_ACTION) {\r\n        this.m_scene.input_click_entity(entity, action_id);\r\n        this.scene_click_entity(entity, action_id);\r\n    }\r\n\r\n    click_position(pos_x: number, pos_y: number) {\r\n        this.m_scene.input_click_position(pos_x, pos_y);\r\n        this.scene_click_position(pos_x, pos_y);\r\n    }\r\n\r\n    entity_dead(entity: number) {\r\n        this.m_scene.set_entity_dead(entity, true);\r\n        this.scene_entity_dead(entity);\r\n    }\r\n\r\n    entity_damaged(attacker_entity: number, target_entity: number, damage: number, damage_type: number) {\r\n        this.scene_entity_damaged(attacker_entity, target_entity, damage, damage_type);\r\n    }\r\n\r\n    entity_start_stun(entity: number, duration: number) {\r\n        this.m_scene.entity_start_stun(entity, duration);\r\n        this.scene_entity_start_stun(entity, duration);\r\n    }\r\n\r\n    entity_finish_stun(entity: number) {\r\n        this.m_scene.entity_finish_stun(entity);\r\n        this.scene_entity_finish_stun(entity);\r\n    }\r\n\r\n    entity_switch_hide(entity: number, hide_active: boolean) {\r\n        // TODO: use some method in UI to show the current hide mode\r\n        this.m_scene.set_entity_hide(entity, hide_active);\r\n        this.scene_entity_switch_hide(entity, hide_active);\r\n\r\n        if (this.m_scene.is_player(entity)) {\r\n            if (hide_active) {\r\n                // player activate the hide\r\n                // notify client that it should draw search cones for enemies\r\n                this.m_scene.activate_monster_search_cones();\r\n                this.scene_player_activate_hide();\r\n            } else {\r\n                // notify that draw cones is unnecessary\r\n                this.m_scene.deactivate_monster_search_cones();\r\n                this.scene_player_deactivate_hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    entity_start_hide(entity: number, activation_time: number) {\r\n        this.m_scene.entity_start_hide_cast(entity, activation_time);\r\n        this.scene_entity_start_hide_activation(entity, activation_time);\r\n    }\r\n\r\n    entity_finish_hide(entity: number, interrupt: boolean) {\r\n        this.m_scene.entity_finish_hide_cast(entity);\r\n        this.scene_entity_finish_hide_activation(entity, interrupt);\r\n    }\r\n\r\n    entity_start_skill_round_attack(entity: number, cast_time: number, area_size: number) {\r\n        this.m_scene.entity_start_skill_round_attack(entity, cast_time, area_size);\r\n        this.scene_entity_start_skill_round_attack(entity, cast_time, area_size);\r\n    }\r\n\r\n    entity_start_skill_stun_cone(entity: number, cast_time: number, cone_spread: number, cone_size: number) {\r\n        this.m_scene.entity_start_skill_stun_cone(entity, cast_time, cone_spread, cone_size);\r\n        this.scene_entity_start_skill_stun_cone(entity, cast_time, cone_spread, cone_size);\r\n    }\r\n\r\n    entity_resurrect(entity: number, life: number, max_life: number) {\r\n        this.m_scene.set_entity_alive(entity);\r\n        this.m_scene.set_entity_life(entity, life, max_life);\r\n        this.scene_entity_resurrect(entity, life, max_life);\r\n    }\r\n\r\n    // call when client click to use the skill and game answer what should be selected\r\n    command_skill_result(is_start: boolean, is_entity_target: boolean, entity: number, position_x: number, position_y: number, skill: number) {\r\n        // for simplicity select target entity\r\n        if (is_start && is_entity_target) {\r\n            this.m_scene.get_click_cursor().activate_by_enemy_select(entity);\r\n        }\r\n\r\n        this.scene_command_skill_result(is_start, is_entity_target, entity, position_x, position_y, skill);\r\n    }\r\n\r\n    debug_entity_walk_path(entity: number, points: ArrayLike<number>) {\r\n        const coordinates = new Float32Array(points.length);\r\n        for(let i = 0; i < coordinates.length; i++) {\r\n            coordinates[i] = points[i];\r\n        }\r\n        this.debug_entity_trajectory(entity, coordinates);\r\n    }\r\n\r\n    debug_close_entity(e1: number, pos_x1: number, pos_y1: number, e2: number, pos_x2: number, pos_y2: number) {\r\n        this.debug_close_entity_pair(e1, pos_x1, pos_y1, e2, pos_x2, pos_y2);\r\n    }\r\n\r\n    debug_visible_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        this.debug_player_visible_quad(start_x, start_y, end_x, end_y);\r\n    }\r\n\r\n    debug_neighbourhood_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        this.debug_player_neighbourhood_quad(start_x, start_y, end_x, end_y);\r\n    }\r\n\r\n    debug_search_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        this.debug_player_search_quad(start_x, start_y, end_x, end_y);\r\n    }\r\n\r\n    debug_mid_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        this.debug_player_mid_quad(start_x, start_y, end_x, end_y);\r\n    }\r\n\r\n    debug_enemies_list(entity: number, search_radius: number, enemy_ids: ArrayLike<number>) {\r\n        const array = new Int32Array(enemy_ids.length);\r\n        for (let i = 0; i < array.length; i++) {\r\n            array[i] = enemy_ids[i];\r\n        }\r\n\r\n        this.m_scene.set_monster_search_radius(entity, search_radius);\r\n\r\n        this.debug_enemies_search(entity, search_radius, array);\r\n    }\r\n}","import { CURSOR_TYPE, ClickCursor } from \"../scene/click_cursor\";\r\nimport { EFFECT, CLICK_CURSOR_RADIUS, CLICK_CURSOR_TIME, COOLDAWN, MOVE_STATUS, BULLET_TYPE } from \"../constants\";\r\nimport { SceneTile } from \"../scene/scene_tile\";\r\nimport { Transform } from \"../transform\";\r\nimport { CLICK_CURSOR_CENTER_SIZE, CLICK_CURSOR_COLOR, CLICK_CURSOR_STROKE_COLOR, CLICK_CURSOR_STROKE_WIDTH, COOLDAWN_SHIFT_COLOR, COOLDAWN_SHIFT_RADIUS, COOLDAWN_SHIFT_WIDTH, DEBUG_CLOSEST_PAIR_COLOR, DEBUG_CLOSEST_PAIR_WIDTH, DEBUG_NEIGHBOURHOOD_RECT_COLOR, DEBUG_RECT_LINE_WIDTH, DEBUG_TRAJECTORY_COLOR, DEBUG_TRAJECTORY_POINT_COLOR, DEBUG_TRAJECTORY_POINT_RADIUS, DEBUG_TRAJECTORY_WIDTH, DEBUG_VISIBILITY_RECT_COLOR, MONSTER_IDLE_COLOR, MONSTER_IS_STROKE, MONSTER_MOVE_COLOR, MONSTER_SECONDARY_STROKE_COLOR, MONSTER_SHIFT_COLOR, MONSTER_STROKE_COLOR, MONSTER_STROKE_WIDTH, PLAYER_IDLE_COLOR, PLAYER_IS_STROKE, PLAYER_MOVE_COLOR, PLAYER_SHIFT_COLOR, PLAYER_STROKE_COLOR, PLAYER_STROKE_WIDTH, TILE_IS_STROKE, TILE_NONWALKABLE_COLOR, TILE_STROKE_COLOR, TILE_STROKE_WIDTH, TILE_WALKABLE_COLOR, PLAYER_SECONDARY_STROKE_COLOR, COOLDAWN_MELEE_ATTACK_WIDTH, COOLDAWN_MELEE_ATTACK_COLOR, COOLDAWN_MELEE_ATTACK_RADIUS, EFFECT_MELEE_ATTACK_COLOR, SELECT_RADIUS_COLOR, SELECT_CURSOR_STROKE_WIDTH, SELECT_CURSOR_COLOR, SELECT_CURSOR_STROKE_COLOR, SHIELD_ACTIVE_COLOR, SHIELD_PASSIVE_COLOR, SHIELD_ACTIVE_WIDTH, SHIELD_PASSIVE_WIDTH, ENTITY_DEAD_BACK_COLOR, PLAYER_LIVE_BACK_COLOR, MONSTER_LIVE_BACK_COLOR, ENTITY_LIFE_CIRCLE_DELTA, EFFECT_STUN_COLOR, EFFECT_STUN_STROKE_COLOR, EFFECT_STUN_RADIUS_MULTIPLIER, DEBUG_SEARCH_RADIUS_COLOR, DEBUG_ENEMIES_TARGET_LINE_WIDTH, DEBUG_ENEMIES_TARGET_LINE_COLOR, PLAYER_HIDE_COLOR, MONSTER_HIDE_COLOR, SEARCH_CONE_COLOR, SEARCH_CONE_STROKE, SEARCH_CONE_STROKE_WIDTH, COOLDAWN_HIDE_WIDTH, COOLDAWN_HIDE_COLOR, COOLDAWN_HIDE_RADIUS, EFFECT_HIDE_ACTIVATION_STROKE, EFFECT_HIDE_ACTIVATION_COLOR, COOLDAWN_SHADOW_ATTACK_WIDTH, COOLDAWN_SHADOW_ATTACK_COLOR, COOLDAWN_SHADOW_ATTACK_RADIUS, EFFECT_SHADOW_ATTACK_COLOR, EFFECT_SHADOW_ATTACK_WIDTH, COOLDAWN_RANGE_ATTACK_WIDTH, COOLDAWN_RANGE_ATTACK_COLOR, COOLDAWN_RANGE_ATTACK_RADIUS, COOLDAWN_HAND_ATTACK_WIDTH, COOLDAWN_HAND_ATTACK_COLOR, COOLDAWN_HAND_ATTACK_RADIUS, EFFECT_HAND_ATTACK_COLOR, EFFECT_RANGE_ATTACK_COLOR, EFFECT_RANGE_ATTACK_WIDTH, EFFECT_RANGE_ATTACK_DELTA, BULLET_ARROW_COLOR, BULLET_ARROW_HEAD_SIZE, BULLET_ARROW_TAIL_SIZE, DEBUG_BULLET_TARGET_LINE_COLOR, DEBUG_BULLET_TARGET_POINT_COLOR, DEBUG_BULLET_TARGET_LINE_WIDTH, DEBUG_BULLET_TARGET_POINT_SIZE, COOLDAWN_SKILL_ROUND_ATTACK_WIDTH, COOLDAWN_SKILL_ROUND_ATTACK_COLOR, COOLDAWN_SKILL_ROUND_ATTACK_RADIUS, COOLDAWN_SKILL_STUN_CONE_WIDTH, COOLDAWN_SKILL_STUN_CONE_COLOR, COOLDAWN_SKILL_STUN_CONE_RADIUS, EFFECT_SKILL_ROUND_ATTACK_COLOR, EFFECT_SKILL_ROUND_ATTACK_STROKE, EFFECT_SKILL_STUN_CONE_STROKE, EFFECT_SKILL_STUN_CONE_COLOR, DEBUG_SEARCH_RECT_COLOR, DEBUG_MID_RECT_COLOR } from \"./visual_styles\";\r\nimport { Person } from \"../scene/person\";\r\nimport { Player } from \"../scene/player\";\r\nimport { Monster } from \"../scene/monster\";\r\nimport { EffectBase, HandAttackEffect, MeleeAttackEffect, RangeAttackEffect, ShadowAttackEffect, SkillRoundAttackEffect, SkillStunConeEffect } from \"../scene/effect\";\r\nimport { Bullet } from \"../scene/bullet\";\r\n\r\nexport function draw_background(draw_ctx: CanvasRenderingContext2D, width: number, height: number) {\r\n    draw_ctx.save();\r\n    draw_ctx.fillStyle = TILE_NONWALKABLE_COLOR;\r\n    draw_ctx.fillRect(0, 0, width, height);\r\n    draw_ctx.restore();\r\n}\r\n\r\nexport function draw_cursor(draw_ctx: CanvasRenderingContext2D, \r\n                            wtc_tfm: Transform, \r\n                            cursor: ClickCursor) {\r\n    if(cursor.get_active()) {\r\n        const cursor_type = cursor.get_type();\r\n        if (cursor_type == CURSOR_TYPE.POSITION) {\r\n            const prop: number = Math.pow(Math.min(cursor.get_proportion(), 1.0), 0.15);\r\n\r\n            // actual draw\r\n            draw_ctx.save();\r\n            draw_ctx.lineWidth = CLICK_CURSOR_STROKE_WIDTH;\r\n            draw_ctx.fillStyle = CLICK_CURSOR_COLOR;\r\n            draw_ctx.strokeStyle = CLICK_CURSOR_STROKE_COLOR;\r\n            draw_ctx.beginPath();\r\n            const c_center = wtc_tfm.multiply_array(cursor.get_translation());\r\n            const c_radius = wtc_tfm.apply_scale(CLICK_CURSOR_RADIUS) * prop;\r\n            draw_ctx.arc(c_center[0], c_center[1], c_radius, 0, 2 * Math.PI);\r\n            draw_ctx.fill();\r\n            draw_ctx.stroke();\r\n\r\n            // draw center dot\r\n            draw_ctx.beginPath();\r\n            draw_ctx.fillStyle = CLICK_CURSOR_STROKE_COLOR;\r\n            draw_ctx.arc(c_center[0], c_center[1], CLICK_CURSOR_CENTER_SIZE, 0, 2 * Math.PI);\r\n            draw_ctx.fill();\r\n            draw_ctx.restore();\r\n        } else if(cursor_type == CURSOR_TYPE.ENEMY_ENTITY) {\r\n            draw_ctx.save();\r\n            draw_ctx.lineWidth = SELECT_CURSOR_STROKE_WIDTH;\r\n            draw_ctx.fillStyle = SELECT_CURSOR_COLOR;\r\n            draw_ctx.strokeStyle = SELECT_CURSOR_STROKE_COLOR;\r\n            draw_ctx.beginPath();\r\n            const c_center = wtc_tfm.multiply_array(cursor.get_translation());\r\n            const c_radius = wtc_tfm.apply_scale(cursor.get_size());\r\n            draw_ctx.arc(c_center[0], c_center[1], c_radius, 0, 2 * Math.PI);\r\n            draw_ctx.fill();\r\n            draw_ctx.stroke();\r\n        }\r\n    }\r\n}\r\n\r\nexport function draw_level_tile(draw_ctx: CanvasRenderingContext2D, \r\n                                wtc_tfm: Transform,\r\n                                tile: SceneTile) {\r\n    const c_corner = wtc_tfm.multiply_array(tile.get_translation());\r\n    const c_size = wtc_tfm.apply_scale(tile.get_tile_size());\r\n    const type = tile.get_type();\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth = TILE_STROKE_WIDTH;\r\n    draw_ctx.fillStyle = TILE_WALKABLE_COLOR;\r\n    draw_ctx.strokeStyle = TILE_STROKE_COLOR;\r\n\r\n    draw_ctx.beginPath();\r\n\r\n    if(type == 0) {\r\n        // walkable\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size, c_size);            \r\n    } else if(type == 2) {\r\n        draw_ctx.rect(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2, c_size / 2, c_size / 2);\r\n    } else if(type == 3) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1] + c_size / 2, c_size / 2, c_size / 2);\r\n    } else if(type == 4) {\r\n        draw_ctx.rect(c_corner[0] + c_size / 2, c_corner[1], c_size / 2, c_size / 2);\r\n    } else if(type == 5) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size / 2, c_size / 2);\r\n    } else if(type == 6) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1] + c_size / 2, c_size, c_size / 2);\r\n    } else if(type == 7) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size / 2, c_size);\r\n    } else if(type == 8) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size, c_size / 2);\r\n    } else if(type == 9) {\r\n        draw_ctx.rect(c_corner[0] + c_size / 2, c_corner[1], c_size / 2, c_size);\r\n    } else if(type == 10) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n    } else if(type == 11) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n    } else if(type == 12) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1]);\r\n    } else if(type == 13) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n    }\r\n\r\n    draw_ctx.fill();\r\n    if(TILE_IS_STROKE) {\r\n        draw_ctx.stroke();\r\n    }\r\n    draw_ctx.restore();\r\n}\r\n\r\nfunction draw_circle(draw_ctx: CanvasRenderingContext2D,\r\n                     tfm: Transform,\r\n                     c_center: number[],\r\n                     radius: number,\r\n                     proportion: number,\r\n                     fill_color: string,\r\n                     stroke_color: string) {\r\n    draw_ctx.save();\r\n    draw_ctx.fillStyle = fill_color;\r\n    draw_ctx.strokeStyle = stroke_color;\r\n\r\n    draw_ctx.beginPath();\r\n    draw_ctx.arc(c_center[0], c_center[1], tfm.apply_scale(radius), 0.0, Math.PI * 2.0);\r\n    draw_ctx.fill();\r\n\r\n    draw_ctx.beginPath();\r\n    draw_ctx.arc(c_center[0], c_center[1], tfm.apply_scale(radius * proportion), 0.0, Math.PI * 2.0);\r\n    draw_ctx.stroke();\r\n    draw_ctx.restore();\r\n}\r\n\r\nfunction draw_person(draw_ctx: CanvasRenderingContext2D, \r\n                     wtc_tfm: Transform, \r\n                     person: Person,\r\n                     cooldawns: Map<COOLDAWN, [number, number]>,\r\n                     effects: Array<EffectBase>,\r\n                     stroke_width: number,\r\n                     back_color: string,\r\n                     walk_color: string,\r\n                     idle_color: string,\r\n                     shift_color: string,\r\n                     hide_color: string,\r\n                     stroke_color: string,\r\n                     secondary_stroke_color: string,\r\n                     is_stroke: boolean) {\r\n    // construct transform from local to canvas\r\n    const person_tfm = person.get_tfm();\r\n    const is_dead = person.get_is_dead();\r\n    const tfm = wtc_tfm.compose_tfms(person_tfm);\r\n    // calculate center on canvas\r\n    const c_center = tfm.multiply(0.0, 0.0);\r\n    const search_radius = person.get_search_radius();\r\n    const c_search_radius = tfm.apply_scale(search_radius);\r\n\r\n    // start draw\r\n    if (person.get_debug_draw()) {\r\n        if (!is_dead) {\r\n            draw_ctx.save();\r\n            draw_ctx.strokeStyle = SELECT_RADIUS_COLOR;\r\n            const select_radius = person.get_select_radius();\r\n            const c_select_radius = wtc_tfm.apply_scale(select_radius);\r\n            draw_ctx.beginPath();\r\n            draw_ctx.arc(c_center[0], c_center[1], c_select_radius, 0.0, 2 * Math.PI);\r\n            draw_ctx.stroke();\r\n            draw_ctx.restore();\r\n        }\r\n\r\n        // draw attack radius\r\n        draw_ctx.save();\r\n        draw_ctx.strokeStyle = is_dead ? ENTITY_DEAD_BACK_COLOR : secondary_stroke_color;\r\n        draw_ctx.beginPath();\r\n        const attack_radius = person.get_attack_distance();\r\n        const c_attack_radius = tfm.apply_scale(attack_radius);\r\n        draw_ctx.arc(c_center[0], c_center[1], c_attack_radius, 0.0, 2 * Math.PI);\r\n        draw_ctx.stroke();\r\n        draw_ctx.restore();\r\n\r\n        // search radius\r\n        draw_ctx.save();\r\n        draw_ctx.strokeStyle = is_dead ? ENTITY_DEAD_BACK_COLOR : DEBUG_SEARCH_RADIUS_COLOR;\r\n        draw_ctx.beginPath();\r\n        draw_ctx.arc(c_center[0], c_center[1], c_search_radius, 0.0, 2 * Math.PI);\r\n        draw_ctx.stroke();\r\n        draw_ctx.restore();\r\n    }\r\n\r\n    // calculate radius of the character\r\n    const radius = person.get_radius();\r\n    const c_radius = tfm.apply_scale(radius);\r\n    const p2 = tfm.multiply(radius * Math.SQRT2, 0.0);\r\n    const a = person_tfm.rotation();\r\n\r\n    // draw main character\r\n    // search cone\r\n    if (person.get_is_visible_search_cone() && !is_dead) {\r\n        const search_start_angle = a + person.get_search_spread() / 2.0;\r\n        const search_end_angle = a - person.get_search_spread() / 2.0;\r\n\r\n        draw_ctx.save();\r\n        draw_ctx.fillStyle = SEARCH_CONE_COLOR;\r\n        draw_ctx.strokeStyle = SEARCH_CONE_STROKE;\r\n        draw_ctx.lineWidth = SEARCH_CONE_STROKE_WIDTH;\r\n\r\n        draw_ctx.beginPath();\r\n        draw_ctx.arc(c_center[0], c_center[1], c_search_radius, search_start_angle, search_end_angle, true);\r\n        draw_ctx.lineTo(c_center[0], c_center[1]);\r\n        draw_ctx.closePath()\r\n        draw_ctx.fill();\r\n        draw_ctx.stroke();\r\n\r\n        draw_ctx.restore();\r\n    }\r\n\r\n    draw_ctx.save();\r\n    // at first base circle\r\n    draw_ctx.lineWidth = stroke_width;\r\n    draw_ctx.fillStyle = is_dead ? ENTITY_DEAD_BACK_COLOR : back_color;\r\n    draw_ctx.strokeStyle = stroke_color;\r\n    draw_ctx.beginPath();\r\n    draw_ctx.arc(c_center[0], c_center[1], c_radius, a + Math.PI / 4, 2 * Math.PI + a - Math.PI / 4);\r\n    draw_ctx.lineTo(p2[0], p2[1]);\r\n    draw_ctx.fill();\r\n    if(is_stroke) {\r\n        draw_ctx.stroke();\r\n    }\r\n\r\n    // next life part\r\n    if (!is_dead) {\r\n        draw_ctx.fillStyle = person.get_move() == MOVE_STATUS.NONE ? (person.get_is_hide() ? hide_color : idle_color) : \r\n                            (person.get_move() == MOVE_STATUS.WALK ? (person.get_is_hide() ? hide_color : walk_color) : \r\n                            (shift_color));\r\n        draw_ctx.beginPath();\r\n        const life_prop = person.get_life_proportion();\r\n        if (life_prop >= 1.0) {\r\n            draw_ctx.arc(c_center[0], c_center[1], tfm.apply_scale(radius * ENTITY_LIFE_CIRCLE_DELTA), 0.0, Math.PI * 2.0);\r\n        } else {\r\n            draw_ctx.arc(c_center[0], c_center[1], tfm.apply_scale(radius * ENTITY_LIFE_CIRCLE_DELTA), a - (1.0 - life_prop) * Math.PI, a + (1.0 - life_prop) * Math.PI, true);\r\n        }\r\n        \r\n        draw_ctx.lineTo(c_center[0], c_center[1]);\r\n        draw_ctx.fill();\r\n        if(is_stroke) {\r\n            draw_ctx.stroke();\r\n        }\r\n    }\r\n    draw_ctx.restore();\r\n\r\n    // shield\r\n    const is_active = person.get_shield_active();\r\n    const shield_prop = person.get_shield_proportion();\r\n    // does not draw full non-active shield\r\n    if (is_active || shield_prop < 1.0 && !is_dead) {\r\n        draw_ctx.save();\r\n        draw_ctx.strokeStyle = is_active ? SHIELD_ACTIVE_COLOR : SHIELD_PASSIVE_COLOR;\r\n        draw_ctx.lineWidth = is_active ? SHIELD_ACTIVE_WIDTH : SHIELD_PASSIVE_WIDTH;\r\n        draw_ctx.beginPath();\r\n        draw_ctx.arc(c_center[0], c_center[1], tfm.apply_scale(radius * Math.SQRT2), a - shield_prop * Math.PI / 2, a + shield_prop * Math.PI / 2);\r\n        draw_ctx.stroke();\r\n        draw_ctx.restore();\r\n    }\r\n\r\n    // draw cooldawns\r\n    // only for alive persons\r\n    if (!is_dead) {\r\n        for (let [cooldawn, times] of cooldawns) {\r\n            draw_ctx.save();\r\n            let cooldawn_radius = 0;\r\n            if (cooldawn == COOLDAWN.SHIFT) {\r\n                draw_ctx.lineWidth = COOLDAWN_SHIFT_WIDTH;\r\n                draw_ctx.strokeStyle = COOLDAWN_SHIFT_COLOR;\r\n                cooldawn_radius = COOLDAWN_SHIFT_RADIUS;\r\n            } else if (cooldawn == COOLDAWN.MELEE_ATTACK) {\r\n                draw_ctx.lineWidth = COOLDAWN_MELEE_ATTACK_WIDTH;\r\n                draw_ctx.strokeStyle = COOLDAWN_MELEE_ATTACK_COLOR;\r\n                cooldawn_radius = COOLDAWN_MELEE_ATTACK_RADIUS;\r\n            } else if (cooldawn == COOLDAWN.HIDE_ACTIVATION) {\r\n                draw_ctx.lineWidth = COOLDAWN_HIDE_WIDTH;\r\n                draw_ctx.strokeStyle = COOLDAWN_HIDE_COLOR;\r\n                cooldawn_radius = COOLDAWN_HIDE_RADIUS;\r\n            } else if (cooldawn == COOLDAWN.SHADOW_ATTACK) {\r\n                draw_ctx.lineWidth = COOLDAWN_SHADOW_ATTACK_WIDTH;\r\n                draw_ctx.strokeStyle = COOLDAWN_SHADOW_ATTACK_COLOR;\r\n                cooldawn_radius = COOLDAWN_SHADOW_ATTACK_RADIUS;\r\n            } else if (cooldawn == COOLDAWN.RANGE_ATTACK) {\r\n                draw_ctx.lineWidth = COOLDAWN_RANGE_ATTACK_WIDTH;\r\n                draw_ctx.strokeStyle = COOLDAWN_RANGE_ATTACK_COLOR;\r\n                cooldawn_radius = COOLDAWN_RANGE_ATTACK_RADIUS;\r\n            } else if (cooldawn == COOLDAWN.HAND_ATTACK) {\r\n                draw_ctx.lineWidth = COOLDAWN_HAND_ATTACK_WIDTH;\r\n                draw_ctx.strokeStyle = COOLDAWN_HAND_ATTACK_COLOR;\r\n                cooldawn_radius = COOLDAWN_HAND_ATTACK_RADIUS;\r\n            } else if (cooldawn == COOLDAWN.SKILL_ROUND_ATTACK) {\r\n                draw_ctx.lineWidth = COOLDAWN_SKILL_ROUND_ATTACK_WIDTH;\r\n                draw_ctx.strokeStyle = COOLDAWN_SKILL_ROUND_ATTACK_COLOR;\r\n                cooldawn_radius = COOLDAWN_SKILL_ROUND_ATTACK_RADIUS;\r\n            } else if (cooldawn == COOLDAWN.SKILL_STUN_CONE) {\r\n                draw_ctx.lineWidth = COOLDAWN_SKILL_STUN_CONE_WIDTH;\r\n                draw_ctx.strokeStyle = COOLDAWN_SKILL_STUN_CONE_COLOR;\r\n                cooldawn_radius = COOLDAWN_SKILL_STUN_CONE_RADIUS;\r\n            }\r\n            draw_ctx.beginPath();\r\n            draw_ctx.arc(c_center[0], c_center[1], cooldawn_radius, a, 2.0 * Math.PI * (1.0 - times[1] / times[0]) + a);\r\n            draw_ctx.stroke();\r\n            draw_ctx.restore();\r\n        }\r\n    \r\n        // draw effects\r\n        for (const effect of effects) {\r\n            const effect_type = effect.type();\r\n            if (effect_type == EFFECT.MELEE_ATTACK) {\r\n                const melee_effect: MeleeAttackEffect = effect as MeleeAttackEffect;\r\n                const distance: number = melee_effect.distance();\r\n                const spread: number = melee_effect.spread();\r\n                const proportion: number = melee_effect.proportion();\r\n    \r\n                const c_distance = tfm.apply_scale(distance);\r\n                const start_angle = a + spread / 2.0;\r\n                const end_angle = start_angle - spread * proportion;\r\n    \r\n                draw_ctx.save();\r\n                draw_ctx.fillStyle = EFFECT_MELEE_ATTACK_COLOR;\r\n                draw_ctx.strokeStyle = EFFECT_MELEE_ATTACK_COLOR;\r\n    \r\n                draw_ctx.beginPath();\r\n                draw_ctx.arc(c_center[0], c_center[1], c_distance, start_angle, end_angle, true);\r\n                draw_ctx.arc(c_center[0], c_center[1], c_radius, end_angle, start_angle, false);\r\n                draw_ctx.closePath();\r\n                draw_ctx.fill();\r\n    \r\n                draw_ctx.beginPath();\r\n                draw_ctx.arc(c_center[0], c_center[1], c_distance, start_angle, start_angle - spread, true);\r\n                draw_ctx.arc(c_center[0], c_center[1], c_radius, start_angle - spread, start_angle, false);\r\n                draw_ctx.closePath();\r\n                draw_ctx.stroke();\r\n                draw_ctx.restore();\r\n            } else if (effect_type == EFFECT.STUN) {\r\n                const proportion = 1.0 - effect.proportion();\r\n                // draw as circle with changed inner circle\r\n                draw_circle(draw_ctx, tfm, c_center, radius * EFFECT_STUN_RADIUS_MULTIPLIER, proportion,\r\n                            EFFECT_STUN_COLOR, EFFECT_STUN_STROKE_COLOR);\r\n            } else if (effect_type == EFFECT.HIDE_ACTIVATION) {\r\n                const proportion = 1.0 - effect.proportion();\r\n                draw_circle(draw_ctx, tfm, c_center, radius, proportion,\r\n                            EFFECT_HIDE_ACTIVATION_COLOR, EFFECT_HIDE_ACTIVATION_STROKE);\r\n            } else if (effect_type == EFFECT.SHADOW_ATTACK) {\r\n                const shadow_effect: ShadowAttackEffect = effect as ShadowAttackEffect;\r\n                const distance: number = shadow_effect.distance();\r\n                const proportion: number = shadow_effect.proportion();\r\n    \r\n                const c_distance = tfm.apply_scale(distance);\r\n                draw_ctx.save();\r\n                draw_ctx.strokeStyle = EFFECT_SHADOW_ATTACK_COLOR;\r\n                draw_ctx.lineWidth = EFFECT_SHADOW_ATTACK_WIDTH;\r\n    \r\n                draw_ctx.beginPath();\r\n                draw_ctx.moveTo(c_center[0] + Math.cos(a) * c_radius, c_center[1] + Math.sin(a) * c_radius);\r\n                const end_radius = c_radius + proportion * (c_distance - c_radius);\r\n                draw_ctx.lineTo(c_center[0] + Math.cos(a) * end_radius, c_center[1] + Math.sin(a) * end_radius);\r\n                draw_ctx.stroke();\r\n                draw_ctx.restore();\r\n            } else if (effect_type == EFFECT.HAND_ATTACK) {\r\n                const hand_effect: HandAttackEffect = effect as HandAttackEffect;\r\n                const distance: number = hand_effect.distance();\r\n                const proportion: number = hand_effect.proportion();\r\n    \r\n                const c_distance = tfm.apply_scale(distance);\r\n                draw_ctx.save();\r\n                draw_ctx.fillStyle = EFFECT_HAND_ATTACK_COLOR;\r\n    \r\n                draw_ctx.beginPath();\r\n                draw_ctx.moveTo(c_center[0], c_center[1]);\r\n                draw_ctx.lineTo(c_center[0] + Math.cos(a - Math.PI / 4) * c_radius, c_center[1] + Math.sin(a - Math.PI / 4) * c_radius);\r\n                const end_radius = c_radius + proportion * (c_distance - c_radius);\r\n                draw_ctx.lineTo(c_center[0] + Math.cos(a) * end_radius, c_center[1] + Math.sin(a) * end_radius);\r\n                draw_ctx.lineTo(c_center[0] + Math.cos(a + Math.PI / 4) * c_radius, c_center[1] + Math.sin(a + Math.PI / 4) * c_radius);\r\n                draw_ctx.closePath();\r\n                draw_ctx.fill();\r\n                draw_ctx.restore();\r\n            } else if (effect_type == EFFECT.RANGE_ATTACK) {\r\n                const range_effect: RangeAttackEffect = effect as RangeAttackEffect;\r\n                const proportion: number = range_effect.proportion();\r\n\r\n                draw_ctx.save();\r\n                draw_ctx.strokeStyle = EFFECT_RANGE_ATTACK_COLOR;\r\n                draw_ctx.lineWidth = EFFECT_RANGE_ATTACK_WIDTH;\r\n\r\n                draw_ctx.beginPath();\r\n                draw_ctx.arc(c_center[0], c_center[1], c_radius + EFFECT_RANGE_ATTACK_DELTA, a - Math.PI / 2, a + Math.PI / 2);\r\n                const r = proportion * (c_radius + EFFECT_RANGE_ATTACK_DELTA);\r\n                draw_ctx.lineTo(c_center[0] - Math.cos(a) * r, c_center[1] - Math.sin(a) * r);\r\n                draw_ctx.closePath();\r\n                draw_ctx.stroke();\r\n                draw_ctx.restore();\r\n            } else if (effect_type == EFFECT.SKILL_ROUND_ATTACK) {\r\n                const skill_effect: SkillRoundAttackEffect = effect as SkillRoundAttackEffect;\r\n                const proportion = skill_effect.proportion();\r\n                const size = skill_effect.area_size();\r\n                const c_size = tfm.apply_scale(size);\r\n\r\n                draw_ctx.save();\r\n                draw_ctx.strokeStyle = EFFECT_SKILL_ROUND_ATTACK_STROKE;\r\n                draw_ctx.fillStyle = EFFECT_SKILL_ROUND_ATTACK_COLOR;\r\n\r\n                draw_ctx.beginPath();\r\n                draw_ctx.arc(c_center[0], c_center[1], c_radius, 0, 2 * Math.PI);\r\n                draw_ctx.stroke();\r\n\r\n                draw_ctx.beginPath();\r\n                draw_ctx.arc(c_center[0], c_center[1], c_size, 0, 2 * Math.PI);\r\n                draw_ctx.stroke();\r\n\r\n                draw_ctx.beginPath();\r\n                draw_ctx.arc(c_center[0], c_center[1], c_radius, a, a + 2 * Math.PI * proportion);\r\n                draw_ctx.arc(c_center[0], c_center[1], c_size, a + 2 * Math.PI * proportion, a, true);\r\n                draw_ctx.closePath();\r\n                draw_ctx.fill();\r\n                draw_ctx.restore();\r\n            } else if (effect_type == EFFECT.SKILL_STUN_CONE) {\r\n                const skill_effect: SkillStunConeEffect = effect as SkillStunConeEffect;\r\n                const proportion = skill_effect.proportion();\r\n                const cone_spread = skill_effect.cone_spread();\r\n                const cone_size = skill_effect.cone_size();\r\n                const c_cone_size = tfm.apply_scale(cone_size);\r\n\r\n                draw_ctx.save();\r\n                draw_ctx.strokeStyle = EFFECT_SKILL_STUN_CONE_STROKE;\r\n                draw_ctx.fillStyle = EFFECT_SKILL_STUN_CONE_COLOR;\r\n\r\n                draw_ctx.beginPath();\r\n                draw_ctx.arc(c_center[0], c_center[1], c_radius, a - cone_spread / 2, a + cone_spread / 2);\r\n                draw_ctx.arc(c_center[0], c_center[1], c_cone_size, a + cone_spread / 2, a - cone_spread / 2, true);\r\n                draw_ctx.closePath();\r\n                draw_ctx.stroke();\r\n\r\n                draw_ctx.beginPath();\r\n                draw_ctx.arc(c_center[0], c_center[1], c_radius, a - cone_spread / 2, a + cone_spread / 2);\r\n                draw_ctx.arc(c_center[0], c_center[1], c_radius + (c_cone_size - c_radius) * proportion, a + cone_spread / 2, a - cone_spread / 2, true);\r\n                draw_ctx.closePath();\r\n                draw_ctx.fill();\r\n\r\n                draw_ctx.restore();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function draw_player(draw_ctx: CanvasRenderingContext2D, \r\n                            wtc_tfm: Transform, \r\n                            player: Player,\r\n                            cooldawns: Map<COOLDAWN, [number, number]>,\r\n                            effects: Array<EffectBase>) {\r\n    \r\n    draw_person(draw_ctx,\r\n        wtc_tfm,\r\n        player,\r\n        cooldawns,\r\n        effects,\r\n        PLAYER_STROKE_WIDTH,\r\n        PLAYER_LIVE_BACK_COLOR,\r\n        PLAYER_MOVE_COLOR,\r\n        PLAYER_IDLE_COLOR,\r\n        PLAYER_SHIFT_COLOR,\r\n        PLAYER_HIDE_COLOR,\r\n        PLAYER_STROKE_COLOR,\r\n        PLAYER_SECONDARY_STROKE_COLOR,\r\n        PLAYER_IS_STROKE);\r\n}\r\n\r\nexport function draw_monster(draw_ctx: CanvasRenderingContext2D, \r\n                             wtc_tfm: Transform, \r\n                             monster: Monster,\r\n                             cooldawns: Map<COOLDAWN, [number, number]>,\r\n                             effects: Array<EffectBase>) {\r\n    \r\n    draw_person(draw_ctx,\r\n        wtc_tfm,\r\n        monster,\r\n        cooldawns,\r\n        effects,\r\n        MONSTER_STROKE_WIDTH,\r\n        MONSTER_LIVE_BACK_COLOR,\r\n        MONSTER_MOVE_COLOR,\r\n        MONSTER_IDLE_COLOR,\r\n        MONSTER_SHIFT_COLOR,\r\n        MONSTER_HIDE_COLOR,\r\n        MONSTER_STROKE_COLOR,\r\n        MONSTER_SECONDARY_STROKE_COLOR,\r\n        MONSTER_IS_STROKE);\r\n}\r\n\r\nexport function draw_bullet(draw_ctx: CanvasRenderingContext2D, \r\n                            wtc_tfm: Transform,\r\n                            bullet: Bullet) {\r\n    const bullet_tfm = bullet.get_tfm();\r\n    const tfm = wtc_tfm.compose_tfms(bullet_tfm);\r\n    const c_center = tfm.multiply(0.0, 0.0);\r\n    const angle = bullet_tfm.rotation();\r\n\r\n    if (bullet.get_debug_draw()) {\r\n        draw_ctx.save();\r\n        draw_ctx.strokeStyle = DEBUG_BULLET_TARGET_LINE_COLOR;\r\n        draw_ctx.lineWidth = DEBUG_BULLET_TARGET_LINE_WIDTH;\r\n        draw_ctx.beginPath();\r\n        const c_target = wtc_tfm.multiply(bullet.get_debug_target_x(), bullet.get_debug_target_y());\r\n        draw_ctx.moveTo(c_center[0], c_center[1]);\r\n        draw_ctx.lineTo(c_target[0], c_target[1]);\r\n        draw_ctx.stroke();\r\n\r\n        draw_ctx.fillStyle = DEBUG_BULLET_TARGET_POINT_COLOR;\r\n        draw_ctx.beginPath();\r\n        draw_ctx.arc(c_target[0], c_target[1], DEBUG_BULLET_TARGET_POINT_SIZE, 0, Math.PI * 2);\r\n        draw_ctx.fill();\r\n        draw_ctx.restore();\r\n    }\r\n\r\n    draw_ctx.save();\r\n    if (bullet.get_type() == BULLET_TYPE.ARROW) {\r\n        draw_ctx.fillStyle = BULLET_ARROW_COLOR;\r\n        \r\n        draw_ctx.beginPath();\r\n        draw_ctx.arc(c_center[0], c_center[1], BULLET_ARROW_HEAD_SIZE, angle - Math.PI / 2, angle + Math.PI / 2);\r\n        draw_ctx.lineTo(c_center[0] - Math.cos(angle) * BULLET_ARROW_TAIL_SIZE, c_center[1] - Math.sin(angle) * BULLET_ARROW_TAIL_SIZE);\r\n        draw_ctx.fill();\r\n    }\r\n    draw_ctx.restore();\r\n}\r\n\r\nexport function draw_trajectory(draw_ctx: CanvasRenderingContext2D, \r\n                                wtc_tfm: Transform,\r\n                                coordinates: Float32Array) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth = DEBUG_TRAJECTORY_WIDTH;\r\n    draw_ctx.strokeStyle = DEBUG_TRAJECTORY_COLOR;\r\n    draw_ctx.beginPath();\r\n    const points_count = coordinates.length / 2;\r\n    const c = wtc_tfm.multiply(coordinates[0], coordinates[1]);\r\n    draw_ctx.moveTo(c[0], c[1]);\r\n    for(let i = 1; i < points_count; i++) {\r\n        const p = wtc_tfm.multiply(coordinates[2*i], coordinates[2*i+1]);\r\n        draw_ctx.lineTo(p[0], p[1]);\r\n    }\r\n    draw_ctx.stroke();\r\n    draw_ctx.restore();\r\n\r\n    draw_ctx.save();\r\n    draw_ctx.fillStyle = DEBUG_TRAJECTORY_POINT_COLOR;\r\n    for(let i = 0; i < points_count; i++) {\r\n        draw_ctx.beginPath();\r\n        const p = wtc_tfm.multiply(coordinates[2*i], coordinates[2*i+1]);\r\n        draw_ctx.arc(p[0], p[1], DEBUG_TRAJECTORY_POINT_RADIUS, 0.0, 2*Math.PI);\r\n        draw_ctx.fill();\r\n    }\r\n    draw_ctx.restore();\r\n}\r\n\r\nexport function draw_pairs(draw_ctx: CanvasRenderingContext2D, \r\n                           wtc_tfm: Transform,\r\n                           array: Array<number>) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth =  DEBUG_CLOSEST_PAIR_WIDTH;\r\n    draw_ctx.strokeStyle = DEBUG_CLOSEST_PAIR_COLOR;\r\n    draw_ctx.beginPath();\r\n    const piars_count = array.length / 4;\r\n    for(let i = 0; i < piars_count; i++) {\r\n        const p_start = wtc_tfm.multiply(array[4*i], array[4*i + 1]);\r\n        const p_finish = wtc_tfm.multiply(array[4*i + 2], array[4*i + 3]);\r\n        draw_ctx.moveTo(p_start[0], p_start[1]);\r\n        draw_ctx.lineTo(p_finish[0], p_finish[1]);\r\n    }\r\n    draw_ctx.stroke();\r\n    draw_ctx.restore();\r\n}\r\n\r\nfunction draw_rect(draw_ctx: CanvasRenderingContext2D, \r\n                   wtc_tfm: Transform,\r\n                   coordinates: Float32Array,\r\n                   stroke_style: string,\r\n                   stroke_width: number) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth =  stroke_width;\r\n    draw_ctx.strokeStyle = stroke_style;\r\n    draw_ctx.beginPath();\r\n\r\n    const s = wtc_tfm.multiply(coordinates[0], coordinates[1]);\r\n    const e = wtc_tfm.multiply(coordinates[2], coordinates[3]);\r\n\r\n    draw_ctx.moveTo(s[0], s[1]);\r\n    draw_ctx.lineTo(e[0], s[1]);\r\n    draw_ctx.lineTo(e[0], e[1]);\r\n    draw_ctx.lineTo(s[0], e[1]);\r\n    draw_ctx.closePath();\r\n\r\n    draw_ctx.stroke();\r\n    draw_ctx.restore();\r\n}\r\n\r\nfunction draw_double_rect(draw_ctx: CanvasRenderingContext2D, \r\n                          wtc_tfm: Transform,\r\n                          coordinates: Float32Array,\r\n                          show_inner: boolean,\r\n                          show_outer: boolean,\r\n                          stroke_style: string,\r\n                          stroke_width: number) {\r\n    if (show_inner) {\r\n        draw_rect(draw_ctx, wtc_tfm, coordinates, stroke_style, stroke_width);\r\n    }\r\n\r\n    if (show_outer) {\r\n        const width = coordinates[2] - coordinates[0];\r\n        const height = coordinates[3] - coordinates[1];\r\n        const outer_coordinates = new Float32Array(4);\r\n        outer_coordinates[0] = coordinates[0] - width;\r\n        outer_coordinates[1] = coordinates[1] - height;\r\n        outer_coordinates[2] = coordinates[2] + width;\r\n        outer_coordinates[3] = coordinates[3] + height;\r\n        draw_rect(draw_ctx, wtc_tfm, outer_coordinates, stroke_style, stroke_width);\r\n    }\r\n}\r\n\r\nexport function draw_visibility_rect(draw_ctx: CanvasRenderingContext2D, \r\n                                     wtc_tfm: Transform,\r\n                                     coordinates: Float32Array) {\r\n    draw_double_rect(draw_ctx, wtc_tfm, coordinates, true, true, DEBUG_VISIBILITY_RECT_COLOR, DEBUG_RECT_LINE_WIDTH);\r\n}\r\n\r\nexport function draw_neighbourhood_rect(draw_ctx: CanvasRenderingContext2D, \r\n                                        wtc_tfm: Transform,\r\n                                        coordinates: Float32Array) {\r\n    draw_double_rect(draw_ctx, wtc_tfm, coordinates, true, true, DEBUG_NEIGHBOURHOOD_RECT_COLOR, DEBUG_RECT_LINE_WIDTH);\r\n}\r\n\r\nexport function draw_search_rect(draw_ctx: CanvasRenderingContext2D, \r\n                                 wtc_tfm: Transform,\r\n                                 coordinates: Float32Array) {\r\ndraw_double_rect(draw_ctx, wtc_tfm, coordinates, true, true, DEBUG_SEARCH_RECT_COLOR, DEBUG_RECT_LINE_WIDTH);\r\n}\r\n\r\nexport function draw_mid_rect(draw_ctx: CanvasRenderingContext2D, \r\n                              wtc_tfm: Transform,\r\n                              coordinates: Float32Array) {\r\ndraw_double_rect(draw_ctx, wtc_tfm, coordinates, true, true, DEBUG_MID_RECT_COLOR, DEBUG_RECT_LINE_WIDTH);\r\n}\r\n\r\nexport function draw_lines(draw_ctx: CanvasRenderingContext2D, \r\n                           wtc_tfm: Transform,\r\n                           lines: Array<number>) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth =  DEBUG_ENEMIES_TARGET_LINE_WIDTH;\r\n    draw_ctx.strokeStyle = DEBUG_ENEMIES_TARGET_LINE_COLOR;\r\n    for (let line_index = 0; line_index < lines.length / 4; line_index++) {\r\n        draw_ctx.beginPath();\r\n        const s = wtc_tfm.multiply(lines[4 * line_index], lines[4 * line_index + 1]);\r\n        const e = wtc_tfm.multiply(lines[4 * line_index + 2], lines[4 * line_index + 3]);\r\n\r\n        draw_ctx.moveTo(s[0], s[1]);\r\n        draw_ctx.lineTo(e[0], e[1]);\r\n        draw_ctx.stroke();\r\n    }\r\n    draw_ctx.restore();\r\n}","import { ClientDataCanvas } from \"./client_data_canvas/client_data_canvas\";\r\n\r\nlet client = new ClientDataCanvas();\r\n","import { ClientBase } from \"../client_base\";\r\nimport { CAMERA_LERP_COEFFICIENT, COOLDAWN, DAMAGE_TYPE, MOVE_STATUS, REMOVE_REASON, SKILL, TARGET_ACTION, TILE_PIXELS_SIZE } from \"../constants\";\r\nimport { draw_background, draw_bullet, draw_cursor, draw_level_tile, draw_lines, draw_mid_rect, draw_monster, draw_neighbourhood_rect, draw_pairs, draw_player, draw_search_rect, draw_trajectory, draw_visibility_rect } from \"./draws\";\r\n\r\n// this version of the client application\r\n// use 2d canvas as draw device\r\n// it use simple procedural shapes for visualise all game items\r\nexport class ClientDataCanvas extends ClientBase {\r\n    m_canvas_width: number;\r\n    m_canvas_height: number;\r\n\r\n    m_camera_position_x: number = 0.0;\r\n    m_camera_position_y: number = 0.0;\r\n\r\n    m_debug_trajectories: Map<number, Float32Array> = new Map<number, Float32Array>();\r\n    m_debug_pairs: Array<number>;\r\n\r\n    m_is_draw_visible_rect: boolean = false;\r\n    m_debug_visible_rect: Float32Array = new Float32Array(4);\r\n    m_is_draw_neighbourhood_rect: boolean = false;\r\n    m_debug_neighbourhood_rect: Float32Array = new Float32Array(4);\r\n    m_is_draw_search_rect: boolean = false;\r\n    m_debug_search_rect: Float32Array = new Float32Array(4);\r\n    m_is_draw_mid_rect: boolean = false;\r\n    m_debug_mid_rect: Float32Array = new Float32Array(4);\r\n    m_debug_enemies_lines: Array<number>;  // for each enemy store 4 values: (x, y) of attacker and (x, y) of the target\r\n    m_use_debug_draw: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.m_canvas_width = this.m_scene_canvas.width;\r\n        this.m_canvas_height = this.m_scene_canvas.height;\r\n\r\n        this.m_debug_trajectories.clear();\r\n        this.m_debug_pairs = new Array<number>();\r\n        this.m_debug_enemies_lines = new Array<number>();\r\n    }\r\n\r\n    start(): void {\r\n        this.update_process();\r\n    }\r\n\r\n    on_canvas_resize(in_width: number, in_height: number): void {\r\n        this.m_canvas_width = in_width;\r\n        this.m_canvas_height = in_height;\r\n\r\n        this.m_wtc_tfm.set_translation(this.m_canvas_width / 2 - this.m_camera_position_x * this.m_wtc_scale, this.m_canvas_height / 2 - this.m_camera_position_y * this.m_wtc_scale);\r\n    }\r\n\r\n    point_to_world(in_x: number, in_y: number) : number[] {\r\n        // in this implementation we use m_wtc_tfm as transform from canvas to world\r\n        // this transform is also used for the map\r\n        const ctw_tfm = this.m_wtc_tfm.inverse();\r\n        const pos = ctw_tfm.multiply(in_x, in_y);\r\n        return pos;\r\n    }\r\n\r\n    // in this implementation we does not need this\r\n    scene_tile_delete(index: number): void { }\r\n    scene_tile_create(pos_x: number, pos_y: number, index: number, type: number): void { }\r\n    scene_create_player(radius: number): void { \r\n        this.m_scene.get_player().set_debug_draw(this.m_use_debug_draw);\r\n    }\r\n    scene_update_entity_params(id: number, is_dead: boolean, life: number, max_life: number, select_radius: number, attack_distance: number, attack_time: number): void { }\r\n    // mouse_click(inc_x: number, inc_y: number, inw_x: number, inw_y: number): void { }\r\n    // when define player position, we should update camera to output shapes to the canvas\r\n    scene_update_entity_position(id: number, pos_x: number, pos_y: number): void {\r\n        if (this.m_scene.is_player(id)) {\r\n            // update wtc transform\r\n            this.m_camera_position_x = CAMERA_LERP_COEFFICIENT * pos_x + (1 - CAMERA_LERP_COEFFICIENT) * this.m_camera_position_x;\r\n            this.m_camera_position_y = CAMERA_LERP_COEFFICIENT * pos_y + (1 - CAMERA_LERP_COEFFICIENT) * this.m_camera_position_y;\r\n\r\n            this.m_wtc_tfm.set_translation(this.m_canvas_width / 2 - this.m_camera_position_x * this.m_wtc_scale, this.m_canvas_height / 2 - this.m_camera_position_y * this.m_wtc_scale);\r\n        }\r\n    }\r\n    scene_update_entity_angle(id: number, angle: number): void {}\r\n    scene_update_entity_move_status(id: number, move_status: MOVE_STATUS): void {}\r\n    scene_update_entity_life(id: number, life: number, max_life: number): void {}\r\n    scene_update_entity_shield(id: number, shield: number, max_shield: number): void {}\r\n    scene_create_monster(entity: number, pos_x: number, pos_y: number, radius: number, search_radius: number, search_spread: number, team: number): void {\r\n        const p = this.m_scene.get_person(entity);\r\n        if (p) {\r\n            p.set_debug_draw(this.m_use_debug_draw);\r\n        }\r\n    }\r\n    scene_create_bullet(entity: number, pos_x: number, pos_y: number, target_x: number, target_y: number, angle: number, bullet_type: number): void {\r\n        const b = this.m_scene.get_bullet(entity);\r\n        if (b) {\r\n            b.set_debug_draw(this.m_use_debug_draw);\r\n        }\r\n    }\r\n    scene_remove_monster(entity: number): void {}\r\n    scene_remove_bullet(entity: number, reason: REMOVE_REASON): void {}\r\n    scene_entity_start_shift(entity: number): void {}\r\n    scene_entity_finish_shift(entity: number): void {}\r\n    scene_entity_activate_shield(entity: number): void {}\r\n    scene_entity_release_shield(entity: number): void {}\r\n    scene_entity_start_melee_attack(entity: number, time: number, damage_distance: number, damage_spread: number): void {}\r\n    scene_entity_finish_melee_attack(entity: number): void {}\r\n    scene_entity_start_range_attack(entity: number, time: number): void {}\r\n    scene_entity_finish_range_attack(entity: number): void {}\r\n    scene_entity_start_hand_attack(entity: number, time: number, damage_distance: number): void {}\r\n    scene_entity_finish_hand_attack(entity: number): void {}\r\n    scene_entity_start_shadow_attack(entity: number, time: number, damage_distance: number): void {}\r\n    scene_entity_finish_shadow_attack(entity: number): void {}\r\n    scene_entity_finish_skill(entity: number, skill: SKILL): void {}\r\n    scene_entity_start_cooldawn(entity: number, cooldawn_id: COOLDAWN, time: number): void {}\r\n    scene_click_entity(entity: number, action_id: TARGET_ACTION): void {}\r\n    scene_click_position(pos_x: number, pos_y: number): void {}\r\n    scene_entity_damaged(attacker_entity: number, target_entity: number, damage: number, damage_type: DAMAGE_TYPE): void {}\r\n    scene_entity_dead(entity: number): void {}\r\n    scene_entity_start_stun(entity: number, duration: number): void {}\r\n    scene_entity_finish_stun(entity: number): void {}\r\n    scene_entity_start_hide_activation(entity: number, activation_time: number): void {}\r\n    scene_entity_finish_hide_activation(entity: number, interrupt: boolean): void {}\r\n    scene_entity_start_skill_round_attack(entity: number, cast_time: number, area_size: number): void {}\r\n    scene_entity_start_skill_stun_cone(entity: number, cast_time: number, cone_spread: number, cone_size: number): void {}\r\n    scene_entity_switch_hide(id: number, is_hide: boolean): void {}\r\n    scene_player_activate_hide(): void {}\r\n    scene_player_deactivate_hide(): void {}\r\n    scene_entity_resurrect(entity: number, life: number, max_life: number): void {}\r\n    scene_command_skill_result(is_start: boolean, is_entity_target: boolean, entity: number, position_x: number, position_y: number, skill: number): void {}\r\n\r\n    debug_entity_trajectory(entity: number, coordinates: Float32Array): void {\r\n        if (this.m_use_debug_draw) {\r\n            // store coordinates in temporary map\r\n            // draw these trajectories at draw method\r\n            this.m_debug_trajectories.set(entity, coordinates);\r\n        }\r\n    }\r\n\r\n    debug_close_entity_pair(entity_a: number, a_pos_x: number, a_pos_y: number, entity_b: number, b_pos_x: number, b_pos_y: number): void {\r\n        if (this.m_use_debug_draw) {\r\n            this.m_debug_pairs.push(a_pos_x);\r\n            this.m_debug_pairs.push(a_pos_y);\r\n\r\n            this.m_debug_pairs.push(b_pos_x);\r\n            this.m_debug_pairs.push(b_pos_y);\r\n        }\r\n    }\r\n\r\n    debug_player_visible_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        if (this.m_use_debug_draw) {\r\n            this.m_debug_visible_rect[0] = start_x;\r\n            this.m_debug_visible_rect[1] = start_y;\r\n            this.m_debug_visible_rect[2] = end_x;\r\n            this.m_debug_visible_rect[3] = end_y;\r\n            this.m_is_draw_visible_rect = true;\r\n        }\r\n    }\r\n\r\n    debug_player_neighbourhood_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        if (this.m_use_debug_draw) {\r\n            this.m_debug_neighbourhood_rect[0] = start_x;\r\n            this.m_debug_neighbourhood_rect[1] = start_y;\r\n            this.m_debug_neighbourhood_rect[2] = end_x;\r\n            this.m_debug_neighbourhood_rect[3] = end_y;\r\n            this.m_is_draw_neighbourhood_rect = true;\r\n        }\r\n    }\r\n\r\n    debug_player_search_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        if (this.m_use_debug_draw) {\r\n            this.m_debug_search_rect[0] = start_x;\r\n            this.m_debug_search_rect[1] = start_y;\r\n            this.m_debug_search_rect[2] = end_x;\r\n            this.m_debug_search_rect[3] = end_y;\r\n            this.m_is_draw_search_rect = true;\r\n        }\r\n    }\r\n\r\n    debug_player_mid_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        if (this.m_use_debug_draw) {\r\n            this.m_debug_mid_rect[0] = start_x;\r\n            this.m_debug_mid_rect[1] = start_y;\r\n            this.m_debug_mid_rect[2] = end_x;\r\n            this.m_debug_mid_rect[3] = end_y;\r\n            this.m_is_draw_mid_rect = true;\r\n        }\r\n    }\r\n\r\n    debug_enemies_search(id: number, search_radius: number, enemy_ids: Int32Array): void {\r\n        if (this.m_use_debug_draw) {\r\n            const attacker = this.m_scene.get_person(id);\r\n            if (attacker) {\r\n                const attacker_position = attacker.get_translation();\r\n                for (let target_id of enemy_ids) {\r\n                    const target = this.m_scene.get_person(target_id);\r\n                    if (target) {\r\n                        const target_position = target.get_translation();\r\n                        if (attacker_position.length >= 2 && target_position.length >= 2) {\r\n                            this.m_debug_enemies_lines.push(attacker_position[0]);\r\n                            this.m_debug_enemies_lines.push(attacker_position[1]);\r\n                            this.m_debug_enemies_lines.push(target_position[0]);\r\n                            this.m_debug_enemies_lines.push(target_position[1]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    debug_define_draw_flag(output_debug: boolean): void {\r\n        this.m_use_debug_draw = output_debug;\r\n    }\r\n\r\n    debug_toggle_draw_flag(): void {\r\n        this.m_use_debug_draw = !this.m_use_debug_draw;\r\n\r\n        if (!this.m_use_debug_draw) {\r\n            this.m_is_draw_visible_rect = false;\r\n            this.m_is_draw_neighbourhood_rect = false;\r\n            this.m_is_draw_search_rect = false;\r\n            this.m_is_draw_mid_rect = false;\r\n\r\n            // disable debug draw for all persons\r\n            const player = this.m_scene.get_player();\r\n            player.set_debug_draw(false);\r\n\r\n            for (const [id, monster] of this.m_scene.get_monsters()) {\r\n                monster.set_debug_draw(false);\r\n            }\r\n\r\n            for (const [id, bullet] of this.m_scene.get_bullets()) {\r\n                bullet.set_debug_draw(false);\r\n            }\r\n        } else {\r\n            // enable debug draw for all persons\r\n            const player = this.m_scene.get_player();\r\n            player.set_debug_draw(true);\r\n            \r\n            for (const [id, monster] of this.m_scene.get_monsters()) {\r\n                monster.set_debug_draw(true);\r\n            }\r\n\r\n            for (const [id, bullet] of this.m_scene.get_bullets()) {\r\n                bullet.set_debug_draw(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    update_process() {\r\n        // clear debug before update\r\n        // because at update it calls callbacks and fill this map\r\n        this.m_debug_trajectories.clear();\r\n        this.m_debug_pairs.length = 0;\r\n        this.m_debug_enemies_lines = new Array<number>();\r\n\r\n        this.update();\r\n\r\n        // in this client we should draw the scene\r\n        this.draw_scene();\r\n\r\n        window.requestAnimationFrame(this.update_process.bind(this));\r\n    }\r\n\r\n    draw_scene() {\r\n        // clear the background\r\n        this.m_scene_ctx.clearRect(0, 0, this.m_canvas_width, this.m_canvas_height);\r\n        draw_background(this.m_scene_ctx, this.m_scene_canvas.width, this.m_scene_canvas.height)\r\n\r\n        // draw scene items\r\n        // tiles\r\n        const level_tiles = this.m_scene.get_level_tiles();\r\n        for(let [tile_index, tile] of level_tiles) {\r\n            draw_level_tile(this.m_scene_ctx, this.m_wtc_tfm, tile)\r\n        }\r\n\r\n        // draw the cursor\r\n        const click_cursor = this.m_scene.get_click_cursor();\r\n        draw_cursor(this.m_scene_ctx, this.m_wtc_tfm, click_cursor);\r\n\r\n        // player\r\n        const player = this.m_scene.get_player();\r\n        const player_id = player.get_id();\r\n        draw_player(this.m_scene_ctx, this.m_wtc_tfm, player, this.m_scene.get_person_cooldawns(player_id), this.m_scene.get_person_effects(player_id));\r\n\r\n        // monsters\r\n        const monsters = this.m_scene.get_monsters();\r\n        for(let [entity, monster] of monsters) {\r\n            const monster_id = monster.get_id();\r\n            draw_monster(this.m_scene_ctx, this.m_wtc_tfm, monster, this.m_scene.get_person_cooldawns(monster_id), this.m_scene.get_person_effects(monster_id));\r\n        }\r\n\r\n        // bullets\r\n        const bullets = this.m_scene.get_bullets();\r\n        for (const [id, bullet] of bullets) {\r\n            draw_bullet(this.m_scene_ctx, this.m_wtc_tfm, bullet);\r\n        }\r\n\r\n        // draw debug trajectories\r\n        for(let [entity, coordinates] of this.m_debug_trajectories) {\r\n            draw_trajectory(this.m_scene_ctx, this.m_wtc_tfm, coordinates);\r\n        }\r\n\r\n        // closest pairs\r\n        draw_pairs(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_pairs);\r\n\r\n        // visible quad\r\n        if (this.m_is_draw_visible_rect) {\r\n            draw_visibility_rect(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_visible_rect);\r\n        }\r\n        // neighbourhood rect\r\n        if (this.m_is_draw_neighbourhood_rect) {\r\n            draw_neighbourhood_rect(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_neighbourhood_rect);\r\n        }\r\n\r\n        if (this.m_is_draw_search_rect) {\r\n            draw_search_rect(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_search_rect);\r\n        }\r\n\r\n        if (this.m_is_draw_mid_rect) {\r\n            draw_mid_rect(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_mid_rect);\r\n        }\r\n\r\n        draw_lines(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_enemies_lines);\r\n    }\r\n}"],"names":["async","$c73d7759e7ded5ad$export$f9bb8d20ccc7477a","module","imports","adaptedImports","env","Object","assign","create","globalThis","abort","message","fileName","lineNumber","columnNumber","__liftString","Error","entity","life","max_life","host","entity_resurrect","is_dead","shield","max_shield","select_radius","atack_distance","attack_time","update_entity_params","level_width","level_height","tile_size","define_level","total_tiles","define_total_tiles","vertices","polygons","sizes","__liftStaticArray","__getF32","__getI32","define_navmesh","pos_x","pos_y","radius","team","create_player","angle","move_status","define_person_changes","interrupt","entity_finish_melee_attack","entity_finish_hand_attack","entity_finish_range_attack","entity_finish_hide","entity_finish_shadow_attack","skill","entity_finish_skill","entity_release_shield","time","damage_distance","entity_start_shadow_attack","cooldawn_id","cooldawn_time","entity_start_cooldawn","damage_spread","entity_start_melee_attack","entity_start_range_attack","entity_start_hand_attack","hide_active","entity_switch_hide","cast_time","cone_spread","cone_size","entity_start_skill_stun_cone","action","click_entity","click_position","entity_start_shift","entity_activate_shield","activation_time","entity_start_hide","area_size","entity_start_skill_round_attack","duration","entity_start_stun","count","define_total_update_entities","define_bullet_changes","points","debug_entity_walk_path","e1","pos_x1","pos_y1","e2","pos_x2","pos_y2","debug_close_entity","start_x","start_y","end_x","end_y","debug_visible_quad","debug_neighbourhood_quad","debug_search_quad","debug_mid_quad","search_radius","enemies","pointer","__getU32","debug_enemies_list","index","tile_delete","x","y","type","tile_create","actor_type","remove_reason","remove_entity","search_spread","create_monster","target_x","target_y","bullet_type","create_bullet","entity_finish_shift","entity_finish_stun","attacker_entity","target_entity","damage","damage_type","entity_damaged","entity_dead","exports","WebAssembly","instantiate","memory","adaptedExports","setPrototypeOf","create_settings","__liftInternref","settings_set_seed","settings","seed","__lowerInternref","__notnull","settings_set_generate","level_size","room_min_size","room_max_size","rooms_count","settings_set_use_debug","in_use_debug","settings_set_debug_flags","in_show_path","in_show_closest","in_show_visible","in_show_neighborhood","in_show_search","in_show_mid","in_show_enemy_targets","settings_set_neighbourhood_quad_size","in_size","settings_set_visible_quad_size","settings_set_search_quad_size","settings_set_mid_quad_size","settings_set_rvo_time_horizon","in_time","settings_set_use_rvo","in_value","settings_set_snap_to_navmesh","settings_set_velocity_boundary_control","settings_set_path_recalculate_time","common_value","follow_value","settings_set_tiles_visible_radius","settings_set_search_system_chunk_count","settings_set_monster_iddle_time","min_value","max_value","settings_set_monsters_per_room","settings_set_select_radius_delta","settings_set_level_tile_size","settings_set_monster_random_walk_radius","settings_set_bullet_max_distance","settings_set_react_attack","settings_set_default_monster_common","rotation_speed","shield_resurrect","hide_speed_multiplier","hide_activate_time","hide_cooldawn","settings_set_default_monster_person","speed","settings_set_player","default_team","shift_speed_multiplier","shift_distance","shift_cooldawn","settings_set_default_monster_weapon","attack_distance","attack_cooldawn","settings_set_default_empty_weapon","settings_set_default_shadow_weapon","settings_set_skill_round_attack","cooldawn","area_radius","settings_set_skill_stun_cone","distance","stun_time","dev_game_resurrect_player","game","dev_game_spawn_monster","position_x","position_y","move_speed","virtual_weapon","friend_for_player","__retain","__release","dev_game_move_entity","dev_add_sword_to_player","dev_add_bow_to_player","dev_player_equip_sword","dev_player_equip_bow","dev_player_equip_free_hands","dev_create_virtual_sword","dev_create_virtual_bow","bullet_speed","dev_create_virtual_empty_weapon","create_game","game_update","dt","game_client_point","in_x","in_y","game_client_shift","cursor_x","cursor_y","game_client_shield","game_client_release_shield","game_client_toggle_hide","game_skill_nontarget","game_skill_target","game_add_monsters","game_make_aggressive","game_damage_all_entities","game_stun_all_entities","end","Uint32Array","buffer","memoryU16","Uint16Array","start","string","String","fromCharCode","subarray","liftElement","align","length","values","Array","i","Internref","Number","registry","FinalizationRegistry","sentinel","register","value","valueOf","TypeError","refcounts","Map","refcount","get","set","__pin","__unpin","delete","__dataview","DataView","getInt32","getUint32","getFloat32","$55f2ecb58225d6c7$export$dec075e787bbf2fa","$55f2ecb58225d6c7$export$4afca9a08097ec4f","EFFECT","$55f2ecb58225d6c7$export$8e818200ae481691","ACTOR","$55f2ecb58225d6c7$export$beaadeb05da3c908","BULLET_TYPE","$55f2ecb58225d6c7$export$58c6f65a6916bd88","REMOVE_REASON","$55f2ecb58225d6c7$export$e6bc449c90089af5","MOVE_STATUS","$55f2ecb58225d6c7$export$43ef098869e1ce28","TARGET_ACTION","$55f2ecb58225d6c7$export$9ac679c2f13a240b","COOLDAWN","$55f2ecb58225d6c7$export$2b7d53de8e69aef6","DAMAGE_TYPE","$55f2ecb58225d6c7$export$994c5d44043666f7","SKILL","$f16e9672ec91febb$export$563a914cafbdc389","m_matrix","Float32Array","m_angle","m_scale_x","m_scale_y","constructor","this","matrix_array","set_matrix_array","in_array","set_translation","translation","_update_rotation","Math","cos","sin","set_rotation","rotation","uniform_scale","scale","set_scale","set_uniform_scale","multiply","multiply_array","in_coordinates","apply_scale","sqrt","compose_tfms","other","to_return","a","b","result","_det2","c","d","inverse","m","toString","$178042aa2c7d65a2$export$18a53f1bbc175d6c","$178042aa2c7d65a2$export$145ca2a7c548ea67","$178042aa2c7d65a2$export$7f5701e64ff28313","$178042aa2c7d65a2$export$8e9e21cb4ba66e8a","$178042aa2c7d65a2$export$b1bc5b97da70dd55","$570cf7c0464d6eb1$export$a67fcbf599a20f60","m_active","m_tfm","m_scale","m_scale_index","in_ctxt","in_wtc_tfm","in_tile_size","in_vertices","in_polygons","in_sizes","m_context","m_wtc_tfm","m_canvas_width","canvas","width","m_canvas_height","height","m_tile_size","m_vertices","m_polygons","m_sizes","floor","_update_scale","toggle_active","scale_up","scale_down","draw","clearRect","pos","save","fillStyle","strokeStyle","lineWidth","shift","s","beginPath","j","v","c_position","moveTo","lineTo","fill","stroke","c_center","arc","PI","restore","$034754255a7c6cea$export$9c15a42db78ae2ef","m_debug_draw","set_debug_draw","set_position","set_angle","get_debug_draw","get_tfm","get_translation","$034754255a7c6cea$export$b41b3f15e4eb37fa","m_entity_id","in_id","super","get_id","set_id","$d3cdc929a48dff87$export$6a0a81cd518a4dd3","CURSOR_TYPE","$d3cdc929a48dff87$export$a4d5907be24f10a8","m_charge","m_time_accum","m_life_time","m_type","NONE","m_select_person","m_remember_last_select","m_remember_id","in_parent_scene","m_parent_scene","charge","is_charge","activate_by_position","POSITION","activate_by_entity_remember","id","activate_by_enemy_select","get_person","ENEMY_ENTITY","_define_tfm_for_selection","get_type","get_active","get_size","get_select_radius","update","deactivate","get_proportion","get_entity_select","deactivate_by_entity_remove","by_dead","deactivate_enemy_select","$276293489b0116c9$export$c0132fff8e013c5d","get_tile_size","$a3d187aad3887238$export$d0e824889e01c751","m_radius","m_attack_distance","m_life","m_max_life","m_shield","m_max_shield","m_move_status","m_is_dead","m_select_radius","m_search_radius","m_search_spread","m_active_shield","m_is_hide","m_is_visible_search_cone","set_team","m_team","set_is_dead","set_alive","get_is_dead","set_radius","set_search_radius","set_search_spread","set_attack_distance","set_life","set_active_shield","set_shield","set_select_radius","set_move","in_move","set_is_hide","set_visible_search_cone","get_move","get_radius","get_attack_distance","get_life","get_max_life","get_life_proportion","get_shield","get_max_shield","get_shield_proportion","get_shield_active","get_search_radius","get_search_spread","get_is_hide","get_is_visible_search_cone","$6416d36ee6f7b910$export$2616165974278734","$873e84d0b6afad0d$export$d2385d4b1e3b9d1a","$264e6e272b953d77$export$68ec2f3649ea48cb","m_cooldawns","add_entity","start_cooldawn","total_time","forEach","c_map","times","get_cooldawns","in_entity","$4dcd9affdabb00e4$export$fb47d56c13cfbc1b","m_effects","add_effect","effect","has","effects","push","remove_by_type","splice","add_melee_attack","spread","$4dcd9affdabb00e4$export$1141927f75690a35","add_range_attack","$4dcd9affdabb00e4$export$e33fd687b1f6ed83","add_hand_attack","$4dcd9affdabb00e4$export$cd367b22f291e0e7","add_shadow_attack","$4dcd9affdabb00e4$export$4062dac735e0808d","add_stun","$4dcd9affdabb00e4$export$bbf894e13d7be598","add_hide_cast","$4dcd9affdabb00e4$export$59c476553f83346","add_skill_round_attack","$4dcd9affdabb00e4$export$6da73b849c260158","add_skill_stun_cone","$4dcd9affdabb00e4$export$7c31736c9bb225b5","remove_melee_attack","MELEE_ATTACK","remove_range_attack","RANGE_ATTACK","remove_hand_attack","HAND_ATTACK","remove_shadow_attack","SHADOW_ATTACK","remove_skill","ROUND_ATTACK","SKILL_ROUND_ATTACK","STUN_CONE","SKILL_STUN_CONE","remove_stun","STUN","remove_hide_cast","HIDE_ACTIVATION","get_entity_effects","$4dcd9affdabb00e4$export$1454102407d0a8e","in_total_time","in_type","m_total_time","m_spend_time","proportion","in_distance","in_spread","m_distance","m_spread","m_area_size","m_cone_spread","m_cone_size","$ab0774418387e77a$export$f90411c24f6aebf8","m_debug_target_x","m_debug_target_y","set_debug_target","get_debug_target_x","get_debug_target_y","$7b6acdcc84d7fdce$export$38af1803e3442a7f","m_level_width","m_level_height","m_level_tile_size","m_last_click_time","m_click_number","m_click_cursor","m_level_tiles","m_player","m_player_id","m_monsters","m_bullets","m_visible_search_cones","level_tile_size","input_click","in_canvas_x","in_canvas_y","in_world_x","in_world_y","is_force","current_time","performance","now","input_click_entity","input_click_position","reset_click","get_click_cursor","get_person_cooldawns","get_person_effects","get_level_tiles","get_player","get_monsters","get_bullets","monster","get_bullet","get_entity_position","delete_tile","create_tile","set_player_id","is_player","set_player_radius","set_entity_attack_distance","set_entity_life","set_entity_activate_shield","is_active","set_entity_shield","set_entity_dead","set_entity_alive","set_entity_attack_time","set_entity_select_radius","bullet","post_monster_create","set_entity_position","set_monster_radius","set_monster_search_radius","set_monster_search_spread","set_entity_team","set_entity_angle","set_entity_move","set_entity_hide","is_hide","set_bullet_target_position","activate_monster_search_cones","deactivate_monster_search_cones","entity_start_hide_cast","entity_finish_hide_cast","remove_monster","remove_bullet","$2cc090ebe2c5f8ef$export$b492ca688ad18a46","mouse_event","canvas_rect","getBoundingClientRect","clientX","left","clientY","top","$2cc090ebe2c5f8ef$export$9e7d46156018b332","touch_event","touches","$492333b0ad62fdec$export$f03163d7279986d4","$33d4847c3617f155$export$8b768cd553057a13","html_id","m_html_element","document","getElementById","show","style","visibility","hide","$862899718e90ca39$export$ae44022dcc4e43cc","set_text","text","innerText","$2b73031844bf817e$export$bc3bf32b2a642c5a","m_accumulator","m_ticks","m_value","round","toFixed","$ac97b2179e748b61$export$f1569c0fcc611a8e","total_id","visible_id","m_total_element","m_visible_element","update_values","total","visible","$6882fe66818c8fa1$export$3828dcf1a148271e","assign_fps_element","m_fps","assign_count_elements","m_items","assign_pause_screen","m_pause_screen","assign_control_keyboard","m_control_keyboard","assign_control_touch","m_control_touch","assign_loading","m_loading","assign_position","m_position","update_count_values","update_position","in_translation","on_pause","is_touch","off_pause","loading_hide","$00e59dbde102d18d$export$59eddba01feb69f8","client","settings_ptr","use_debug","random","debug_define_draw_flag","$00e59dbde102d18d$export$2aa42715a9907b7c","local_this","m_game_ptr","$23cae2dc541edd99$export$8f6e4be34af2779b","m_module","undefined","m_is_start","m_is_wait_click","m_activated_skill","m_wtc_scale","m_is_left_mouse_press","m_is_right_mouse_press","m_last_touch_time","m_last_touch_coords","m_total_level_entities","m_is_game_active","m_is_pause","m_is_touch","bind","command_skill_result","m_ui","m_scene_canvas","m_scene_ctx","getContext","m_map_canvas","m_map_ctx","setup_canvas_size","pointerEvents","m_current_time","window","addEventListener","event","preventDefault","onkeydown","key_event","key","navigator","maxTouchPoints","touch_start_event","touch_end_event","mouse_press_event","mouse_release_event","onmousemove","m_mouse_event","visibilitychange_event","fetch","then","response","compileStreaming","console","log","window_width","innerWidth","window_height","innerHeight","game_width","game_height","width_elements","getElementsByClassName","height_elements","window_div","on_canvas_resize","hidden","activate","toggle_activate","click_event","canvas_x","canvas_y","world_x","world_y","m_scene","activate_target_skill","select_person","position","touch_time","c_world","point_to_world","abs","is_left_click","button","is_right_click","is_left_release","is_right_release","weapon_ptr","m_map","debug_toggle_draw_flag","size","draw_map","scene_tile_delete","scene_tile_create","scene_create_player","scene_update_entity_params","scene_create_monster","scene_create_bullet","scene_update_entity_position","scene_update_entity_angle","scene_update_entity_move_status","scene_update_entity_life","scene_update_entity_shield","MONSTER","scene_remove_monster","BULLET","scene_remove_bullet","scene_entity_start_shift","scene_entity_finish_shift","scene_entity_activate_shield","scene_entity_release_shield","scene_entity_start_melee_attack","scene_entity_finish_melee_attack","scene_entity_start_range_attack","scene_entity_finish_range_attack","scene_entity_start_hand_attack","scene_entity_finish_hand_attack","scene_entity_start_shadow_attack","scene_entity_finish_shadow_attack","scene_entity_finish_skill","scene_entity_start_cooldawn","action_id","scene_click_entity","scene_click_position","scene_entity_dead","scene_entity_damaged","scene_entity_start_stun","scene_entity_finish_stun","scene_entity_switch_hide","scene_player_activate_hide","scene_player_deactivate_hide","scene_entity_start_hide_activation","scene_entity_finish_hide_activation","scene_entity_start_skill_round_attack","scene_entity_start_skill_stun_cone","scene_entity_resurrect","is_start","is_entity_target","scene_command_skill_result","coordinates","debug_entity_trajectory","debug_close_entity_pair","debug_player_visible_quad","debug_player_neighbourhood_quad","debug_player_search_quad","debug_player_mid_quad","enemy_ids","array","Int32Array","debug_enemies_search","$f9b95ce5c1226078$export$8552bb84728abe17","draw_ctx","wtc_tfm","cursor","cursor_type","prop","pow","min","c_radius","$f9b95ce5c1226078$export$44a885b113ef7fa4","tile","c_corner","c_size","rect","$f9b95ce5c1226078$var$draw_circle","tfm","fill_color","stroke_color","$f9b95ce5c1226078$var$draw_person","person","cooldawns","stroke_width","back_color","walk_color","idle_color","shift_color","hide_color","secondary_stroke_color","is_stroke","person_tfm","c_search_radius","c_select_radius","attack_radius","c_attack_radius","p2","SQRT2","search_start_angle","search_end_angle","closePath","WALK","life_prop","shield_prop","cooldawn_radius","SHIFT","effect_type","melee_effect","c_distance","start_angle","end_angle","shadow_effect","end_radius","hand_effect","r","skill_effect","c_cone_size","$f9b95ce5c1226078$export$81d3421d8062504e","player","$f9b95ce5c1226078$export$f6c2b352dcf2259f","$f9b95ce5c1226078$export$275884d8e20b24a","bullet_tfm","c_target","ARROW","$f9b95ce5c1226078$export$9dcff9b689c89317","points_count","p","$f9b95ce5c1226078$export$16bc6b67ddae1d3a","piars_count","p_start","p_finish","$f9b95ce5c1226078$var$draw_rect","stroke_style","e","$f9b95ce5c1226078$var$draw_double_rect","show_inner","show_outer","outer_coordinates","$f9b95ce5c1226078$export$aafd173343db4808","$f9b95ce5c1226078$export$314e5031b7b35249","$f9b95ce5c1226078$export$58b92b33777b71c0","$f9b95ce5c1226078$export$824a452d69fab74f","$f9b95ce5c1226078$export$1bf0f79799fc76b2","lines","line_index","m_camera_position_x","m_camera_position_y","m_debug_trajectories","m_is_draw_visible_rect","m_debug_visible_rect","m_is_draw_neighbourhood_rect","m_debug_neighbourhood_rect","m_is_draw_search_rect","m_debug_search_rect","m_is_draw_mid_rect","m_debug_mid_rect","m_use_debug_draw","clear","m_debug_pairs","m_debug_enemies_lines","update_process","in_width","in_height","reason","entity_a","a_pos_x","a_pos_y","entity_b","b_pos_x","b_pos_y","attacker","attacker_position","target_id","target","target_position","output_debug","draw_scene","requestAnimationFrame","fillRect","level_tiles","tile_index","click_cursor","player_id","monsters","monster_id","bullets"],"version":3,"file":"module.js.map"}