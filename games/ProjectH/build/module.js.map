{"mappings":"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","sources":["wasm/build/game_api.js","src/constants.ts","src/transform.ts","src/client_data_canvas/visual_styles.ts","src/scene/scene_map.ts","src/scene/scene_item.ts","src/scene/click_cursor.ts","src/scene/scene_tile.ts","src/scene/person.ts","src/scene/player.ts","src/scene/monster.ts","src/scene/cooldawn.ts","src/scene/scene.ts","src/utilities.ts","src/ui/ui_element.ts","src/ui/ui_html_element.ts","src/ui/ui_html_text_element.ts","src/ui/ui_fps.ts","src/ui/ui_items.ts","src/ui/ui.ts","src/client_base.ts","src/client_data_canvas/draws.ts","src/index.ts","src/client_data_canvas/client_data_canvas.ts"],"sourcesContent":["export async function instantiate(module, imports = {}) {\n  const adaptedImports = {\n    env: Object.assign(Object.create(globalThis), imports.env || {}, {\n      abort(message, fileName, lineNumber, columnNumber) {\n        // ~lib/builtins/abort(~lib/string/String | null?, ~lib/string/String | null?, u32?, u32?) => void\n        message = __liftString(message >>> 0);\n        fileName = __liftString(fileName >>> 0);\n        lineNumber = lineNumber >>> 0;\n        columnNumber = columnNumber >>> 0;\n        (() => {\n          // @external.js\n          throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);\n        })();\n      },\n      \"host.define_level\"(level_width, level_height, tile_size) {\n        // assembly/external/define_level(u32, u32, f32) => void\n        level_width = level_width >>> 0;\n        level_height = level_height >>> 0;\n        host.define_level(level_width, level_height, tile_size);\n      },\n      \"host.define_total_tiles\"(total_tiles) {\n        // assembly/external/define_total_tiles(u32) => void\n        total_tiles = total_tiles >>> 0;\n        host.define_total_tiles(total_tiles);\n      },\n      \"host.define_navmesh\"(vertices, polygons, sizes) {\n        // assembly/external/define_navmesh(~lib/staticarray/StaticArray<f32>, ~lib/staticarray/StaticArray<i32>, ~lib/staticarray/StaticArray<i32>) => void\n        vertices = __liftStaticArray(__getF32, 2, vertices >>> 0);\n        polygons = __liftStaticArray(__getI32, 2, polygons >>> 0);\n        sizes = __liftStaticArray(__getI32, 2, sizes >>> 0);\n        host.define_navmesh(vertices, polygons, sizes);\n      },\n      \"host.create_player\"(entity, radius) {\n        // assembly/external/create_player(u32, f32) => void\n        entity = entity >>> 0;\n        host.create_player(entity, radius);\n      },\n      \"host.define_entity_changes\"(entity, pos_x, pos_y, angle, move_status) {\n        // assembly/external/define_entity_changes(u32, f32, f32, f32, u32) => void\n        entity = entity >>> 0;\n        move_status = move_status >>> 0;\n        host.define_entity_changes(entity, pos_x, pos_y, angle, move_status);\n      },\n      \"host.entity_start_action\"(entity, action_id) {\n        // assembly/external/entity_start_action(u32, u32) => void\n        entity = entity >>> 0;\n        action_id = action_id >>> 0;\n        host.entity_start_action(entity, action_id);\n      },\n      \"host.define_total_update_entities\"(count) {\n        // assembly/external/define_total_update_entities(u32) => void\n        count = count >>> 0;\n        host.define_total_update_entities(count);\n      },\n      \"host.debug_entity_walk_path\"(entity, points) {\n        // assembly/external/debug_entity_walk_path(u32, ~lib/staticarray/StaticArray<f32>) => void\n        entity = entity >>> 0;\n        points = __liftStaticArray(__getF32, 2, points >>> 0);\n        host.debug_entity_walk_path(entity, points);\n      },\n      \"host.debug_close_entity\"(e1, pos_x1, pos_y1, e2, pos_x2, pos_y2) {\n        // assembly/external/debug_close_entity(u32, f32, f32, u32, f32, f32) => void\n        e1 = e1 >>> 0;\n        e2 = e2 >>> 0;\n        host.debug_close_entity(e1, pos_x1, pos_y1, e2, pos_x2, pos_y2);\n      },\n      \"host.debug_visible_quad\"(start_x, start_y, end_x, end_y) {\n        // assembly/external/debug_visible_quad(f32, f32, f32, f32) => void\n        host.debug_visible_quad(start_x, start_y, end_x, end_y);\n      },\n      \"host.debug_neighborhood_quad\"(start_x, start_y, end_x, end_y) {\n        // assembly/external/debug_neighborhood_quad(f32, f32, f32, f32) => void\n        host.debug_neighborhood_quad(start_x, start_y, end_x, end_y);\n      },\n      \"host.tile_delete\"(index) {\n        // assembly/external/tile_delete(u32) => void\n        index = index >>> 0;\n        host.tile_delete(index);\n      },\n      \"host.tile_create\"(x, y, index, type) {\n        // assembly/external/tile_create(u32, u32, u32, u32) => void\n        x = x >>> 0;\n        y = y >>> 0;\n        index = index >>> 0;\n        type = type >>> 0;\n        host.tile_create(x, y, index, type);\n      },\n      \"host.remove_monster\"(entity) {\n        // assembly/external/remove_monster(u32) => void\n        entity = entity >>> 0;\n        host.remove_monster(entity);\n      },\n      \"host.create_monster\"(entity, radius) {\n        // assembly/external/create_monster(u32, f32) => void\n        entity = entity >>> 0;\n        host.create_monster(entity, radius);\n      },\n      \"host.entity_finish_action\"(entity, action_id) {\n        // assembly/external/entity_finish_action(u32, u32) => void\n        entity = entity >>> 0;\n        action_id = action_id >>> 0;\n        host.entity_finish_action(entity, action_id);\n      },\n      \"host.entity_start_cooldawn\"(entity, cooldawn_id, cooldawn_time) {\n        // assembly/external/entity_start_cooldawn(u32, u32, f32) => void\n        entity = entity >>> 0;\n        cooldawn_id = cooldawn_id >>> 0;\n        host.entity_start_cooldawn(entity, cooldawn_id, cooldawn_time);\n      },\n    }),\n  };\n  const { exports } = await WebAssembly.instantiate(module, adaptedImports);\n  const memory = exports.memory || imports.env.memory;\n  const adaptedExports = Object.setPrototypeOf({\n    create_settings() {\n      // assembly/game_api/create_settings() => assembly/game/settings/Settings\n      return __liftInternref(exports.create_settings() >>> 0);\n    },\n    settings_set_seed(settings, seed) {\n      // assembly/game_api/settings_set_seed(assembly/game/settings/Settings, u32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_seed(settings, seed);\n    },\n    settings_set_generate(settings, level_size, room_min_size, room_max_size, rooms_count) {\n      // assembly/game_api/settings_set_generate(assembly/game/settings/Settings, u32, u32, u32, u32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_generate(settings, level_size, room_min_size, room_max_size, rooms_count);\n    },\n    settings_set_use_debug(settings, in_use_debug) {\n      // assembly/game_api/settings_set_use_debug(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_use_debug = in_use_debug ? 1 : 0;\n      exports.settings_set_use_debug(settings, in_use_debug);\n    },\n    settings_set_debug_flags(settings, in_show_path, in_show_closest, in_show_visible, in_show_neighborhood) {\n      // assembly/game_api/settings_set_debug_flags(assembly/game/settings/Settings, bool, bool, bool, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_show_path = in_show_path ? 1 : 0;\n      in_show_closest = in_show_closest ? 1 : 0;\n      in_show_visible = in_show_visible ? 1 : 0;\n      in_show_neighborhood = in_show_neighborhood ? 1 : 0;\n      exports.settings_set_debug_flags(settings, in_show_path, in_show_closest, in_show_visible, in_show_neighborhood);\n    },\n    settings_set_neighborhood_quad_size(settings, in_size) {\n      // assembly/game_api/settings_set_neighborhood_quad_size(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_neighborhood_quad_size(settings, in_size);\n    },\n    settings_set_rvo_time_horizon(settings, in_time) {\n      // assembly/game_api/settings_set_rvo_time_horizon(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_rvo_time_horizon(settings, in_time);\n    },\n    settings_set_use_rvo(settings, in_value) {\n      // assembly/game_api/settings_set_use_rvo(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_value = in_value ? 1 : 0;\n      exports.settings_set_use_rvo(settings, in_value);\n    },\n    settings_set_snap_to_navmesh(settings, in_value) {\n      // assembly/game_api/settings_set_snap_to_navmesh(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_value = in_value ? 1 : 0;\n      exports.settings_set_snap_to_navmesh(settings, in_value);\n    },\n    settings_set_velocity_boundary_control(settings, in_value) {\n      // assembly/game_api/settings_set_velocity_boundary_control(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_value = in_value ? 1 : 0;\n      exports.settings_set_velocity_boundary_control(settings, in_value);\n    },\n    settings_set_path_recalculate_time(settings, in_value) {\n      // assembly/game_api/settings_set_path_recalculate_time(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_path_recalculate_time(settings, in_value);\n    },\n    settings_set_player_fast_shift(settings, speed_multiplier, distance, cooldawn) {\n      // assembly/game_api/settings_set_player_fast_shift(assembly/game/settings/Settings, f32, f32, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_player_fast_shift(settings, speed_multiplier, distance, cooldawn);\n    },\n    create_game(settings) {\n      // assembly/game_api/create_game(assembly/game/settings/Settings) => assembly/game/Game\n      settings = __lowerInternref(settings) || __notnull();\n      return __liftInternref(exports.create_game(settings) >>> 0);\n    },\n    game_update(game, dt) {\n      // assembly/game_api/game_update(assembly/game/Game, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_update(game, dt);\n    },\n    game_client_point(game, in_x, in_y) {\n      // assembly/game_api/game_client_point(assembly/game/Game, f32, f32) => bool\n      game = __lowerInternref(game) || __notnull();\n      return exports.game_client_point(game, in_x, in_y) != 0;\n    },\n    game_client_shift(game, cursor_x, cursor_y) {\n      // assembly/game_api/game_client_shift(assembly/game/Game, f32, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_client_shift(game, cursor_x, cursor_y);\n    },\n    game_add_monsters(game) {\n      // assembly/game_api/game_add_monsters(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_add_monsters(game);\n    },\n  }, exports);\n  function __liftString(pointer) {\n    if (!pointer) return null;\n    const\n      end = pointer + new Uint32Array(memory.buffer)[pointer - 4 >>> 2] >>> 1,\n      memoryU16 = new Uint16Array(memory.buffer);\n    let\n      start = pointer >>> 1,\n      string = \"\";\n    while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));\n    return string + String.fromCharCode(...memoryU16.subarray(start, end));\n  }\n  function __liftStaticArray(liftElement, align, pointer) {\n    if (!pointer) return null;\n    const\n      length = __getU32(pointer - 4) >>> align,\n      values = new Array(length);\n    for (let i = 0; i < length; ++i) values[i] = liftElement(pointer + (i << align >>> 0));\n    return values;\n  }\n  class Internref extends Number {}\n  const registry = new FinalizationRegistry(__release);\n  function __liftInternref(pointer) {\n    if (!pointer) return null;\n    const sentinel = new Internref(__retain(pointer));\n    registry.register(sentinel, pointer);\n    return sentinel;\n  }\n  function __lowerInternref(value) {\n    if (value == null) return 0;\n    if (value instanceof Internref) return value.valueOf();\n    throw TypeError(\"internref expected\");\n  }\n  const refcounts = new Map();\n  function __retain(pointer) {\n    if (pointer) {\n      const refcount = refcounts.get(pointer);\n      if (refcount) refcounts.set(pointer, refcount + 1);\n      else refcounts.set(exports.__pin(pointer), 1);\n    }\n    return pointer;\n  }\n  function __release(pointer) {\n    if (pointer) {\n      const refcount = refcounts.get(pointer);\n      if (refcount === 1) exports.__unpin(pointer), refcounts.delete(pointer);\n      else if (refcount) refcounts.set(pointer, refcount - 1);\n      else throw Error(`invalid refcount '${refcount}' for reference '${pointer}'`);\n    }\n  }\n  function __notnull() {\n    throw TypeError(\"value must not be null\");\n  }\n  let __dataview = new DataView(memory.buffer);\n  function __getI32(pointer) {\n    try {\n      return __dataview.getInt32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getInt32(pointer, true);\n    }\n  }\n  function __getU32(pointer) {\n    try {\n      return __dataview.getUint32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getUint32(pointer, true);\n    }\n  }\n  function __getF32(pointer) {\n    try {\n      return __dataview.getFloat32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getFloat32(pointer, true);\n    }\n  }\n  return adaptedExports;\n}\n","export const TILE_PIXELS_SIZE: number = 50; // the number of pixels for one tile of the level\r\nexport const CLICK_CURSOR_TIME: number = 400; // in milliseconds\r\nexport const CLICK_CURSOR_RADIUS: number = 0.5; // in world units\r\nexport const MAP_TILE_PIXELS_SIZES: number[] = [3, 5, 8, 12, 15, 20, 30, 40, 50];  // arrays of different sizes for map\r\nexport const CAMERA_LERP_COEFFICIENT: number = 1.0;  // for smooth camera\r\n\r\n// delay between mouse clicks, when the button is hold\r\nexport const FIRST_MOUSE_CLICK_DELTA: number = 500;  // in miliseconds\r\nexport const OTHER_MOUSE_CLICK_DELTA: number = 30;  // in miliseconds\r\n\r\n// the same as in wasm-side\r\nexport enum MOVE_STATUS {\r\n    NONE,\r\n    WALK,\r\n    SHIFT\r\n}\r\n\r\nexport enum ACTION {\r\n    SHIFT,\r\n}\r\n\r\nexport enum COOLDAWN {\r\n    SHIFT,\r\n}","export class Transform {\r\n    m_matrix = new Float32Array(9);\r\n\r\n    // store separate values for angle and scale\r\n    m_angle: number = 0.0;\r\n    m_scale_x: number = 1.0;\r\n    m_scale_y: number = 1.0;\r\n\r\n    constructor() {\r\n        this.m_matrix[0] = 1.0; this.m_matrix[1] = 0.0; this.m_matrix[2] = 0.0;\r\n        this.m_matrix[3] = 0.0; this.m_matrix[4] = 1.0; this.m_matrix[5] = 0.0;\r\n        this.m_matrix[6] = 0.0; this.m_matrix[7] = 0.0; this.m_matrix[8] = 1.0;  // this row always shouldbe (0.0, 0.0, 1.0)\r\n    }\r\n\r\n    matrix_array(): Float32Array {\r\n        return this.m_matrix;\r\n    }\r\n\r\n    // this method does not properly define local rotation and scale values\r\n    // it should be used only for create temp matrix, apply transform and does not use it anymore\r\n    set_matrix_array(in_array: number[]) {\r\n        for(let i = 0; i < 9; i++) {\r\n            this.m_matrix[i] = in_array[i];\r\n        }\r\n    }\r\n\r\n    set_translation(in_x: number, in_y: number) {\r\n        this.m_matrix[2] = in_x;\r\n        this.m_matrix[5] = in_y;\r\n    }\r\n\r\n    translation(): number[] {\r\n        return [this.m_matrix[2], this.m_matrix[5]];\r\n    }\r\n\r\n    private _update_rotation() {\r\n        this.m_matrix[0] = Math.cos(this.m_angle) * this.m_scale_x;\r\n        this.m_matrix[3] = Math.sin(this.m_angle) * this.m_scale_x;\r\n        this.m_matrix[1] = -Math.sin(this.m_angle) * this.m_scale_y;\r\n        this.m_matrix[4] = Math.cos(this.m_angle) * this.m_scale_y;\r\n    }\r\n\r\n    set_rotation(in_value: number) {  // in_value - in radians from OX in conter clock wise direction\r\n        this.m_angle = in_value;\r\n        this._update_rotation();\r\n    }\r\n\r\n    rotation(): number {\r\n        return this.m_angle;\r\n    }\r\n\r\n    set_scale(in_x: number, in_y: number) {\r\n        this.m_scale_x = in_x;\r\n        this.m_scale_y = in_y;\r\n\r\n        this._update_rotation();\r\n    }\r\n\r\n    set_uniform_scale(in_value: number) {\r\n        this.m_scale_x = in_value;\r\n        this.m_scale_y = in_value;\r\n\r\n        this._update_rotation();\r\n    }\r\n\r\n    multiply(in_x: number, in_y: number): number[] {\r\n        return [this.m_matrix[0] * in_x + this.m_matrix[1] * in_y + this.m_matrix[2],\r\n                this.m_matrix[3] * in_x + this.m_matrix[4] * in_y + this.m_matrix[5]];\r\n    }\r\n\r\n    multiply_array(in_coordinates: number[]): number[] {\r\n        return this.multiply(in_coordinates[0], in_coordinates[1]);\r\n    }\r\n\r\n    apply_scale(in_value: number): number {\r\n        // get length of the first vector\r\n        const l1 = Math.sqrt(this.m_matrix[0] * this.m_matrix[0] + this.m_matrix[3] * this.m_matrix[3]);\r\n        // and length of the second vector\r\n        const l2 = Math.sqrt(this.m_matrix[1] * this.m_matrix[1] + this.m_matrix[4] * this.m_matrix[4]);\r\n\r\n        // return the average of these length\r\n        return in_value * (l1 + l2) / 2;\r\n    }\r\n\r\n    // compose current tfm A with other tfm B and return A * B\r\n    compose_tfms(other: Transform): Transform {\r\n        let to_return = new Transform();\r\n\r\n        const a = this.matrix_array();\r\n        const b = other.matrix_array();\r\n\r\n        // multiply these two matrices\r\n        let result = [a[0]*b[0]+a[1]*b[3]+a[2]*b[6], a[0]*b[1]+a[1]*b[4]+a[2]*b[7], a[0]*b[2]+a[1]*b[5]+a[2]*b[8],\r\n                      a[3]*b[0]+a[4]*b[3]+a[5]*b[6], a[3]*b[1]+a[4]*b[4]+a[5]*b[7], a[3]*b[2]+a[4]*b[5]+a[5]*b[8],\r\n                      a[6]*b[0]+a[7]*b[3]+a[8]*b[6], a[6]*b[1]+a[7]*b[4]+a[8]*b[7], a[6]*b[2]+a[7]*b[5]+a[8]*b[8]];\r\n        to_return.set_matrix_array(result);\r\n\r\n        return to_return;\r\n    }\r\n\r\n    private _det2(a: number, b: number, c: number, d: number): number {\r\n        return a*d - b*c;\r\n    }\r\n\r\n    // return inverse transform\r\n    // we setup only matrix, without local scale and rotation\r\n    inverse(): Transform {\r\n        // calculate determinant\r\n        const d = this.m_matrix[0] * this.m_matrix[4] * this.m_matrix[8] +\r\n        this.m_matrix[2] * this.m_matrix[3] * this.m_matrix[7] +\r\n        this.m_matrix[1] * this.m_matrix[5] * this.m_matrix[6] -\r\n        this.m_matrix[2] * this.m_matrix[4] * this.m_matrix[6] -\r\n        this.m_matrix[0] * this.m_matrix[5] * this.m_matrix[7] -\r\n        this.m_matrix[1] * this.m_matrix[3] * this.m_matrix[8];\r\n\r\n        const m = [this._det2(this.m_matrix[4], this.m_matrix[5], this.m_matrix[7], this.m_matrix[8]) / d, -1 * this._det2(this.m_matrix[1], this.m_matrix[2], this.m_matrix[7], this.m_matrix[8]) / d, this._det2(this.m_matrix[1], this.m_matrix[2], this.m_matrix[4], this.m_matrix[5]) / d,\r\n        -1 * this._det2(this.m_matrix[3], this.m_matrix[5], this.m_matrix[6], this.m_matrix[8]) / d, this._det2(this.m_matrix[0], this.m_matrix[2], this.m_matrix[6], this.m_matrix[8]) / d, -1 * this._det2(this.m_matrix[0], this.m_matrix[2], this.m_matrix[3], this.m_matrix[5]) / d,\r\n        this._det2(this.m_matrix[3], this.m_matrix[4], this.m_matrix[6], this.m_matrix[7]) / d, -1 * this._det2(this.m_matrix[0], this.m_matrix[1], this.m_matrix[6], this.m_matrix[7]) / d, this._det2(this.m_matrix[0], this.m_matrix[1], this.m_matrix[3], this.m_matrix[4]) / d];\r\n\r\n        let to_return = new Transform();\r\n        to_return.set_matrix_array(m);\r\n\r\n        return to_return;\r\n    }\r\n\r\n    toString(): string {\r\n        let to_return = \"\";\r\n        to_return += this.m_matrix[0] + \", \" + this.m_matrix[1] + \", \" + this.m_matrix[2] + \"\\n\";\r\n        to_return += this.m_matrix[3] + \", \" + this.m_matrix[4] + \", \" + this.m_matrix[5] + \"\\n\";\r\n        to_return += this.m_matrix[6] + \", \" + this.m_matrix[7] + \", \" + this.m_matrix[8];\r\n        return to_return;\r\n    }\r\n}","export const PLAYER_IS_STROKE = false;\r\nexport const PLAYER_STROKE_WIDTH = 1.0;\r\nexport const PLAYER_STROKE_COLOR = \"rgb(74, 193, 33)\";\r\nexport const PLAYER_IDLE_COLOR = \"rgba(91, 128, 78, 0.75)\";\r\nexport const PLAYER_MOVE_COLOR = \"rgba(91, 128, 78, 0.5)\";\r\nexport const PLAYER_SHIFT_COLOR = \"rgba(91, 128, 78, 0.25)\";\r\n\r\nexport const MONSTER_IS_STROKE = false;\r\nexport const MONSTER_STROKE_WIDTH = 1.0;\r\nexport const MONSTER_STROKE_COLOR = \"rgb(226, 55, 27)\";\r\nexport const MONSTER_IDLE_COLOR = \"rgba(196, 94, 45, 0.75)\";\r\nexport const MONSTER_MOVE_COLOR = \"rgba(196, 94, 45, 0.5)\";\r\nexport const MONSTER_SHIFT_COLOR = \"rgba(196, 94, 45, 0.25)\";\r\n\r\nexport const TILE_IS_STROKE = true;\r\nexport const TILE_STROKE_WIDTH = 0.2;\r\nexport const TILE_STROKE_COLOR = \"rgb(152, 152, 152)\";\r\nexport const TILE_WALKABLE_COLOR = \"rgb(192, 192, 192)\";\r\nexport const TILE_NONWALKABLE_COLOR = \"rgb(64, 64, 64)\";\r\n\r\nexport const CLICK_CURSOR_COLOR = \"rgba(232, 128, 51, 0.25)\";\r\nexport const CLICK_CURSOR_STROKE_COLOR = \"rgba(234, 112, 23, 0.5)\";\r\nexport const CLICK_CURSOR_STROKE_WIDTH = 1.0;\r\nexport const CLICK_CURSOR_CENTER_SIZE = 2.0;\r\n\r\nexport const MAP_COLOR = \"rgba(48, 148, 233, 0.5)\";\r\nexport const MAP_PLAYER_SIZE = 2; // in pixels\r\n\r\nexport const DEBUG_TRAJECTORY_COLOR = \"rgb(94, 178, 219)\";\r\nexport const DEBUG_TRAJECTORY_WIDTH = 1.0;\r\nexport const DEBUG_TRAJECTORY_POINT_COLOR = \"rgb(53, 129, 166)\";\r\nexport const DEBUG_TRAJECTORY_POINT_RADIUS = 2.0;\r\n\r\nexport const DEBUG_CLOSEST_PAIR_COLOR = \"rgb(82, 209, 77)\";\r\nexport const DEBUG_CLOSEST_PAIR_WIDTH = 1.0;\r\nexport const DEBUG_RECT_LINE_WIDTH = 1.0;\r\nexport const DEBUG_VISIBILITY_RECT_COLOR = \"rgb(111, 156, 227)\";\r\nexport const DEBUG_NEIGHBORHOOD_RECT_COLOR = \"rgb(134, 227, 111)\";\r\n\r\n// each cooldawn drawn as circle arc\r\nexport const COOLDAWN_SHIFT_COLOR = \"rgba(255, 255, 255, 0.25)\";\r\nexport const COOLDAWN_SHIFT_WIDTH = 2.0;\r\nexport const COOLDAWN_SHIFT_RADIUS = 6.0;\r\n","import { MAP_TILE_PIXELS_SIZES } from \"../constants\";\r\nimport { Transform } from \"../transform\";\r\nimport { MAP_COLOR, MAP_PLAYER_SIZE, PLAYER_IDLE_COLOR } from \"../client_data_canvas/visual_styles\";\r\n\r\nexport class SceneMap {\r\n    m_context: CanvasRenderingContext2D;\r\n    m_wtc_tfm: Transform;\r\n    m_vertices: Float32Array;\r\n    m_polygons: Int32Array;\r\n    m_sizes: Int32Array;\r\n\r\n    m_canvas_width: number;\r\n    m_canvas_height: number;\r\n    m_tile_size: number;\r\n\r\n    m_active: boolean = false;\r\n    m_tfm: Transform = new Transform();\r\n    m_scale: number = 0.0;\r\n    m_scale_index: number = 0;\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, \r\n                in_wtc_tfm: Transform,\r\n                in_tile_size: number,\r\n                in_vertices: Float32Array, \r\n                in_polygons: Int32Array, \r\n                in_sizes: Int32Array) {\r\n        this.m_context = in_ctxt;\r\n        this.m_wtc_tfm = in_wtc_tfm;\r\n\r\n        this.m_canvas_width = in_ctxt.canvas.width;\r\n        this.m_canvas_height = in_ctxt.canvas.height;\r\n\r\n        this.m_tile_size = in_tile_size;\r\n\r\n        this.m_vertices = in_vertices;\r\n        this.m_polygons = in_polygons;\r\n        this.m_sizes = in_sizes;\r\n\r\n        this.m_scale_index = Math.floor(MAP_TILE_PIXELS_SIZES.length / 2);\r\n        this._update_scale();\r\n    }\r\n\r\n    private _update_scale() {\r\n        this.m_scale = MAP_TILE_PIXELS_SIZES[this.m_scale_index] / this.m_tile_size;\r\n    }\r\n\r\n    toggle_active() {\r\n        this.m_active = !this.m_active;\r\n    }\r\n\r\n    scale_up() {\r\n        if(this.m_active) {\r\n            this.m_scale_index++;\r\n            if(this.m_scale_index == MAP_TILE_PIXELS_SIZES.length) {\r\n                this.m_scale_index--;\r\n            }\r\n            this._update_scale();\r\n        }\r\n    }\r\n\r\n    scale_down() {\r\n        if(this.m_active) {\r\n            this.m_scale_index--;\r\n            if(this.m_scale_index == -1) {\r\n                this.m_scale_index++;\r\n            }\r\n            this._update_scale();\r\n        }\r\n    }\r\n\r\n    draw(): void {\r\n        this.m_context.clearRect(0, 0, this.m_canvas_width, this.m_canvas_height);\r\n        \r\n        if(this.m_active) {\r\n            // get player world position from world-to-canvas transform\r\n            const ctw_tfm = this.m_wtc_tfm.inverse();\r\n            const pos = ctw_tfm.multiply(this.m_canvas_width / 2, this.m_canvas_height / 2);\r\n\r\n            this.m_tfm.set_uniform_scale(this.m_scale);\r\n            this.m_tfm.set_translation(this.m_canvas_width / 2 - pos[0] * this.m_scale, this.m_canvas_height / 2 - pos[1] * this.m_scale);\r\n\r\n            this.m_context.save();\r\n            this.m_context.fillStyle = MAP_COLOR;\r\n            this.m_context.strokeStyle = MAP_COLOR;\r\n            this.m_context.lineWidth = 0.125;\r\n            let shift = 0;\r\n            for(let i = 0; i < this.m_sizes.length; i++) {\r\n                // i - polygon index\r\n                const s = this.m_sizes[i];  // polygon size\r\n                \r\n                // start new poligon\r\n                this.m_context.beginPath();\r\n                // get polygon corners\r\n                for(let j = 0; j < s; j++) {\r\n                    const v = this.m_polygons[shift + j];  // v - vertex index\r\n                    const x = this.m_vertices[3*v];\r\n                    const y = this.m_vertices[3*v + 2];  // skip second coordinate, it always equal to 0\r\n\r\n                    const c_position = this.m_tfm.multiply(x, y);\r\n                    if(j == 0) {  // start polygon\r\n                        this.m_context.moveTo(c_position[0], c_position[1]);\r\n                    } else {  // continue polygon\r\n                        this.m_context.lineTo(c_position[0], c_position[1]);\r\n                    }\r\n                }\r\n                // finish the polygon\r\n                this.m_context.fill();\r\n                this.m_context.stroke();\r\n\r\n                shift += s;\r\n            }\r\n\r\n            // next draw the player at the map\r\n            this.m_context.beginPath();\r\n            this.m_context.fillStyle = PLAYER_IDLE_COLOR;\r\n            const c_center = this.m_tfm.multiply(pos[0], pos[1]);\r\n\r\n            this.m_context.arc(c_center[0], c_center[1], MAP_PLAYER_SIZE, 0, 2 * Math.PI);\r\n            this.m_context.fill();\r\n            this.m_context.restore();\r\n        }\r\n    }\r\n}","import { Transform } from \"../transform\";\r\n\r\nexport class SceneItem {\r\n    m_tfm: Transform = new Transform();  // in-scene transform (store position, rotation and scale)\r\n\r\n    constructor() {\r\n\r\n    }\r\n    \r\n    set_position(x: number, y: number) {\r\n        this.m_tfm.set_translation(x, y);\r\n    }\r\n\r\n    set_angle(angle: number) {\r\n        this.m_tfm.set_rotation(angle);\r\n    }\r\n\r\n    get_tfm(): Transform {\r\n        return this.m_tfm;\r\n    }\r\n\r\n    get_translation(): number[] {\r\n        return this.m_tfm.translation();\r\n    }\r\n}","import { CLICK_CURSOR_TIME } from \"../constants\";\r\nimport { SceneItem } from \"./scene_item\";\r\n\r\nexport class ClickCursor extends SceneItem {\r\n    m_active: boolean = false;\r\n\r\n    m_time_accum: number = 0.0;\r\n    m_life_time: number = 0.0;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.m_life_time = CLICK_CURSOR_TIME;\r\n    }\r\n\r\n    activate(in_x: number, in_y: number) {\r\n        this.m_tfm.set_translation(in_x, in_y);\r\n\r\n        this.m_time_accum = 0.0;\r\n\r\n        this.m_active = true;\r\n    }\r\n\r\n    get_active(): boolean {\r\n        return this.m_active;\r\n    }\r\n\r\n    get_translation(): number[] {\r\n        return this.m_tfm.translation();\r\n    }\r\n\r\n    update(dt: number) {\r\n        if(this.m_active) {\r\n            this.m_time_accum += 1000 * dt;\r\n\r\n            if(this.m_time_accum >= this.m_life_time) {\r\n                this.deactivate();\r\n            }\r\n        }\r\n    }\r\n\r\n    // return the value from [0, 1], measure the cursor life time\r\n    get_proportion(): number {\r\n        return this.m_time_accum / this.m_life_time;\r\n    }\r\n\r\n    deactivate() {\r\n        this.m_active = false;\r\n    }\r\n}","import { SceneItem } from \"./scene_item\";\r\n\r\nexport class SceneTile extends SceneItem {\r\n    m_tile_size: number = 0.0;\r\n    m_type: number = 1;\r\n\r\n    constructor(pos_x: number, pos_y: number, tile_size: number, type: number) {\r\n        super();\r\n\r\n        this.set_position(pos_x, pos_y);\r\n\r\n        this.m_tile_size = tile_size;\r\n        this.m_type = type;\r\n    }\r\n\r\n    get_tile_size(): number {\r\n        return this.m_tile_size;\r\n    }\r\n\r\n    get_type(): number {\r\n        return this.m_type;\r\n    }\r\n}","import { MOVE_STATUS } from \"../constants\";\r\nimport { Transform } from \"../transform\";\r\nimport { SceneItem } from \"./scene_item\";\r\n\r\n// base class for player, monster and other person stuff\r\nexport class Person extends SceneItem {\r\n    private m_entity_id: number = -1;\r\n    private m_radius: number = 0.0;\r\n    private m_move_status: MOVE_STATUS = MOVE_STATUS.NONE;\r\n\r\n    constructor(in_id: number) {\r\n        super();\r\n\r\n        this.m_entity_id = in_id;\r\n    }\r\n\r\n    set_id(in_id: number) {\r\n        this.m_entity_id = in_id;\r\n    }\r\n\r\n    get_id(): number {\r\n        return this.m_entity_id;\r\n    }\r\n\r\n    set_radius(radius: number) {\r\n        this.m_radius = radius;\r\n    }\r\n\r\n    set_move(in_move: MOVE_STATUS) {\r\n        this.m_move_status = in_move;\r\n    }\r\n\r\n    get_move(): MOVE_STATUS {\r\n        return this.m_move_status;\r\n    }\r\n\r\n    get_radius(): number {\r\n        return this.m_radius;\r\n    }\r\n}","import { Person } from \"./person\";\r\n\r\nexport class Player extends Person {\r\n    constructor(in_id: number) {\r\n        super(in_id);\r\n    }\r\n}","import { Person } from \"./person\";\r\n\r\nexport class Monster extends Person {\r\n    constructor(in_id: number) {\r\n        super(in_id);\r\n    }\r\n}","import { COOLDAWN } from \"../constants\"\r\n\r\n// one class to contaoll colldawns of all entities in the scene\r\nexport class Cooldawn {\r\n    // key - entity id\r\n    // values - map from cooldawn type to the pair (total time, elapsed time)\r\n    private m_cooldawns: Map<number, Map<COOLDAWN, [number, number]>> = new Map<number, Map<COOLDAWN, [number, number]>>();\r\n\r\n    add_entity(id: number) {\r\n        this.m_cooldawns.set(id, new Map<COOLDAWN, [number, number]>);\r\n    }\r\n\r\n    remove_entity(id: number) {\r\n        this.m_cooldawns.delete(id);\r\n    }\r\n\r\n    start_cooldawn(entity: number, cooldawn_id: COOLDAWN, total_time: number) {\r\n        this.m_cooldawns.get(entity)?.set(cooldawn_id, [total_time, 0.0]);\r\n    }\r\n\r\n    update(dt: number) {\r\n        //console.log(this.m_cooldawns.size, this.m_cooldawns);\r\n        this.m_cooldawns.forEach((c_map: Map<COOLDAWN, [number, number]>, entity: number) => {\r\n            c_map.forEach((times: [number, number], id: COOLDAWN) => {\r\n                times[1] += dt;\r\n                if (times[1] >= times[0]) {\r\n                    c_map.delete(id);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    get_cooldawns(in_entity: number): Map<COOLDAWN, [number, number]> {\r\n        const to_return = this.m_cooldawns.get(in_entity);\r\n        if (to_return) {\r\n            return to_return;\r\n        }\r\n        return new Map<COOLDAWN, [number, number]>();\r\n    }\r\n}","import { __Internref18 } from \"../../wasm/build/game_api\";\r\nimport { ClickCursor } from \"./click_cursor\";\r\nimport { COOLDAWN, FIRST_MOUSE_CLICK_DELTA, MOVE_STATUS, OTHER_MOUSE_CLICK_DELTA } from \"../constants\";\r\nimport { SceneTile } from \"./scene_tile\";\r\nimport { Player } from \"./player\";\r\nimport { Monster } from \"./monster\";\r\nimport { Cooldawn } from \"./cooldawn\";\r\n\r\n// the Scene instance contains data of objects in the game\r\nexport class Scene {\r\n    private m_level_width: number = 0;\r\n    private m_level_height: number = 0;\r\n    private m_level_tile_size: number = 0.0;\r\n\r\n    private m_last_click_time: number = 0;\r\n    private m_click_number: number = 0;\r\n    private m_click_cursor: ClickCursor = new ClickCursor();\r\n    private m_level_tiles: Map<number, SceneTile> = new Map<number, SceneTile>();\r\n    private m_player: Player = new Player(0);\r\n    private m_player_id: number = 0;\r\n    private m_monsters: Map<number, Monster> = new Map<number, Monster>();\r\n    private m_cooldawns: Cooldawn = new Cooldawn();\r\n\r\n    constructor(level_width: number,\r\n                level_height: number,\r\n                level_tile_size: number) {\r\n        this.m_level_width = level_width;\r\n        this.m_level_height = level_height;\r\n        this.m_level_tile_size = level_tile_size;\r\n    }\r\n\r\n    // when we click into canvas, we should add to the scene cursor object\r\n    // input are world coordinates of the click position\r\n    // return true if the point in the walkable area\r\n    click_position(wasm_module: any, game_ptr: __Internref18, in_x: number, in_y: number, force: boolean = false): boolean {\r\n        const current_time = performance.now();\r\n        if(force || current_time - this.m_last_click_time > (this.m_click_number == 1 ? FIRST_MOUSE_CLICK_DELTA : OTHER_MOUSE_CLICK_DELTA)) {\r\n            this.m_last_click_time = current_time;\r\n            this.m_click_number += 1;\r\n            if(this.m_click_number > 2) {\r\n                this.m_click_number = 2;\r\n            }\r\n            // call to move the player\r\n            const is_define: boolean = wasm_module.game_client_point(game_ptr, in_x, in_y);\r\n\r\n            if(force && is_define) {\r\n                this.m_click_cursor.activate(in_x, in_y);\r\n            }\r\n\r\n            return is_define;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // call when release the mouse\r\n    reset_click() {\r\n        this.m_click_number = 0;\r\n    }\r\n\r\n    // may call from client to draw the cursor on the canvas\r\n    get_click_cursor(): ClickCursor {\r\n        return this.m_click_cursor;\r\n    }\r\n\r\n    get_cooldawns(): Cooldawn {\r\n        return this.m_cooldawns;\r\n    }\r\n\r\n    get_person_cooldawns(entity: number): Map<COOLDAWN, [number, number]> {\r\n        return this.m_cooldawns.get_cooldawns(entity);\r\n    }\r\n\r\n    get_level_tiles(): Map<number, SceneTile> {\r\n        return this.m_level_tiles;\r\n    }\r\n\r\n    get_player(): Player {\r\n        return this.m_player;\r\n    }\r\n\r\n    get_monsters(): Map<number, Monster> {\r\n        return this.m_monsters;\r\n    }\r\n\r\n    delete_tile(index: number) {\r\n        if(this.m_level_tiles.has(index)) {\r\n            this.m_level_tiles.delete(index);\r\n        }\r\n    }\r\n\r\n    create_tile(pos_x: number, pos_y: number, index: number, type: number) {\r\n        this.m_level_tiles.set(index, new SceneTile(pos_x, \r\n                                                    pos_y,\r\n                                                    this.m_level_tile_size,\r\n                                                    type));\r\n    }\r\n\r\n    // called when we create the player entity\r\n    set_player_id(in_id: number) {\r\n        this.m_player_id = in_id;\r\n        this.m_player.set_id(in_id);\r\n        this.m_cooldawns.add_entity(in_id);\r\n    }\r\n\r\n    is_player(in_id: number): boolean {\r\n        return this.m_player_id == in_id;\r\n    }\r\n\r\n    set_player_radius(radius: number) {\r\n        this.m_player.set_radius(radius);\r\n    }\r\n\r\n    set_entity_position(entity: number, x: number, y: number) {\r\n        if (entity == this.m_player_id) {\r\n            this.m_player.set_position(x, y);\r\n        } else {\r\n            if(this.m_monsters.has(entity)) {\r\n                const monster = this.m_monsters.get(entity);\r\n                if(monster) {\r\n                    monster.set_position(x, y);\r\n                }\r\n            } else {\r\n                const monster = new Monster(entity);\r\n                monster.set_position(x, y);\r\n    \r\n                this.m_monsters.set(entity, monster);\r\n            }\r\n        }\r\n    }\r\n\r\n    set_monster_radius(entity: number, radius: number) {\r\n        if(this.m_monsters.has(entity)) {\r\n            const monster = this.m_monsters.get(entity);\r\n            if(monster) {\r\n                monster.set_radius(radius);\r\n            }\r\n        } else {\r\n            const monster = new Monster(entity);\r\n            monster.set_radius(radius);\r\n            this.m_cooldawns.add_entity(entity);\r\n\r\n            this.m_monsters.set(entity, monster);\r\n        }\r\n    }\r\n\r\n    set_entity_angle(entity: number, angle: number) {\r\n        if (entity == this.m_player_id) {\r\n            this.m_player.set_angle(angle);\r\n        } else {\r\n            if(this.m_monsters.has(entity)) {\r\n                const monster = this.m_monsters.get(entity);\r\n                if(monster) {\r\n                    monster.set_angle(angle);\r\n                }\r\n            } else {\r\n                const monster = new Monster(entity);\r\n                monster.set_angle(angle);\r\n                this.m_cooldawns.add_entity(entity);\r\n    \r\n                this.m_monsters.set(entity, monster);\r\n            }\r\n        }\r\n    }\r\n\r\n    set_entity_move(entity: number, move_status: MOVE_STATUS) {\r\n        if (entity == this.m_player_id) {\r\n            this.m_player.set_move(move_status);\r\n        }\r\n        else {\r\n            if(this.m_monsters.has(entity)) {\r\n                const monster = this.m_monsters.get(entity);\r\n                if(monster) {\r\n                    monster.set_move(move_status);\r\n                }\r\n            } else {\r\n                const monster = new Monster(entity);\r\n                monster.set_move(move_status);\r\n                this.m_cooldawns.add_entity(entity);\r\n    \r\n                this.m_monsters.set(entity, monster);\r\n            }\r\n        }\r\n    }\r\n\r\n    remove_monster(entity: number) {\r\n        if(this.m_monsters.has(entity)) {\r\n            this.m_monsters.delete(entity);\r\n        }\r\n\r\n        this.m_cooldawns.remove_entity(entity);\r\n    }\r\n}","export function cursor_coordinates(canvas: HTMLCanvasElement, mouse_event: MouseEvent): number[] {\r\n    const canvas_rect = canvas.getBoundingClientRect()\r\n    return [mouse_event.clientX - canvas_rect.left, mouse_event.clientY - canvas_rect.top];\r\n}","export class UIElement {\r\n    \r\n}","import { UIElement } from \"./ui_element\";\r\n\r\nexport class UIHTMLElement extends UIElement {\r\n    m_html_element: HTMLElement | null;\r\n\r\n    constructor(html_id: string) {\r\n        super();\r\n\r\n        this.m_html_element = document.getElementById(html_id);\r\n    }\r\n\r\n    show() {\r\n        if(this.m_html_element) {\r\n            this.m_html_element.style.visibility = \"visible\";\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        if(this.m_html_element) {\r\n            this.m_html_element.style.visibility = \"hidden\";\r\n        }\r\n    }\r\n}","import { UIHTMLElement } from \"./ui_html_element\";\r\n\r\nexport class UIHTMLTextElement extends UIHTMLElement {\r\n    constructor(html_id: string) {\r\n        super(html_id);\r\n    }\r\n\r\n    set_text(text: string) {\r\n        if(this.m_html_element) {\r\n            this.m_html_element.innerText = text;\r\n        }\r\n    }\r\n}","import { UIHTMLTextElement } from \"./ui_html_text_element\";\r\n\r\nexport class FPSCounter extends UIHTMLTextElement {\r\n    m_accumulator: number = 0.0;\r\n    m_ticks: number = 0;\r\n    m_value: number = 0.0;\r\n\r\n    constructor(html_id: string) {\r\n        super(html_id);\r\n\r\n\r\n    }\r\n\r\n    update(dt: number) {\r\n        // update fps counter\r\n        // calculate fps\r\n        this.m_accumulator += dt;\r\n        this.m_ticks += 1;\r\n\r\n        if(this.m_accumulator > 2.0) {\r\n            this.m_value = this.m_ticks / this.m_accumulator;\r\n\r\n            // reset fps value\r\n            this.m_accumulator = 0.0;\r\n            this.m_ticks = 0;\r\n\r\n            this.set_text((Math.round(this.m_value * 100) / 100).toFixed(2).toString());\r\n        }\r\n    }\r\n}","import { UIHTMLTextElement } from \"./ui_html_text_element\";\r\n\r\nexport class UIItems {\r\n    m_total_element: UIHTMLTextElement;\r\n    m_visible_element: UIHTMLTextElement;\r\n\r\n    constructor(total_id: string, visible_id: string) {\r\n        this.m_total_element = new UIHTMLTextElement(total_id);\r\n        this.m_visible_element = new UIHTMLTextElement(visible_id);\r\n    }\r\n\r\n    update_values(total: number, visible: number) {\r\n        if(this.m_total_element) {\r\n            this.m_total_element.set_text(total.toString());\r\n        }\r\n\r\n        if(this.m_visible_element) {\r\n            this.m_visible_element.set_text(visible.toString());\r\n        }\r\n    }\r\n}","import { FPSCounter } from \"./ui_fps\";\r\nimport { UIHTMLElement } from \"./ui_html_element\";\r\nimport { UIItems } from \"./ui_items\";\r\n\r\nexport class GameUI {\r\n    m_active: boolean = true;\r\n\r\n    m_fps: FPSCounter;\r\n    m_items: UIItems;\r\n    m_pause_screen: UIHTMLElement;\r\n    m_loading: UIHTMLElement;\r\n\r\n    assign_fps_element(html_id: string) {\r\n        this.m_fps = new FPSCounter(html_id);\r\n    }\r\n\r\n    assign_count_elements(total_id: string, visible_id: string) {\r\n        this.m_items = new UIItems(total_id, visible_id);\r\n    }\r\n\r\n    assign_pause_screen(html_id: string) {\r\n        this.m_pause_screen = new UIHTMLElement(html_id);\r\n    }\r\n\r\n    assign_loading(html_id: string) {\r\n        this.m_loading = new UIHTMLElement(html_id);\r\n    }\r\n\r\n    update_count_values(total: number, visible: number) {\r\n        if(this.m_items) {\r\n            this.m_items.update_values(total, visible);\r\n        }\r\n    }\r\n\r\n    on_pause() {\r\n        this.m_pause_screen.show();\r\n    }\r\n\r\n    off_pause() {\r\n        this.m_pause_screen.hide();\r\n    }\r\n\r\n    loading_hide() {\r\n        this.m_loading.hide();\r\n    }\r\n\r\n    update(dt: number) {\r\n        if(this.m_active) {\r\n            this.m_fps.update(dt);\r\n        }\r\n    }\r\n}","import { __Internref18, instantiate } from \"../wasm/build/game_api\";\r\nimport { SceneMap } from \"./scene/scene_map\";\r\nimport { Scene } from \"./scene/scene\";\r\nimport { Transform } from \"./transform\";\r\nimport { ACTION, COOLDAWN, MOVE_STATUS, TILE_PIXELS_SIZE } from \"./constants\";\r\nimport { cursor_coordinates } from \"./utilities\";\r\nimport { GameUI } from \"./ui/ui\";\r\n\r\n// base class for client of the game\r\n// it implement functionallity for connecting between wasm module (the server) and client IO\r\n// particluar graphic backend should use this base class\r\nexport abstract class ClientBase {\r\n    m_game_ptr: __Internref18;\r\n    m_scene_canvas: HTMLCanvasElement;\r\n    m_scene_ctx: CanvasRenderingContext2D;\r\n\r\n    m_map_canvas: HTMLCanvasElement;\r\n    m_map_ctx: CanvasRenderingContext2D;\r\n\r\n    m_scene: Scene;\r\n\r\n    m_ui: GameUI;\r\n\r\n    m_level_width: number;\r\n    m_level_height: number;\r\n    m_level_tile_size: number;\r\n\r\n    m_current_time: number;\r\n    m_module: any = undefined;\r\n    m_is_start: boolean = false;\r\n\r\n    m_map: SceneMap;\r\n    m_wtc_tfm: Transform = new Transform();\r\n    m_wtc_scale: number = 1.0;\r\n    m_is_mouse_press: boolean = false;\r\n    m_mouse_event: MouseEvent;\r\n\r\n    m_total_level_entities: number = 0;\r\n\r\n    m_is_game_active: boolean = true;\r\n    m_is_pause: boolean = false;  // turn on only when pause the game manualy\r\n\r\n    // in start method current client implementation should start render loop\r\n    // this loop should at first call update method, and only then process other stuff\r\n    abstract start(): void;\r\n    // input is coordinates on the screen, output is world coordinates of the point\r\n    // conversation depends on the client implementation\r\n    abstract point_to_world(in_x: number, in_y: number) : number[];\r\n    // mouse_click can be used for inistantiate the shape for the cursor\r\n    // input is coordinates on the canvas and corresponding coordinates on the world\r\n    abstract mouse_click(inc_x: number, inc_y: number, inw_x: number, inw_y: number): void;\r\n    // when we should delete the tile from the scene, call this method to delete the shape from the client\r\n    abstract scene_tile_delete(index: number): void;\r\n    // the same for create new tile\r\n    // pos_x and pos_y world coordinates of the tile\r\n    abstract scene_tile_create(pos_x: number, pos_y: number, index: number, type: number): void;\r\n    // define player methods called after the module update player properties\r\n    // it should be used in the client to update player shape\r\n    abstract scene_define_player_changes(pos_x: number, pos_y: number, angle: number, move_status: MOVE_STATUS): void;\r\n    abstract scene_create_player(radius: number): void;\r\n    abstract scene_define_entity_changes(entity: number, pos_x: number, pos_y: number, angle: number, move_status: MOVE_STATUS): void;\r\n    abstract scene_create_monster(entity: number, radius: number): void;\r\n    abstract scene_remove_monster(entity: number): void;\r\n    abstract scene_entity_start_action(entity: number, action_id: ACTION): void;\r\n    abstract scene_entity_finish_action(entity: number, action_id: ACTION): void;\r\n    abstract scene_entity_start_cooldawn(entity: number, cooldawn_id: COOLDAWN, time: number): void;\r\n    // debug callbacks\r\n    // if debug is off, then these callbacks are not required\r\n    // it never called from the module\r\n    abstract debug_entity_trajectory(entity: number, coordinates: Float32Array): void;\r\n    abstract debug_close_entity_pair(entity_a: number, a_pos_x: number, a_pos_y: number, entity_b: number, b_pos_x: number, b_pos_y: number): void;\r\n    abstract debug_player_visible_quad(start_x: number, start_y: number, end_x: number, end_y: number): void;\r\n    abstract debug_player_neighborhood_quad(start_x: number, start_y: number, end_x: number, end_y: number): void;\r\n\r\n    constructor() {\r\n        // define host functions for external calls from the wasm module\r\n        globalThis.host = {\r\n            define_level: this.define_level.bind(this),\r\n            define_navmesh: this.define_navmesh.bind(this),\r\n            define_total_tiles: this.define_total_tiles.bind(this),\r\n            tile_delete: this.tile_delete.bind(this),\r\n            tile_create: this.tile_create.bind(this),\r\n            create_player: this.create_player.bind(this),\r\n            create_monster: this.create_monster.bind(this),\r\n            define_entity_changes: this.define_entity_changes.bind(this),\r\n            remove_monster: this.remove_monster.bind(this),\r\n            define_total_update_entities: this.define_total_update_entities.bind(this),\r\n            entity_start_action: this.entity_start_action.bind(this),\r\n            entity_finish_action: this.entity_finish_action.bind(this),\r\n            entity_start_cooldawn: this.entity_start_cooldawn.bind(this),\r\n            debug_entity_walk_path: this.debug_entity_walk_path.bind(this),\r\n            debug_close_entity: this.debug_close_entity.bind(this),\r\n            debug_visible_quad: this.debug_visible_quad.bind(this),\r\n            debug_neighborhood_quad: this.debug_neighborhood_quad.bind(this)\r\n        };\r\n\r\n        // setup ui\r\n        this.m_ui = new GameUI();\r\n        this.m_ui.assign_fps_element(\"fps\");\r\n        this.m_ui.assign_count_elements(\"level_count\", \"visible_count\");\r\n        this.m_ui.assign_pause_screen(\"pause\");\r\n        this.m_ui.assign_loading(\"loading\");\r\n\r\n        // get canvas elements from html\r\n        // for scene\r\n        this.m_scene_canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n        this.m_scene_ctx = this.m_scene_canvas.getContext(\"2d\")!;\r\n\r\n        // and for map\r\n        this.m_map_canvas = document.getElementById(\"map_canvas\") as HTMLCanvasElement;\r\n        this.m_map_ctx = this.m_map_canvas.getContext(\"2d\")!;\r\n\r\n        // disable map canvas mouse interaction\r\n        this.m_map_canvas.style.pointerEvents = \"none\";\r\n\r\n        // store the current time\r\n        this.m_current_time = performance.now();\r\n\r\n        // disable right click menu\r\n        window.addEventListener(\"contextmenu\", event => event.preventDefault());\r\n\r\n        // setup event\r\n        const local_this = this;\r\n        // keyboard\r\n        document.onkeydown = function(event) {\r\n            local_this.key_event(event.key);\r\n\r\n            // stop scrolling the page by the space\r\n            // nad also other space actions\r\n            return !(event.key == \" \");\r\n        }\r\n\r\n        // mouse click, release and move\r\n        this.m_scene_canvas.addEventListener(\"mousedown\", function(event) {\r\n            local_this.mouse_press_event(event);\r\n        });\r\n        this.m_scene_canvas.addEventListener(\"mouseup\", function(event) {\r\n            local_this.mouse_release_event(event);\r\n        });\r\n        document.onmousemove = function(event) {\r\n            local_this.m_mouse_event = event;\r\n        }\r\n        document.addEventListener(\"visibilitychange\" , function() {\r\n            local_this.visibilitychange_event();\r\n        });\r\n\r\n        // finally, load the wasm module\r\n        fetch(\"/build/game_api.wasm\")\r\n            .then((response) => WebAssembly.compileStreaming(response))\r\n            .then((result) => instantiate(result, { env: {}})\r\n            .then((module) => {\r\n                local_this.m_module = module;\r\n                console.log(\"finish to load the module:\", (performance.now() - local_this.m_current_time) / 1000.0, \"seconds\");\r\n                local_this.m_current_time = performance.now();\r\n\r\n                // create settings object\r\n                const settings_ptr = module.create_settings();\r\n                // change default settings\r\n                // select random seed\r\n                const seed = Math.floor(Math.random() * 4294967295);\r\n                // controllabel seed ↓ for test\r\n                // module.settings_set_seed(settings_ptr, 12);\r\n                module.settings_set_rvo_time_horizon(settings_ptr, 1.0);\r\n                module.settings_set_neighborhood_quad_size(settings_ptr, 1.0);\r\n                module.settings_set_generate(settings_ptr,\r\n                    22,  // level size\r\n                    2, 4,  // min and max room size\r\n                    10  // the number of rooms\r\n                );\r\n                // use these settings ↓ for developement\r\n                // module.settings_set_generate(settings_ptr, 12, 3, 4, 1);\r\n\r\n                // activate debug info\r\n                module.settings_set_use_debug(settings_ptr, false);\r\n                module.settings_set_debug_flags(settings_ptr, true, true, true, true);\r\n                module.settings_set_snap_to_navmesh(settings_ptr, true);\r\n                module.settings_set_use_rvo(settings_ptr, true);\r\n                module.settings_set_path_recalculate_time(settings_ptr, 1.0);\r\n                module.settings_set_velocity_boundary_control(settings_ptr, true);\r\n                module.settings_set_player_fast_shift(settings_ptr, 2.0, 5.0, 0.5);\r\n                \r\n                // create the game\r\n                // this method calls some callbcks:\r\n                // - define_level\r\n                // - define_total_tiles\r\n                // - define_navmesh\r\n                local_this.m_game_ptr = module.create_game(settings_ptr);\r\n\r\n                console.log(\"generate the level:\", (performance.now() - local_this.m_current_time) / 1000.0, \"seconds\");\r\n                local_this.m_current_time = performance.now();\r\n\r\n                // call client start method\r\n                local_this.start();\r\n                local_this.m_is_start = true;\r\n\r\n                // after start disable loading screen\r\n                local_this.m_ui.off_pause();\r\n                local_this.m_ui.loading_hide();\r\n        }));\r\n    }\r\n\r\n    visibilitychange_event() {\r\n        if (document.hidden) {\r\n            this.deactivate();\r\n        } else {\r\n            if(!this.m_is_pause) {\r\n                this.activate();\r\n            }\r\n        }\r\n    }\r\n\r\n    activate() {\r\n        this.m_is_game_active = true;\r\n        this.m_current_time = performance.now();\r\n\r\n        this.m_ui.off_pause();\r\n    }\r\n\r\n    deactivate() {\r\n        this.m_is_game_active = false;\r\n\r\n        this.m_ui.on_pause();\r\n    }\r\n\r\n    toggle_activate() {\r\n        if(this.m_is_game_active) {\r\n            this.deactivate();\r\n            this.m_is_pause = true;\r\n        } else {\r\n            this.activate();\r\n            this.m_is_pause = false;\r\n        }\r\n    }\r\n\r\n    mouse_press_event(event: MouseEvent) {\r\n        this.m_mouse_event = event;\r\n        if(this.m_is_start && this.m_is_game_active) {\r\n            this.m_is_mouse_press = true;\r\n    \r\n            const c = cursor_coordinates(this.m_scene_canvas, event);\r\n            const c_world = this.point_to_world(c[0], c[1]);\r\n            const is_defined = this.m_scene.click_position(this.m_module, this.m_game_ptr, c_world[0], c_world[1], true);\r\n            // also call click method from the client implementation\r\n            if(is_defined) {\r\n                // nothing to do if we click outside the walkable are\r\n                this.mouse_click(c[0], c[1], c_world[0], c_world[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    mouse_release_event(event: MouseEvent) {\r\n        if(this.m_is_start) {\r\n            this.m_is_mouse_press = false;\r\n            this.m_scene.reset_click();\r\n        }\r\n    }\r\n\r\n    key_event(key: string) {\r\n        if(this.m_is_start) {\r\n            if(key == \"Escape\") {\r\n                // pause the game\r\n                this.toggle_activate();\r\n            } else if(this.m_is_game_active) {\r\n                // read all other keys only when the game is active\r\n                if(key == \"s\") {\r\n                    // add monster\r\n                    this.m_module.game_add_monsters(this.m_game_ptr);\r\n                } else if(key == \"m\") {\r\n                    this.m_map.toggle_active();\r\n                } else if(key == \"+\") {\r\n                    this.m_map.scale_up();\r\n                } else if(key == \"-\") {\r\n                    this.m_map.scale_down();\r\n                } else if (key == \" \") {\r\n                    const c = cursor_coordinates(this.m_scene_canvas, this.m_mouse_event);\r\n                    const c_world = this.point_to_world(c[0], c[1]);\r\n                    this.m_module.game_client_shift(this.m_game_ptr, c_world[0], c_world[1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    update() {\r\n        if (this.m_is_game_active) {\r\n            // update game only when tab is active\r\n            // in non-active tab the delta time is nearly 2 seconds\r\n            // it's too big value for correct behaviour\r\n            if(this.m_is_mouse_press && this.m_mouse_event && this.m_scene_canvas) {\r\n                const c = cursor_coordinates(this.m_scene_canvas, this.m_mouse_event);\r\n                const c_world = this.point_to_world(c[0], c[1]);\r\n                this.m_scene.click_position(this.m_module, this.m_game_ptr, c_world[0], c_world[1]);\r\n            }\r\n\r\n            // read the curent time\r\n            const time = performance.now();\r\n            // calculate delta time\r\n            const dt = (time - this.m_current_time) / 1000.0;\r\n            // write the current time\r\n            this.m_current_time = time;\r\n    \r\n            // update the game\r\n            if(this.m_module) {\r\n                // this method calls many callbacks in the current host\r\n                // it transfer data about changed entities\r\n                this.m_module.game_update(this.m_game_ptr, dt);\r\n            }\r\n\r\n            this.m_scene.get_cooldawns().update(dt);\r\n            this.m_scene.get_click_cursor().update(dt);\r\n\r\n            this.m_ui.update(dt);\r\n            this.m_ui.update_count_values(this.m_total_level_entities, this.m_scene.get_monsters().size);\r\n        }\r\n\r\n        // draw the map, if we need\r\n        this.draw_map();\r\n    }\r\n\r\n    draw_map() {\r\n        if(this.m_map) {\r\n            this.m_map.draw();\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------------\r\n    // ----------------callbacks from the wasm side--------------------------\r\n\r\n    define_level(level_width: number, level_height: number, tile_size: number) {\r\n        this.m_level_width = level_width;\r\n        this.m_level_height = level_height;\r\n        this.m_level_tile_size = tile_size;\r\n\r\n        // create the scene\r\n        this.m_scene = new Scene(this.m_level_width,\r\n            this.m_level_height,\r\n            this.m_level_tile_size);\r\n        \r\n        this.m_wtc_scale = TILE_PIXELS_SIZE / this.m_level_tile_size;\r\n        this.m_wtc_tfm.set_uniform_scale(this.m_wtc_scale);\r\n    }\r\n\r\n    define_navmesh(vertices: Float32Array, polygons: Int32Array, sizes: Int32Array) {\r\n        // create the scene minimap\r\n        // this world-to-canvas transform is universal\r\n        // it can be used for different canvases and different purposes\r\n        // when the game change the player position, we should update this transform\r\n        this.m_map = new SceneMap(this.m_map_ctx,\r\n            this.m_wtc_tfm,\r\n            this.m_level_tile_size, \r\n            vertices, \r\n            polygons, \r\n            sizes);\r\n    }\r\n\r\n    define_total_tiles(total_tiles: number) {\r\n        // for info only\r\n        // nothing to do here\r\n    }\r\n\r\n    tile_delete(index: number) {\r\n        this.m_scene.delete_tile(index);\r\n        this.scene_tile_delete(index);\r\n    }\r\n\r\n    tile_create(x: number, y: number, index: number, type: number) {\r\n        const pos_x = x * this.m_level_tile_size;\r\n        const pos_y = y * this.m_level_tile_size;\r\n\r\n        this.m_scene.create_tile(pos_x, pos_y, index, type);\r\n        this.scene_tile_create(pos_x, pos_y, index, type);\r\n    }\r\n\r\n    create_player(id: number, radius: number) {\r\n        this.m_scene.set_player_id(id);\r\n        this.m_scene.set_player_radius(radius);\r\n        this.scene_create_player(radius);\r\n    }\r\n\r\n    create_monster(entity: number, radius: number) {\r\n        this.m_scene.set_monster_radius(entity, radius);\r\n        this.scene_create_monster(entity, radius);\r\n    }\r\n\r\n    define_entity_changes(entity: number, pos_x: number, pos_y: number, angle: number, move_status: number) {\r\n        this.m_scene.set_entity_position(entity, pos_x, pos_y);\r\n        this.m_scene.set_entity_angle(entity, angle);\r\n        this.m_scene.set_entity_move(entity, move_status);\r\n\r\n        if (this.m_scene.is_player(entity)) {\r\n            this.scene_define_player_changes(pos_x, pos_y, angle, move_status);\r\n        } else {\r\n            this.scene_define_entity_changes(entity, pos_x, pos_y, angle, move_status);\r\n        }\r\n    }\r\n\r\n    remove_monster(entity: number) {\r\n        this.m_scene.remove_monster(entity);\r\n        this.scene_remove_monster(entity);\r\n    }\r\n\r\n    define_total_update_entities(count: number) {\r\n        this.m_total_level_entities = count;\r\n    }\r\n\r\n    entity_start_action(entity: number, action_id: number) {\r\n        this.scene_entity_start_action(entity, action_id);\r\n    }\r\n\r\n    entity_finish_action(entity: number, action_id: number) {\r\n        this.scene_entity_finish_action(entity, action_id);\r\n    }\r\n\r\n    entity_start_cooldawn(entity: number, cooldawn_id: number, cooldawn_time: number) {\r\n        this.m_scene.get_cooldawns().start_cooldawn(entity, cooldawn_id, cooldawn_time);\r\n        this.scene_entity_start_cooldawn(entity, cooldawn_id, cooldawn_time);\r\n    }\r\n\r\n    debug_entity_walk_path(entity: number, points: ArrayLike<number>) {\r\n        const coordinates = new Float32Array(points.length);\r\n        for(let i = 0; i < coordinates.length; i++) {\r\n            coordinates[i] = points[i];\r\n        }\r\n        this.debug_entity_trajectory(entity, coordinates);\r\n    }\r\n\r\n    debug_close_entity(e1: number, pos_x1: number, pos_y1: number, e2: number, pos_x2: number, pos_y2: number) {\r\n        this.debug_close_entity_pair(e1, pos_x1, pos_y1, e2, pos_x2, pos_y2);\r\n    }\r\n\r\n    debug_visible_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        this.debug_player_visible_quad(start_x, start_y, end_x, end_y);\r\n    }\r\n\r\n    debug_neighborhood_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        this.debug_player_neighborhood_quad(start_x, start_y, end_x, end_y);\r\n    }\r\n}","import { ClickCursor } from \"../scene/click_cursor\";\r\nimport { CLICK_CURSOR_RADIUS, CLICK_CURSOR_TIME, COOLDAWN, MOVE_STATUS } from \"../constants\";\r\nimport { SceneTile } from \"../scene/scene_tile\";\r\nimport { Transform } from \"../transform\";\r\nimport { CLICK_CURSOR_CENTER_SIZE, CLICK_CURSOR_COLOR, CLICK_CURSOR_STROKE_COLOR, CLICK_CURSOR_STROKE_WIDTH, COOLDAWN_SHIFT_COLOR, COOLDAWN_SHIFT_RADIUS, COOLDAWN_SHIFT_WIDTH, DEBUG_CLOSEST_PAIR_COLOR, DEBUG_CLOSEST_PAIR_WIDTH, DEBUG_NEIGHBORHOOD_RECT_COLOR, DEBUG_RECT_LINE_WIDTH, DEBUG_TRAJECTORY_COLOR, DEBUG_TRAJECTORY_POINT_COLOR, DEBUG_TRAJECTORY_POINT_RADIUS, DEBUG_TRAJECTORY_WIDTH, DEBUG_VISIBILITY_RECT_COLOR, MONSTER_IDLE_COLOR, MONSTER_IS_STROKE, MONSTER_MOVE_COLOR, MONSTER_SHIFT_COLOR, MONSTER_STROKE_COLOR, MONSTER_STROKE_WIDTH, PLAYER_IDLE_COLOR, PLAYER_IS_STROKE, PLAYER_MOVE_COLOR, PLAYER_SHIFT_COLOR, PLAYER_STROKE_COLOR, PLAYER_STROKE_WIDTH, TILE_IS_STROKE, TILE_NONWALKABLE_COLOR, TILE_STROKE_COLOR, TILE_STROKE_WIDTH, TILE_WALKABLE_COLOR } from \"./visual_styles\";\r\nimport { Person } from \"../scene/person\";\r\nimport { Player } from \"../scene/player\";\r\nimport { Monster } from \"../scene/monster\";\r\n\r\nexport function draw_background(draw_ctx: CanvasRenderingContext2D, width: number, height: number) {\r\n    draw_ctx.save();\r\n    draw_ctx.fillStyle = TILE_NONWALKABLE_COLOR;\r\n    draw_ctx.fillRect(0, 0, width, height);\r\n    draw_ctx.restore();\r\n}\r\n\r\nexport function draw_cursor(draw_ctx: CanvasRenderingContext2D, \r\n                            wtc_tfm: Transform, \r\n                            cursor: ClickCursor) {\r\n    if(cursor.get_active()) {\r\n        const prop: number = Math.pow(Math.min(cursor.get_proportion(), 1.0), 0.15);\r\n\r\n        // actual draw\r\n        draw_ctx.save();\r\n        draw_ctx.lineWidth = CLICK_CURSOR_STROKE_WIDTH;\r\n        draw_ctx.fillStyle = CLICK_CURSOR_COLOR;\r\n        draw_ctx.strokeStyle = CLICK_CURSOR_STROKE_COLOR;\r\n        draw_ctx.beginPath();\r\n        const c_center = wtc_tfm.multiply_array(cursor.get_translation());\r\n        const c_radius = wtc_tfm.apply_scale(CLICK_CURSOR_RADIUS) * prop;\r\n        draw_ctx.arc(c_center[0], c_center[1], c_radius, 0, 2 * Math.PI);\r\n        draw_ctx.fill();\r\n        draw_ctx.stroke();\r\n\r\n        // draw center dot\r\n        draw_ctx.beginPath();\r\n        draw_ctx.fillStyle = CLICK_CURSOR_STROKE_COLOR;\r\n        draw_ctx.arc(c_center[0], c_center[1], CLICK_CURSOR_CENTER_SIZE, 0, 2 * Math.PI);\r\n        draw_ctx.fill();\r\n        draw_ctx.restore();\r\n    }\r\n}\r\n\r\nexport function draw_level_tile(draw_ctx: CanvasRenderingContext2D, \r\n                                wtc_tfm: Transform,\r\n                                tile: SceneTile) {\r\n    const c_corner = wtc_tfm.multiply_array(tile.get_translation());\r\n    const c_size = wtc_tfm.apply_scale(tile.get_tile_size());\r\n    const type = tile.get_type();\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth = TILE_STROKE_WIDTH;\r\n    draw_ctx.fillStyle = TILE_WALKABLE_COLOR;\r\n    draw_ctx.strokeStyle = TILE_STROKE_COLOR;\r\n\r\n    draw_ctx.beginPath();\r\n\r\n    if(type == 0) {\r\n        // walkable\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size, c_size);            \r\n    } else if(type == 2) {\r\n        draw_ctx.rect(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2, c_size / 2, c_size / 2);\r\n    } else if(type == 3) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1] + c_size / 2, c_size / 2, c_size / 2);\r\n    } else if(type == 4) {\r\n        draw_ctx.rect(c_corner[0] + c_size / 2, c_corner[1], c_size / 2, c_size / 2);\r\n    } else if(type == 5) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size / 2, c_size / 2);\r\n    } else if(type == 6) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1] + c_size / 2, c_size, c_size / 2);\r\n    } else if(type == 7) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size / 2, c_size);\r\n    } else if(type == 8) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size, c_size / 2);\r\n    } else if(type == 9) {\r\n        draw_ctx.rect(c_corner[0] + c_size / 2, c_corner[1], c_size / 2, c_size);\r\n    } else if(type == 10) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n    } else if(type == 11) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n    } else if(type == 12) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1]);\r\n    } else if(type == 13) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n    }\r\n\r\n    draw_ctx.fill();\r\n    if(TILE_IS_STROKE) {\r\n        draw_ctx.stroke();\r\n    }\r\n    draw_ctx.restore();\r\n}\r\n\r\nfunction draw_person(draw_ctx: CanvasRenderingContext2D, \r\n                     wtc_tfm: Transform, \r\n                     person: Person,\r\n                     cooldawns: Map<COOLDAWN, [number, number]>,\r\n                     stroke_width: number,\r\n                     walk_color: string,\r\n                     iddle_color: string,\r\n                     shift_color: string,\r\n                     stroke_color: string,\r\n                     is_stroke: boolean) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth = stroke_width;\r\n    draw_ctx.fillStyle = person.get_move() == MOVE_STATUS.NONE ? iddle_color : \r\n                         (person.get_move() == MOVE_STATUS.WALK ? walk_color : \r\n                         (shift_color));\r\n    draw_ctx.strokeStyle = stroke_color;\r\n    draw_ctx.beginPath();\r\n    // constuct transform from local to canvas\r\n    const person_tfm = person.get_tfm();\r\n    const tfm = wtc_tfm.compose_tfms(person_tfm);\r\n    // calculate center on canvas\r\n    const c_center = tfm.multiply(0.0, 0.0);\r\n    // calculate radius on canvas\r\n    const radius = person.get_radius();\r\n    const c_radius = tfm.apply_scale(radius);\r\n    const p2 = tfm.multiply(radius * Math.SQRT2, 0.0);\r\n    const a = person_tfm.rotation();\r\n    draw_ctx.arc(c_center[0], c_center[1], c_radius, a + Math.PI / 4, 2 * Math.PI + a - Math.PI / 4);\r\n    draw_ctx.lineTo(p2[0], p2[1]);\r\n    draw_ctx.fill();\r\n    \r\n    if(is_stroke) {\r\n        draw_ctx.stroke();\r\n    }\r\n    draw_ctx.restore();\r\n\r\n    // draw cooldawns\r\n    for (let [cooldawn, times] of cooldawns) {\r\n        draw_ctx.save();\r\n        // for now use only one color/size, because there are no other colldawns\r\n        // but in general case we should get proper style with respect to the key cooldawn\r\n        draw_ctx.lineWidth = COOLDAWN_SHIFT_WIDTH;\r\n        draw_ctx.strokeStyle = COOLDAWN_SHIFT_COLOR;\r\n        draw_ctx.beginPath();\r\n        draw_ctx.arc(c_center[0], c_center[1], COOLDAWN_SHIFT_RADIUS, a, 2.0 * Math.PI * (1.0 - times[1] / times[0]) + a);\r\n        draw_ctx.stroke();\r\n        draw_ctx.restore();\r\n    }\r\n}\r\n\r\nexport function draw_player(draw_ctx: CanvasRenderingContext2D, \r\n                            wtc_tfm: Transform, \r\n                            player: Player,\r\n                            cooldawns: Map<COOLDAWN, [number, number]>,) {\r\n    \r\n    draw_person(draw_ctx,\r\n        wtc_tfm,\r\n        player,\r\n        cooldawns,\r\n        PLAYER_STROKE_WIDTH,\r\n        PLAYER_MOVE_COLOR,\r\n        PLAYER_IDLE_COLOR,\r\n        PLAYER_SHIFT_COLOR,\r\n        PLAYER_STROKE_COLOR,\r\n        PLAYER_IS_STROKE);\r\n}\r\n\r\nexport function draw_monster(draw_ctx: CanvasRenderingContext2D, \r\n                             wtc_tfm: Transform, \r\n                             monster: Monster,\r\n                             cooldawns: Map<COOLDAWN, [number, number]>,) {\r\n    \r\n    draw_person(draw_ctx,\r\n        wtc_tfm,\r\n        monster,\r\n        cooldawns,\r\n        MONSTER_STROKE_WIDTH,\r\n        MONSTER_MOVE_COLOR,\r\n        MONSTER_IDLE_COLOR,\r\n        MONSTER_SHIFT_COLOR,\r\n        MONSTER_STROKE_COLOR,\r\n        MONSTER_IS_STROKE);\r\n}\r\n\r\nexport function draw_trajectory(draw_ctx: CanvasRenderingContext2D, \r\n                                wtc_tfm: Transform,\r\n                                coordinates: Float32Array) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth = DEBUG_TRAJECTORY_WIDTH;\r\n    draw_ctx.strokeStyle = DEBUG_TRAJECTORY_COLOR;\r\n    draw_ctx.beginPath();\r\n    const points_count = coordinates.length / 2;\r\n    const c = wtc_tfm.multiply(coordinates[0], coordinates[1]);\r\n    draw_ctx.moveTo(c[0], c[1]);\r\n    for(let i = 1; i < points_count; i++) {\r\n        const p = wtc_tfm.multiply(coordinates[2*i], coordinates[2*i+1]);\r\n        draw_ctx.lineTo(p[0], p[1]);\r\n    }\r\n    draw_ctx.stroke();\r\n    draw_ctx.restore();\r\n\r\n    draw_ctx.save();\r\n    draw_ctx.fillStyle = DEBUG_TRAJECTORY_POINT_COLOR;\r\n    for(let i = 0; i < points_count; i++) {\r\n        draw_ctx.beginPath();\r\n        const p = wtc_tfm.multiply(coordinates[2*i], coordinates[2*i+1]);\r\n        draw_ctx.arc(p[0], p[1], DEBUG_TRAJECTORY_POINT_RADIUS, 0.0, 2*Math.PI);\r\n        draw_ctx.fill();\r\n    }\r\n    draw_ctx.restore();\r\n}\r\n\r\nexport function draw_pairs(draw_ctx: CanvasRenderingContext2D, \r\n                           wtc_tfm: Transform,\r\n                           array: Array<number>) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth =  DEBUG_CLOSEST_PAIR_WIDTH;\r\n    draw_ctx.strokeStyle = DEBUG_CLOSEST_PAIR_COLOR;\r\n    draw_ctx.beginPath();\r\n    const piars_count = array.length / 4;\r\n    for(let i = 0; i < piars_count; i++) {\r\n        const p_start = wtc_tfm.multiply(array[4*i], array[4*i + 1]);\r\n        const p_finish = wtc_tfm.multiply(array[4*i + 2], array[4*i + 3]);\r\n        draw_ctx.moveTo(p_start[0], p_start[1]);\r\n        draw_ctx.lineTo(p_finish[0], p_finish[1]);\r\n    }\r\n    draw_ctx.stroke();\r\n    draw_ctx.restore();\r\n}\r\n\r\nfunction draw_rect(draw_ctx: CanvasRenderingContext2D, \r\n                   wtc_tfm: Transform,\r\n                   coordinates: Float32Array,\r\n                   stroke_style: string,\r\n                   stroke_width: number) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth =  stroke_width;\r\n    draw_ctx.strokeStyle = stroke_style;\r\n    draw_ctx.beginPath();\r\n\r\n    const s = wtc_tfm.multiply(coordinates[0], coordinates[1]);\r\n    const e = wtc_tfm.multiply(coordinates[2], coordinates[3]);\r\n\r\n    draw_ctx.moveTo(s[0], s[1]);\r\n    draw_ctx.lineTo(e[0], s[1]);\r\n    draw_ctx.lineTo(e[0], e[1]);\r\n    draw_ctx.lineTo(s[0], e[1]);\r\n    draw_ctx.closePath();\r\n\r\n    draw_ctx.stroke();\r\n    draw_ctx.restore();\r\n}\r\n\r\nexport function draw_visibility_rect(draw_ctx: CanvasRenderingContext2D, \r\n                                     wtc_tfm: Transform,\r\n                                     coordinates: Float32Array) {\r\n    draw_rect(draw_ctx, wtc_tfm, coordinates, DEBUG_VISIBILITY_RECT_COLOR, DEBUG_RECT_LINE_WIDTH);\r\n}\r\n\r\nexport function draw_neighborhood_rect(draw_ctx: CanvasRenderingContext2D, \r\n                                       wtc_tfm: Transform,\r\n                                       coordinates: Float32Array) {\r\n    draw_rect(draw_ctx, wtc_tfm, coordinates, DEBUG_NEIGHBORHOOD_RECT_COLOR, DEBUG_RECT_LINE_WIDTH);\r\n}","import { ClientDataCanvas } from \"./client_data_canvas/client_data_canvas\";\r\n\r\nlet client = new ClientDataCanvas();\r\n","import { ClientBase } from \"../client_base\";\r\nimport { ACTION, CAMERA_LERP_COEFFICIENT, COOLDAWN, MOVE_STATUS, TILE_PIXELS_SIZE } from \"../constants\";\r\nimport { TILE_NONWALKABLE_COLOR } from \"./visual_styles\";\r\nimport { draw_background, draw_cursor, draw_level_tile, draw_monster, draw_neighborhood_rect, draw_pairs, draw_player, draw_trajectory, draw_visibility_rect } from \"./draws\";\r\n\r\n// this version of the client application\r\n// use 2d canvas as draw device\r\n// it use simple procedural shapes for visualise all game items\r\nexport class ClientDataCanvas extends ClientBase {\r\n    m_canvas_width: number;\r\n    m_canvas_height: number;\r\n\r\n    m_camera_position_x: number = 0.0;\r\n    m_camera_position_y: number = 0.0;\r\n\r\n    m_debug_trajectories: Map<number, Float32Array> = new Map<number, Float32Array>();\r\n    m_debug_pairs: Array<number>;\r\n\r\n    m_is_draw_visible_rect: boolean = false;\r\n    m_debug_visible_rect: Float32Array = new Float32Array(4);\r\n    m_is_draw_neighborhood_rect: boolean = false;\r\n    m_debug_neighborhood_rect: Float32Array = new Float32Array(4);\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.m_canvas_width = this.m_scene_canvas.width;\r\n        this.m_canvas_height = this.m_scene_canvas.height;\r\n\r\n        this.m_debug_trajectories.clear();\r\n        this.m_debug_pairs = new Array<number>();\r\n    }\r\n\r\n    start(): void {\r\n        this.update_process();\r\n    }\r\n\r\n    point_to_world(in_x: number, in_y: number) : number[] {\r\n        // in this implementaion we use m_wtc_tfm as transform from canvas to world\r\n        // this transform is also used for the map\r\n        const ctw_tfm = this.m_wtc_tfm.inverse();\r\n        const pos = ctw_tfm.multiply(in_x, in_y);\r\n        return pos;\r\n    }\r\n\r\n    // in this implementation we does not need this\r\n    scene_tile_delete(index: number): void { }\r\n    scene_tile_create(pos_x: number, pos_y: number, index: number, type: number): void { }\r\n    scene_create_player(radius: number): void { }\r\n    mouse_click(inc_x: number, inc_y: number, inw_x: number, inw_y: number): void { }\r\n    // when define player position, we should update camera to output shapes to the canvas\r\n    scene_define_player_changes(pos_x: number, pos_y: number, angle: number, move_status: MOVE_STATUS): void { \r\n        // update wtc transform\r\n        this.m_camera_position_x = CAMERA_LERP_COEFFICIENT * pos_x + (1 - CAMERA_LERP_COEFFICIENT) * this.m_camera_position_x;\r\n        this.m_camera_position_y = CAMERA_LERP_COEFFICIENT * pos_y + (1 - CAMERA_LERP_COEFFICIENT) * this.m_camera_position_y;\r\n\r\n        this.m_wtc_tfm.set_translation(this.m_canvas_width / 2 - this.m_camera_position_x * this.m_wtc_scale, this.m_canvas_height / 2 - this.m_camera_position_y * this.m_wtc_scale);\r\n    }\r\n    scene_create_monster(entity: number, radius: number): void { }\r\n    scene_define_entity_changes(entity: number, pos_x: number, pos_y: number, angle: number, move_status: MOVE_STATUS): void { }\r\n    scene_remove_monster(entity: number): void {}\r\n    scene_entity_start_action(entity: number, action_id: ACTION): void {}\r\n    scene_entity_finish_action(entity: number, action_id: ACTION): void {}\r\n    scene_entity_start_cooldawn(entity: number, cooldawn_id: COOLDAWN, time: number): void {}\r\n\r\n    debug_entity_trajectory(entity: number, coordinates: Float32Array): void {\r\n        // store coordinates in temporary map\r\n        // draw these trajectories at draw method\r\n        this.m_debug_trajectories.set(entity, coordinates);\r\n    }\r\n\r\n    debug_close_entity_pair(entity_a: number, a_pos_x: number, a_pos_y: number, entity_b: number, b_pos_x: number, b_pos_y: number): void {\r\n        this.m_debug_pairs.push(a_pos_x);\r\n        this.m_debug_pairs.push(a_pos_y);\r\n\r\n        this.m_debug_pairs.push(b_pos_x);\r\n        this.m_debug_pairs.push(b_pos_y);\r\n    }\r\n\r\n    debug_player_visible_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        this.m_debug_visible_rect[0] = start_x;\r\n        this.m_debug_visible_rect[1] = start_y;\r\n        this.m_debug_visible_rect[2] = end_x;\r\n        this.m_debug_visible_rect[3] = end_y;\r\n        this.m_is_draw_visible_rect = true;\r\n    }\r\n\r\n    debug_player_neighborhood_quad(start_x: number, start_y: number, end_x: number, end_y: number): void {\r\n        this.m_debug_neighborhood_rect[0] = start_x;\r\n        this.m_debug_neighborhood_rect[1] = start_y;\r\n        this.m_debug_neighborhood_rect[2] = end_x;\r\n        this.m_debug_neighborhood_rect[3] = end_y;\r\n        this.m_is_draw_neighborhood_rect = true;\r\n    }\r\n\r\n    update_process() {\r\n        // clear debug before update\r\n        // because at update it calls callbacks and fill this map\r\n        this.m_debug_trajectories.clear();\r\n        this.m_debug_pairs.length = 0;\r\n\r\n        this.update();\r\n\r\n        // in this client we should draw the scene\r\n        this.draw_scene();\r\n\r\n        window.requestAnimationFrame(this.update_process.bind(this));\r\n    }\r\n\r\n    draw_scene() {\r\n        // clear the background\r\n        this.m_scene_ctx.clearRect(0, 0, this.m_canvas_width, this.m_canvas_height);\r\n        draw_background(this.m_scene_ctx, this.m_scene_canvas.width, this.m_scene_canvas.height)\r\n\r\n        // draw scene items\r\n        // tiles\r\n        const level_tiles = this.m_scene.get_level_tiles();\r\n        for(let [tile_index, tile] of level_tiles) {\r\n            draw_level_tile(this.m_scene_ctx, this.m_wtc_tfm, tile)\r\n        }\r\n\r\n        // draw the cursor\r\n        const click_cursor = this.m_scene.get_click_cursor();\r\n        draw_cursor(this.m_scene_ctx, this.m_wtc_tfm, click_cursor);\r\n\r\n        // player\r\n        const player = this.m_scene.get_player();\r\n        draw_player(this.m_scene_ctx, this.m_wtc_tfm, player, this.m_scene.get_person_cooldawns(player.get_id()));\r\n\r\n        // monsters\r\n        const monsters = this.m_scene.get_monsters();\r\n        for(let [entity, monster] of monsters) {\r\n            draw_monster(this.m_scene_ctx, this.m_wtc_tfm, monster, this.m_scene.get_person_cooldawns(monster.get_id()));\r\n        }\r\n\r\n        // draw debug trajectories\r\n        for(let [entity, coordinates] of this.m_debug_trajectories) {\r\n            draw_trajectory(this.m_scene_ctx, this.m_wtc_tfm, coordinates);\r\n        }\r\n\r\n        // closest pairs\r\n        draw_pairs(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_pairs);\r\n\r\n        // visible quad\r\n        if (this.m_is_draw_visible_rect) {\r\n            draw_visibility_rect(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_visible_rect);\r\n        }\r\n        // neighborhood rect\r\n        if (this.m_is_draw_neighborhood_rect) {\r\n            draw_neighborhood_rect(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_neighborhood_rect);\r\n        }\r\n    }\r\n}"],"names":["async","$c73d7759e7ded5ad$export$f9bb8d20ccc7477a","module","imports","adaptedImports","env","Object","assign","create","globalThis","abort","message","fileName","lineNumber","columnNumber","__liftString","Error","level_width","level_height","tile_size","host","define_level","total_tiles","define_total_tiles","vertices","polygons","sizes","__liftStaticArray","__getF32","__getI32","define_navmesh","entity","radius","create_player","pos_x","pos_y","angle","move_status","define_entity_changes","action_id","entity_start_action","count","define_total_update_entities","points","debug_entity_walk_path","e1","pos_x1","pos_y1","e2","pos_x2","pos_y2","debug_close_entity","start_x","start_y","end_x","end_y","debug_visible_quad","debug_neighborhood_quad","index","tile_delete","x","y","type","tile_create","remove_monster","create_monster","entity_finish_action","cooldawn_id","cooldawn_time","entity_start_cooldawn","exports","WebAssembly","instantiate","memory","adaptedExports","setPrototypeOf","create_settings","__liftInternref","settings_set_seed","settings","seed","__lowerInternref","__notnull","settings_set_generate","level_size","room_min_size","room_max_size","rooms_count","settings_set_use_debug","in_use_debug","settings_set_debug_flags","in_show_path","in_show_closest","in_show_visible","in_show_neighborhood","settings_set_neighborhood_quad_size","in_size","settings_set_rvo_time_horizon","in_time","settings_set_use_rvo","in_value","settings_set_snap_to_navmesh","settings_set_velocity_boundary_control","settings_set_path_recalculate_time","settings_set_player_fast_shift","speed_multiplier","distance","cooldawn","create_game","game_update","game","dt","game_client_point","in_x","in_y","game_client_shift","cursor_x","cursor_y","game_add_monsters","pointer","end","Uint32Array","buffer","memoryU16","Uint16Array","start","string","String","fromCharCode","subarray","liftElement","align","length","__dataview","getUint32","DataView","__getU32","values","Array","i","Internref","Number","registry","FinalizationRegistry","refcount","refcounts","get","__unpin","delete","set","sentinel","__pin","__retain","register","value","valueOf","TypeError","Map","getInt32","getFloat32","$55f2ecb58225d6c7$export$dec075e787bbf2fa","$55f2ecb58225d6c7$export$e6bc449c90089af5","MOVE_STATUS","$55f2ecb58225d6c7$export$9523889e0a5da4ba","ACTION","$55f2ecb58225d6c7$export$9ac679c2f13a240b","COOLDAWN","$f16e9672ec91febb$export$563a914cafbdc389","m_matrix","Float32Array","m_angle","m_scale_x","m_scale_y","constructor","this","matrix_array","set_matrix_array","in_array","set_translation","translation","_update_rotation","Math","cos","sin","set_rotation","rotation","set_scale","set_uniform_scale","multiply","multiply_array","in_coordinates","apply_scale","sqrt","compose_tfms","other","to_return","a","b","result","_det2","c","d","inverse","m","toString","$178042aa2c7d65a2$export$18a53f1bbc175d6c","$178042aa2c7d65a2$export$7f5701e64ff28313","$178042aa2c7d65a2$export$8e9e21cb4ba66e8a","$570cf7c0464d6eb1$export$a67fcbf599a20f60","m_active","m_tfm","m_scale","m_scale_index","in_ctxt","in_wtc_tfm","in_tile_size","in_vertices","in_polygons","in_sizes","m_context","m_wtc_tfm","m_canvas_width","canvas","width","m_canvas_height","height","m_tile_size","m_vertices","m_polygons","m_sizes","floor","_update_scale","toggle_active","scale_up","scale_down","draw","clearRect","pos","save","fillStyle","strokeStyle","lineWidth","shift","s","beginPath","j","v","c_position","moveTo","lineTo","fill","stroke","c_center","arc","PI","restore","$034754255a7c6cea$export$9c15a42db78ae2ef","set_position","set_angle","get_tfm","get_translation","$d3cdc929a48dff87$export$a4d5907be24f10a8","m_time_accum","m_life_time","super","activate","get_active","update","deactivate","get_proportion","$276293489b0116c9$export$c0132fff8e013c5d","m_type","get_tile_size","get_type","$a3d187aad3887238$export$d0e824889e01c751","m_entity_id","m_radius","m_move_status","NONE","in_id","set_id","get_id","set_radius","set_move","in_move","get_move","get_radius","$6416d36ee6f7b910$export$2616165974278734","$873e84d0b6afad0d$export$d2385d4b1e3b9d1a","$264e6e272b953d77$export$68ec2f3649ea48cb","m_cooldawns","add_entity","id","remove_entity","start_cooldawn","total_time","forEach","c_map","times","get_cooldawns","in_entity","$7b6acdcc84d7fdce$export$38af1803e3442a7f","m_level_width","m_level_height","m_level_tile_size","m_last_click_time","m_click_number","m_click_cursor","m_level_tiles","m_player","m_player_id","m_monsters","level_tile_size","click_position","wasm_module","game_ptr","force","current_time","performance","now","is_define","reset_click","get_click_cursor","get_person_cooldawns","get_level_tiles","get_player","get_monsters","delete_tile","has","create_tile","set_player_id","is_player","set_player_radius","set_entity_position","monster","set_monster_radius","set_entity_angle","set_entity_move","$2cc090ebe2c5f8ef$export$b492ca688ad18a46","mouse_event","canvas_rect","getBoundingClientRect","clientX","left","clientY","top","$492333b0ad62fdec$export$f03163d7279986d4","$33d4847c3617f155$export$8b768cd553057a13","html_id","m_html_element","document","getElementById","show","style","visibility","hide","$862899718e90ca39$export$ae44022dcc4e43cc","set_text","text","innerText","$2b73031844bf817e$export$bc3bf32b2a642c5a","m_accumulator","m_ticks","m_value","round","toFixed","$ac97b2179e748b61$export$f1569c0fcc611a8e","total_id","visible_id","m_total_element","m_visible_element","update_values","total","visible","$6882fe66818c8fa1$export$3828dcf1a148271e","assign_fps_element","m_fps","assign_count_elements","m_items","assign_pause_screen","m_pause_screen","assign_loading","m_loading","update_count_values","on_pause","off_pause","loading_hide","$23cae2dc541edd99$export$8f6e4be34af2779b","m_module","undefined","m_is_start","m_wtc_scale","m_is_mouse_press","m_total_level_entities","m_is_game_active","m_is_pause","bind","m_ui","m_scene_canvas","m_scene_ctx","getContext","m_map_canvas","m_map_ctx","pointerEvents","m_current_time","window","addEventListener","event","preventDefault","local_this","onkeydown","key_event","key","mouse_press_event","mouse_release_event","onmousemove","m_mouse_event","visibilitychange_event","fetch","then","response","compileStreaming","console","log","settings_ptr","random","m_game_ptr","hidden","toggle_activate","c_world","point_to_world","m_scene","mouse_click","m_map","time","size","draw_map","scene_tile_delete","scene_tile_create","scene_create_player","scene_create_monster","scene_define_player_changes","scene_define_entity_changes","scene_remove_monster","scene_entity_start_action","scene_entity_finish_action","scene_entity_start_cooldawn","coordinates","debug_entity_trajectory","debug_close_entity_pair","debug_player_visible_quad","debug_player_neighborhood_quad","$f9b95ce5c1226078$export$8552bb84728abe17","draw_ctx","wtc_tfm","cursor","prop","pow","min","c_radius","$f9b95ce5c1226078$export$44a885b113ef7fa4","tile","c_corner","c_size","rect","$f9b95ce5c1226078$var$draw_person","person","cooldawns","stroke_width","walk_color","iddle_color","shift_color","stroke_color","is_stroke","WALK","person_tfm","tfm","p2","SQRT2","$f9b95ce5c1226078$export$81d3421d8062504e","player","$f9b95ce5c1226078$export$f6c2b352dcf2259f","$f9b95ce5c1226078$export$9dcff9b689c89317","points_count","p","$f9b95ce5c1226078$export$16bc6b67ddae1d3a","array","piars_count","p_start","p_finish","$f9b95ce5c1226078$var$draw_rect","stroke_style","e","closePath","$f9b95ce5c1226078$export$aafd173343db4808","$f9b95ce5c1226078$export$9a345838953c2ff2","m_camera_position_x","m_camera_position_y","m_debug_trajectories","m_is_draw_visible_rect","m_debug_visible_rect","m_is_draw_neighborhood_rect","m_debug_neighborhood_rect","clear","m_debug_pairs","update_process","inc_x","inc_y","inw_x","inw_y","entity_a","a_pos_x","a_pos_y","entity_b","b_pos_x","b_pos_y","push","draw_scene","requestAnimationFrame","fillRect","level_tiles","tile_index","click_cursor","monsters"],"version":3,"file":"module.js.map"}