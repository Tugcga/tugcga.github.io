{"mappings":"AAAOA,eAAeC,EAAYC,EAAQC,EAAU,CAAC,GACnD,MAAMC,EAAiB,CACrBC,IAAKC,OAAOC,OAAOD,OAAOE,OAAOC,YAAaN,EAAQE,KAAO,CAAC,EAAG,CAC/DK,MAAMC,EAASC,EAAUC,EAAYC,GAEnCH,EAAUI,EAAaJ,IAAY,GACnCC,EAAWG,EAAaH,IAAa,GACrCC,KAA4B,EAC5BC,KAAgC,EAC/B,MAEC,MAAME,MAAM,GAAGL,QAAcC,KAAYC,KAAcC,IACzD,EAHC,EAIH,EACA,oBAAoBG,EAAaC,EAAcC,GAE7CF,KAA8B,EAC9BC,KAAgC,EAChCE,KAAKC,aAAaJ,EAAaC,EAAcC,EAC/C,EACA,0BAA0BG,GAExBA,KAA8B,EAC9BF,KAAKG,mBAAmBD,EAC1B,EACA,sBAAsBE,EAAUC,EAAUC,GAExCF,EAAWG,EAAkBC,EAAU,EAAGJ,IAAa,GACvDC,EAAWE,EAAkBE,EAAU,EAAGJ,IAAa,GACvDC,EAAQC,EAAkBE,EAAU,EAAGH,IAAU,GACjDN,KAAKU,eAAeN,EAAUC,EAAUC,EAC1C,EACA,qBAAqBK,GAEnBX,KAAKY,cAAcD,EACrB,EACA,6BAA6BE,EAAOC,EAAOC,EAAOC,GAEhDA,EAAqB,GAAXA,EACVhB,KAAKiB,sBAAsBJ,EAAOC,EAAOC,EAAOC,EAClD,EACA,oCAAoCE,GAElCA,KAAkB,EAClBlB,KAAKmB,6BAA6BD,EACpC,EACA,8BAA8BE,EAAQP,EAAOC,EAAOC,EAAOC,GAEzDI,KAAoB,EACpBJ,EAAqB,GAAXA,EACVhB,KAAKqB,uBAAuBD,EAAQP,EAAOC,EAAOC,EAAOC,EAC3D,EACA,8BAA8BI,EAAQE,GAEpCF,KAAoB,EACpBE,EAASf,EAAkBC,EAAU,EAAGc,IAAW,GACnDtB,KAAKuB,uBAAuBH,EAAQE,EACtC,EACA,0BAA0BE,EAAIC,EAAQC,EAAQC,EAAIC,EAAQC,GAExDL,KAAY,EACZG,KAAY,EACZ3B,KAAK8B,mBAAmBN,EAAIC,EAAQC,EAAQC,EAAIC,EAAQC,EAC1D,EACA,mBAAmBE,GAEjBA,KAAkB,EAClB/B,KAAKgC,YAAYD,EACnB,EACA,mBAAmBE,EAAGC,EAAGH,EAAOI,GAE9BF,KAAU,EACVC,KAAU,EACVH,KAAkB,EAClBI,KAAgB,EAChBnC,KAAKoC,YAAYH,EAAGC,EAAGH,EAAOI,EAChC,EACA,sBAAsBf,GAEpBA,KAAoB,EACpBpB,KAAKqC,eAAejB,EACtB,EACA,sBAAsBA,EAAQT,GAE5BS,KAAoB,EACpBpB,KAAKsC,eAAelB,EAAQT,EAC9B,MAGE4B,QAAEA,SAAkBC,YAAYC,YAAY3D,EAAQE,GACpD0D,EAASH,EAAQG,QAAU3D,EAAQE,IAAIyD,OACvCC,EAAiBzD,OAAO0D,eAAe,CAC3CC,gBAAA,IAESC,EAAgBP,EAAQM,oBAAsB,GAEvDE,kBAAkBC,EAAUC,GAE1BD,EAAWE,EAAiBF,IAAaG,IACzCZ,EAAQQ,kBAAkBC,EAAUC,EACtC,EACAG,sBAAsBJ,EAAUK,EAAYC,EAAeC,EAAeC,GAExER,EAAWE,EAAiBF,IAAaG,IACzCZ,EAAQa,sBAAsBJ,EAAUK,EAAYC,EAAeC,EAAeC,EACpF,EACAC,uBAAuBT,EAAUU,GAE/BV,EAAWE,EAAiBF,IAAaG,IACzCO,EAAeA,EAAe,EAAI,EAClCnB,EAAQkB,uBAAuBT,EAAUU,EAC3C,EACAC,yBAAyBX,EAAUY,EAAcC,GAE/Cb,EAAWE,EAAiBF,IAAaG,IACzCS,EAAeA,EAAe,EAAI,EAClCC,EAAkBA,EAAkB,EAAI,EACxCtB,EAAQoB,yBAAyBX,EAAUY,EAAcC,EAC3D,EACAC,oCAAoCd,EAAUe,GAE5Cf,EAAWE,EAAiBF,IAAaG,IACzCZ,EAAQuB,oCAAoCd,EAAUe,EACxD,EACAC,8BAA8BhB,EAAUiB,GAEtCjB,EAAWE,EAAiBF,IAAaG,IACzCZ,EAAQyB,8BAA8BhB,EAAUiB,EAClD,EACAC,YAAYlB,IAEVA,EAAWE,EAAiBF,IAAaG,IAClCL,EAAgBP,EAAQ2B,YAAYlB,KAAc,IAE3DmB,YAAYC,EAAMC,GAEhBD,EAAOlB,EAAiBkB,IAASjB,IACjCZ,EAAQ4B,YAAYC,EAAMC,EAC5B,EACAC,kBAAA,CAAkBF,EAAMG,EAAMC,KAE5BJ,EAAOlB,EAAiBkB,IAASjB,IACqB,GAA/CZ,EAAQ+B,kBAAkBF,EAAMG,EAAMC,IAE/CC,kBAAkBL,GAEhBA,EAAOlB,EAAiBkB,IAASjB,IACjCZ,EAAQkC,kBAAkBL,EAC5B,GACC7B,GACH,SAAS5C,EAAa+E,GACpB,IAAKA,EAAS,OAAO,KACrB,MACEC,EAAMD,EAAU,IAAIE,YAAYlC,EAAOmC,QAAQH,EAAU,IAAM,KAAO,EACtEI,EAAY,IAAIC,YAAYrC,EAAOmC,QACrC,IACEG,EAAQN,IAAY,EACpBO,EAAS,GACX,KAAON,EAAMK,EAAQ,MAAMC,GAAUC,OAAOC,gBAAgBL,EAAUM,SAASJ,EAAOA,GAAS,OAC/F,OAAOC,EAASC,OAAOC,gBAAgBL,EAAUM,SAASJ,EAAOL,GACnE,CACA,SAASpE,EAAkB8E,EAAaC,EAAOZ,GAC7C,IAAKA,EAAS,OAAO,KACrB,MACEa,EA+CJ,SAAkBb,GAChB,IACE,OAAOc,EAAWC,UAAUf,GAAS,EAIvC,CAHE,MAEA,OADAc,EAAa,IAAIE,SAAShD,EAAOmC,QAC1BW,EAAWC,UAAUf,GAAS,EACvC,CACF,CAtDaiB,CAASjB,EAAU,KAAOY,EACnCM,EAAS,IAAIC,MAAMN,GACrB,IAAK,IAAIO,EAAI,EAAGA,EAAIP,IAAUO,EAAGF,EAAOE,GAAKT,EAAYX,GAAWoB,GAAKR,IAAU,IACnF,OAAOM,CACT,CACA,MAAMG,UAAkBC,QACxB,MAAMC,EAAW,IAAIC,sBAqBrB,SAAmBxB,GACjB,GAAIA,EAAS,CACX,MAAMyB,EAAWC,EAAUC,IAAI3B,GAC/B,GAAiB,IAAbyB,EAAgB5D,EAAQ+D,QAAQ5B,GAAU0B,EAAUG,OAAO7B,OAC1D,KAAIyB,EACJ,MAAMvG,MAAM,qBAAqBuG,qBAA4BzB,MAD/C0B,EAAUI,IAAI9B,EAASyB,EAAW,EACuB,CAC9E,CACF,IA3BA,SAASrD,EAAgB4B,GACvB,IAAKA,EAAS,OAAO,KACrB,MAAM+B,EAAW,IAAIV,EAUvB,SAAkBrB,GAChB,GAAIA,EAAS,CACX,MAAMyB,EAAWC,EAAUC,IAAI3B,GAC3ByB,EAAUC,EAAUI,IAAI9B,EAASyB,EAAW,GAC3CC,EAAUI,IAAIjE,EAAQmE,MAAMhC,GAAU,EAC7C,CACA,OAAOA,CACT,CAjBiCiC,CAASjC,IAExC,OADAuB,EAASW,SAASH,EAAU/B,GACrB+B,CACT,CACA,SAASvD,EAAiB2D,GACxB,GAAa,MAATA,EAAe,OAAO,EAC1B,GAAIA,aAAiBd,EAAW,OAAOc,EAAMC,UAC7C,MAAMC,UAAU,qBAClB,CACA,MAAMX,EAAY,IAAIY,IAiBtB,SAAS7D,IACP,MAAM4D,UAAU,yBAClB,CACA,IAAIvB,EAAa,IAAIE,SAAShD,EAAOmC,QACrC,SAASpE,EAASiE,GAChB,IACE,OAAOc,EAAWyB,SAASvC,GAAS,EAItC,CAHE,MAEA,OADAc,EAAa,IAAIE,SAAShD,EAAOmC,QAC1BW,EAAWyB,SAASvC,GAAS,EACtC,CACF,CASA,SAASlE,EAASkE,GAChB,IACE,OAAOc,EAAW0B,WAAWxC,GAAS,EAIxC,CAHE,MAEA,OADAc,EAAa,IAAIE,SAAShD,EAAOmC,QAC1BW,EAAW0B,WAAWxC,GAAS,EACxC,CACF,CACA,OAAO/B,CACT,CCpOO,MAGMwE,EAAkC,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,ICHtE,MAAMC,EACTC,SAAW,IAAIC,aAAa,GAG5BC,QAAkB,EAClBC,UAAoB,EACpBC,UAAoB,EAEpBC,cACIC,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EACnEM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EACnEM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,CACvE,CAEAO,eACI,OAAOD,KAAKN,QAChB,CAIAQ,iBAAiBC,GACb,IAAI,IAAIhC,EAAI,EAAGA,EAAI,EAAGA,IAClB6B,KAAKN,SAASvB,GAAKgC,EAAShC,EAEpC,CAEAiC,gBAAgBxD,EAAcC,GAC1BmD,KAAKN,SAAS,GAAK9C,EACnBoD,KAAKN,SAAS,GAAK7C,CACvB,CAEAwD,cACI,MAAO,CAACL,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAC5C,CAEQY,mBACJN,KAAKN,SAAS,GAAKa,KAAKC,IAAIR,KAAKJ,SAAWI,KAAKH,UACjDG,KAAKN,SAAS,GAAKa,KAAKE,IAAIT,KAAKJ,SAAWI,KAAKH,UACjDG,KAAKN,SAAS,IAAMa,KAAKE,IAAIT,KAAKJ,SAAWI,KAAKF,UAClDE,KAAKN,SAAS,GAAKa,KAAKC,IAAIR,KAAKJ,SAAWI,KAAKF,SACrD,CAEAY,aAAaC,GACTX,KAAKJ,QAAUe,EACfX,KAAKM,kBACT,CAEAM,WACI,OAAOZ,KAAKJ,OAChB,CAEAiB,UAAUjE,EAAcC,GACpBmD,KAAKH,UAAYjD,EACjBoD,KAAKF,UAAYjD,EAEjBmD,KAAKM,kBACT,CAEAQ,kBAAkBH,GACdX,KAAKH,UAAYc,EACjBX,KAAKF,UAAYa,EAEjBX,KAAKM,kBACT,CAEAS,SAASnE,EAAcC,GACnB,MAAO,CAACmD,KAAKN,SAAS,GAAK9C,EAAOoD,KAAKN,SAAS,GAAK7C,EAAOmD,KAAKN,SAAS,GAClEM,KAAKN,SAAS,GAAK9C,EAAOoD,KAAKN,SAAS,GAAK7C,EAAOmD,KAAKN,SAAS,GAC9E,CAEAsB,eAAeC,GACX,OAAOjB,KAAKe,SAASE,EAAe,GAAIA,EAAe,GAC3D,CAEAC,YAAYP,GAOR,OAAOA,GALIJ,KAAKY,KAAKnB,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,IAEjFa,KAAKY,KAAKnB,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,KAG9D,CAClC,CAGA0B,aAAaC,GACT,IAAIC,EAAY,IAAI7B,EAEpB,MAAM8B,EAAIvB,KAAKC,eACTuB,EAAIH,EAAMpB,eAGhB,IAAIwB,EAAS,CAACF,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GACzFD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GACzFD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,IAGvG,OAFAF,EAAUpB,iBAAiBuB,GAEpBH,CACX,CAEQI,MAAMH,EAAWC,EAAWG,EAAWC,GAC3C,OAAOL,EAAEK,EAAIJ,EAAEG,CACnB,CAIAE,UAEI,MAAMD,EAAI5B,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAC9DM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GACpDM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GACpDM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GACpDM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GACpDM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAE9CoC,EAAI,CAAC9B,KAAK0B,MAAM1B,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMkC,GAAG,EAAK5B,KAAK0B,MAAM1B,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMkC,EAAG5B,KAAK0B,MAAM1B,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMkC,GACrR,EAAK5B,KAAK0B,MAAM1B,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMkC,EAAG5B,KAAK0B,MAAM1B,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMkC,GAAG,EAAK5B,KAAK0B,MAAM1B,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMkC,EAC/Q5B,KAAK0B,MAAM1B,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMkC,GAAG,EAAK5B,KAAK0B,MAAM1B,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMkC,EAAG5B,KAAK0B,MAAM1B,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMkC,GAE1Q,IAAIN,EAAY,IAAI7B,EAGpB,OAFA6B,EAAUpB,iBAAiB4B,GAEpBR,CACX,CAEAS,WACI,IAAIT,EAAY,GAIhB,OAHAA,GAAatB,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KACpF4B,GAAatB,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KACpF4B,GAAatB,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GACxE4B,CACX,ECnIG,MAGMU,EAAoB,0BAgBpBC,EAA4B,0BAI5BC,EAAY,0BCnBlB,MAAMC,EAWTC,UAAoB,EACpBC,MAAmB,IAAI5C,EACvB6C,QAAkB,EAClBC,cAAwB,EAExBxC,YAAYyC,EACAC,EACAC,EACAC,EACAC,EACAC,GACR7C,KAAK8C,UAAYN,EACjBxC,KAAK+C,UAAYN,EAEjBzC,KAAKgD,eAAiBR,EAAQS,OAAOC,MACrClD,KAAKmD,gBAAkBX,EAAQS,OAAOG,OAEtCpD,KAAKqD,YAAcX,EAEnB1C,KAAKsD,WAAaX,EAClB3C,KAAKuD,WAAaX,EAClB5C,KAAKwD,QAAUX,EAEf7C,KAAKuC,cAAgBhC,KAAKkD,MAAMjE,EAAsB5B,OAAS,GAC/DoC,KAAK0D,eACT,CAEQA,gBACJ1D,KAAKsC,QAAU9C,EAAsBQ,KAAKuC,eAAiBvC,KAAKqD,WACpE,CAEAM,gBACI3D,KAAKoC,UAAYpC,KAAKoC,QAC1B,CAEAwB,WACO5D,KAAKoC,WACJpC,KAAKuC,gBACFvC,KAAKuC,eAAiB/C,EAAsB5B,QAC3CoC,KAAKuC,gBAETvC,KAAK0D,gBAEb,CAEAG,aACO7D,KAAKoC,WACJpC,KAAKuC,iBACoB,GAAtBvC,KAAKuC,eACJvC,KAAKuC,gBAETvC,KAAK0D,gBAEb,CAEAI,OAGI,GAFA9D,KAAK8C,UAAUiB,UAAU,EAAG,EAAG/D,KAAKgD,eAAgBhD,KAAKmD,iBAEtDnD,KAAKoC,SAAU,CAEd,MACM4B,EADUhE,KAAK+C,UAAUlB,UACXd,SAASf,KAAKgD,eAAiB,EAAGhD,KAAKmD,gBAAkB,GAE7EnD,KAAKqC,MAAMvB,kBAAkBd,KAAKsC,SAClCtC,KAAKqC,MAAMjC,gBAAgBJ,KAAKgD,eAAiB,EAAIgB,EAAI,GAAKhE,KAAKsC,QAAStC,KAAKmD,gBAAkB,EAAIa,EAAI,GAAKhE,KAAKsC,SAErHtC,KAAK8C,UAAUmB,OACfjE,KAAK8C,UAAUoB,UAAYhC,EAC3BlC,KAAK8C,UAAUqB,YAAcjC,EAC7BlC,KAAK8C,UAAUsB,UAAY,KAC3B,IAAIC,EAAQ,EACZ,IAAI,IAAIlG,EAAI,EAAGA,EAAI6B,KAAKwD,QAAQ5F,OAAQO,IAAK,CAEzC,MAAMmG,EAAItE,KAAKwD,QAAQrF,GAGvB6B,KAAK8C,UAAUyB,YAEf,IAAI,IAAIC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACvB,MAAMC,EAAIzE,KAAKuD,WAAWc,EAAQG,GAC5BlK,EAAI0F,KAAKsD,WAAW,EAAEmB,GACtBlK,EAAIyF,KAAKsD,WAAW,EAAEmB,EAAI,GAE1BC,EAAa1E,KAAKqC,MAAMtB,SAASzG,EAAGC,GAClC,GAALiK,EACCxE,KAAK8C,UAAU6B,OAAOD,EAAW,GAAIA,EAAW,IAEhD1E,KAAK8C,UAAU8B,OAAOF,EAAW,GAAIA,EAAW,GAExD,CAEA1E,KAAK8C,UAAU+B,OACf7E,KAAK8C,UAAUgC,SAEfT,GAASC,CACb,CAGAtE,KAAK8C,UAAUyB,YACfvE,KAAK8C,UAAUoB,UAAYlC,EAC3B,MAAM+C,EAAW/E,KAAKqC,MAAMtB,SAASiD,EAAI,GAAIA,EAAI,IAEjDhE,KAAK8C,UAAUkC,IAAID,EAAS,GAAIA,EAAS,GD7FtB,EC6F2C,EAAG,EAAIxE,KAAK0E,IAC1EjF,KAAK8C,UAAU+B,OACf7E,KAAK8C,UAAUoC,SACnB,CACJ,ECvHG,MAAMC,EACT9C,MAAmB,IAAI5C,EAEvBM,cAEA,CAEAqF,aAAa9K,EAAWC,GACpByF,KAAKqC,MAAMjC,gBAAgB9F,EAAGC,EAClC,CAEA8K,UAAUjM,GACN4G,KAAKqC,MAAM3B,aAAatH,EAC5B,CAEAkM,UACI,OAAOtF,KAAKqC,KAChB,CAEAkD,kBACI,OAAOvF,KAAKqC,MAAMhC,aACtB,ECpBG,MAAMmF,UAAoBL,EAC7B/C,UAAoB,EAEpBqD,aAAuB,EACvBC,YAAsB,EAEtB3F,cACI4F,QAEA3F,KAAK0F,YLX4B,GKYrC,CAEAE,SAAShJ,EAAcC,GACnBmD,KAAKqC,MAAMjC,gBAAgBxD,EAAMC,GAEjCmD,KAAKyF,aAAe,EAEpBzF,KAAKoC,UAAW,CACpB,CAEAyD,aACI,OAAO7F,KAAKoC,QAChB,CAEAmD,kBACI,OAAOvF,KAAKqC,MAAMhC,aACtB,CAEAyF,OAAOpJ,GACAsD,KAAKoC,WACJpC,KAAKyF,cAAgB,IAAO/I,EAEzBsD,KAAKyF,cAAgBzF,KAAK0F,aACzB1F,KAAK+F,aAGjB,CAGAC,iBACI,OAAOhG,KAAKyF,aAAezF,KAAK0F,WACpC,CAEAK,aACI/F,KAAKoC,UAAW,CACpB,EC9CG,MAAM6D,UAAkBd,EAC3B9B,YAAsB,EACtB6C,OAAiB,EAEjBnG,YAAY7G,EAAeC,EAAef,EAAmBoC,GACzDmL,QAEA3F,KAAKoF,aAAalM,EAAOC,GAEzB6G,KAAKqD,YAAcjL,EACnB4H,KAAKkG,OAAS1L,CAClB,CAEA2L,gBACI,OAAOnG,KAAKqD,WAChB,CAEA+C,WACI,OAAOpG,KAAKkG,MAChB,ECjBG,MAAMG,UAAelB,EACxBmB,SAAmB,EACnBC,WAAqB,EAErBxG,cACI4F,OACJ,CAEAa,WAAWxN,GACPgH,KAAKsG,SAAWtN,CACpB,CAEAyN,SAASpN,GACL2G,KAAKuG,UAAYlN,CACrB,CAEAqN,WACI,OAAO1G,KAAKuG,SAChB,CAEAI,aACI,OAAO3G,KAAKsG,QAChB,ECxBG,MAAMM,UAAeP,EACxBtG,cACI4F,OACJ,ECHG,MAAMkB,UAAgBR,EACzBtG,cACI4F,OACJ,ECGG,MAAMmB,EACTC,cAAwB,EACxBC,eAAyB,EACzBC,kBAA4B,EAE5BC,kBAA4B,EAC5BC,eAAyB,EACzBC,eAA8B,IAAI5B,EAClC6B,cAAwC,IAAIhI,IAC5CiI,SAAmB,IAAIV,EACvBW,WAAmC,IAAIlI,IAEvCU,YAAY7H,EACAC,EACAqP,GACRxH,KAAK+G,cAAgB7O,EACrB8H,KAAKgH,eAAiB7O,EACtB6H,KAAKiH,kBAAoBO,CAC7B,CAKAC,eAAeC,EAAkBC,EAAyB/K,EAAcC,EAAc+K,GAAiB,GACnG,MAAMC,EAAeC,YAAYC,MACjC,GAAGH,GAASC,EAAe7H,KAAKkH,mBAA4C,GAAvBlH,KAAKmH,eV1BnB,IACA,IUyB6F,CAChInH,KAAKkH,kBAAoBW,EACzB7H,KAAKmH,gBAAkB,EACpBnH,KAAKmH,eAAiB,IACrBnH,KAAKmH,eAAiB,GAG1B,MAAMa,EAAqBN,EAAY/K,kBAAkBgL,EAAU/K,EAAMC,GAMzE,OAJG+K,GAASI,GACRhI,KAAKoH,eAAexB,SAAShJ,EAAMC,GAGhCmL,CACX,CAEA,OAAO,CACX,CAGAC,cACIjI,KAAKmH,eAAiB,CAC1B,CAGAe,mBACI,OAAOlI,KAAKoH,cAChB,CAEAe,kBACI,OAAOnI,KAAKqH,aAChB,CAEAe,aACI,OAAOpI,KAAKsH,QAChB,CAEAe,eACI,OAAOrI,KAAKuH,UAChB,CAEAe,YAAYlO,GACL4F,KAAKqH,cAAckB,IAAInO,IACtB4F,KAAKqH,cAAczI,OAAOxE,EAElC,CAEAoO,YAAYtP,EAAeC,EAAeiB,EAAeI,GACrDwF,KAAKqH,cAAcxI,IAAIzE,EAAO,IAAI6L,EAAU/M,EACAC,EACA6G,KAAKiH,kBACLzM,GAChD,CAEAiO,oBAAoBnO,EAAWC,GAC3ByF,KAAKsH,SAASlC,aAAa9K,EAAGC,EAClC,CAEAmO,kBAAkB1P,GACdgH,KAAKsH,SAASd,WAAWxN,EAC7B,CAEA2P,iBAAiBvP,GACb4G,KAAKsH,SAASjC,UAAUjM,EAC5B,CAEAwP,gBAAgBvP,GACZ2G,KAAKsH,SAASb,SAASpN,EAC3B,CAEAwP,qBAAqBpP,EAAgBa,EAAWC,GAC5C,GAAGyF,KAAKuH,WAAWgB,IAAI9O,GAAS,CAC5B,MAAMqP,EAAU9I,KAAKuH,WAAW7I,IAAIjF,GACjCqP,GACCA,EAAQ1D,aAAa9K,EAAGC,EAEhC,KAAO,CACH,MAAMuO,EAAU,IAAIjC,EACpBiC,EAAQ1D,aAAa9K,EAAGC,GAExByF,KAAKuH,WAAW1I,IAAIpF,EAAQqP,EAChC,CACJ,CAEAC,mBAAmBtP,EAAgBT,GAC/B,GAAGgH,KAAKuH,WAAWgB,IAAI9O,GAAS,CAC5B,MAAMqP,EAAU9I,KAAKuH,WAAW7I,IAAIjF,GACjCqP,GACCA,EAAQtC,WAAWxN,EAE3B,KAAO,CACH,MAAM8P,EAAU,IAAIjC,EACpBiC,EAAQtC,WAAWxN,GAEnBgH,KAAKuH,WAAW1I,IAAIpF,EAAQqP,EAChC,CACJ,CAEAE,kBAAkBvP,EAAgBL,GAC9B,GAAG4G,KAAKuH,WAAWgB,IAAI9O,GAAS,CAC5B,MAAMqP,EAAU9I,KAAKuH,WAAW7I,IAAIjF,GACjCqP,GACCA,EAAQzD,UAAUjM,EAE1B,KAAO,CACH,MAAM0P,EAAU,IAAIjC,EACpBiC,EAAQzD,UAAUjM,GAElB4G,KAAKuH,WAAW1I,IAAIpF,EAAQqP,EAChC,CACJ,CAEAG,iBAAiBxP,EAAgBJ,GAC7B,GAAG2G,KAAKuH,WAAWgB,IAAI9O,GAAS,CAC5B,MAAMqP,EAAU9I,KAAKuH,WAAW7I,IAAIjF,GACjCqP,GACCA,EAAQrC,SAASpN,EAEzB,KAAO,CACH,MAAMyP,EAAU,IAAIjC,EACpBiC,EAAQrC,SAASpN,GAEjB2G,KAAKuH,WAAW1I,IAAIpF,EAAQqP,EAChC,CACJ,CAEApO,eAAejB,GACRuG,KAAKuH,WAAWgB,IAAI9O,IACnBuG,KAAKuH,WAAW3I,OAAOnF,EAE/B,ECnKG,SAASyP,EAAkBjG,EAA2BkG,GACzD,MAAMC,EAAcnG,EAAOoG,wBAC3B,MAAO,CAACF,EAAYG,QAAUF,EAAYG,KAAMJ,EAAYK,QAAUJ,EAAYK,IACtF,CCHO,MAAMC,GCEN,MAAMC,UAAsBD,EAG/B3J,YAAY6J,GACRjE,QAEA3F,KAAK6J,eAAiBC,SAASC,eAAeH,EAClD,CAEAI,OACOhK,KAAK6J,iBACJ7J,KAAK6J,eAAeI,MAAMC,WAAa,UAE/C,CAEAC,OACOnK,KAAK6J,iBACJ7J,KAAK6J,eAAeI,MAAMC,WAAa,SAE/C,ECnBG,MAAME,UAA0BT,EACnC5J,YAAY6J,GACRjE,MAAMiE,EACV,CAEAS,SAASC,GACFtK,KAAK6J,iBACJ7J,KAAK6J,eAAeU,UAAYD,EAExC,ECTG,MAAME,UAAmBJ,EAC5BK,cAAwB,EACxBC,QAAkB,EAClBC,QAAkB,EAElB5K,YAAY6J,GACRjE,MAAMiE,EAGV,CAEA9D,OAAOpJ,GAGHsD,KAAKyK,eAAiB/N,EACtBsD,KAAK0K,SAAW,EAEb1K,KAAKyK,cAAgB,IACpBzK,KAAK2K,QAAU3K,KAAK0K,QAAU1K,KAAKyK,cAGnCzK,KAAKyK,cAAgB,EACrBzK,KAAK0K,QAAU,EAEf1K,KAAKqK,UAAU9J,KAAKqK,MAAqB,IAAf5K,KAAK2K,SAAiB,KAAKE,QAAQ,GAAG9I,YAExE,EC1BG,MAAM+I,EAIT/K,YAAYgL,EAAkBC,GAC1BhL,KAAKiL,gBAAkB,IAAIb,EAAkBW,GAC7C/K,KAAKkL,kBAAoB,IAAId,EAAkBY,EACnD,CAEAG,cAAcC,EAAeC,GACtBrL,KAAKiL,iBACJjL,KAAKiL,gBAAgBZ,SAASe,EAAMrJ,YAGrC/B,KAAKkL,mBACJlL,KAAKkL,kBAAkBb,SAASgB,EAAQtJ,WAEhD,ECfG,MAAMuJ,EACTlJ,UAAoB,EAOpBmJ,mBAAmB3B,GACf5J,KAAKwL,MAAQ,IAAIhB,EAAWZ,EAChC,CAEA6B,sBAAsBV,EAAkBC,GACpChL,KAAK0L,QAAU,IAAIZ,EAAQC,EAAUC,EACzC,CAEAW,oBAAoB/B,GAChB5J,KAAK4L,eAAiB,IAAIjC,EAAcC,EAC5C,CAEAiC,eAAejC,GACX5J,KAAK8L,UAAY,IAAInC,EAAcC,EACvC,CAEAmC,oBAAoBX,EAAeC,GAC5BrL,KAAK0L,SACJ1L,KAAK0L,QAAQP,cAAcC,EAAOC,EAE1C,CAEAW,WACIhM,KAAK4L,eAAe5B,MACxB,CAEAiC,YACIjM,KAAK4L,eAAezB,MACxB,CAEA+B,eACIlM,KAAK8L,UAAU3B,MACnB,CAEArE,OAAOpJ,GACAsD,KAAKoC,UACJpC,KAAKwL,MAAM1F,OAAOpJ,EAE1B,ECvCG,MAAeyP,EAiBlBC,cAAgBC,EAChBC,YAAsB,EAGtBvJ,UAAuB,IAAItD,EAC3B8M,YAAsB,EACtBC,kBAA4B,EAG5BC,uBAAiC,EAEjCC,kBAA4B,EAC5BC,YAAsB,EA6BtB5M,cAEIrI,WAAWW,KAAO,CACdC,aAAc0H,KAAK1H,aAAasU,KAAK5M,MACrCjH,eAAgBiH,KAAKjH,eAAe6T,KAAK5M,MACzCxH,mBAAoBwH,KAAKxH,mBAAmBoU,KAAK5M,MACjD3F,YAAa2F,KAAK3F,YAAYuS,KAAK5M,MACnCvF,YAAauF,KAAKvF,YAAYmS,KAAK5M,MACnC/G,cAAe+G,KAAK/G,cAAc2T,KAAK5M,MACvC1G,sBAAuB0G,KAAK1G,sBAAsBsT,KAAK5M,MACvDrF,eAAgBqF,KAAKrF,eAAeiS,KAAK5M,MACzCtG,uBAAwBsG,KAAKtG,uBAAuBkT,KAAK5M,MACzDtF,eAAgBsF,KAAKtF,eAAekS,KAAK5M,MACzCxG,6BAA8BwG,KAAKxG,6BAA6BoT,KAAK5M,MACrEpG,uBAAwBoG,KAAKpG,uBAAuBgT,KAAK5M,MACzD7F,mBAAoB6F,KAAK7F,mBAAmByS,KAAK5M,OAIrDA,KAAK6M,KAAO,IAAIvB,EAChBtL,KAAK6M,KAAKtB,mBAAmB,OAC7BvL,KAAK6M,KAAKpB,sBAAsB,cAAe,iBAC/CzL,KAAK6M,KAAKlB,oBAAoB,SAC9B3L,KAAK6M,KAAKhB,eAAe,WAIzB7L,KAAK8M,eAAiBhD,SAASC,eAAe,UAC9C/J,KAAK+M,YAAc/M,KAAK8M,eAAeE,WAAW,MAGlDhN,KAAKiN,aAAenD,SAASC,eAAe,cAC5C/J,KAAKkN,UAAYlN,KAAKiN,aAAaD,WAAW,MAG9ChN,KAAKiN,aAAahD,MAAMkD,cAAgB,OAGxCnN,KAAKoN,eAAiBtF,YAAYC,MAGlCsF,OAAOC,iBAAiB,eAAeC,GAASA,EAAMC,mBAGtD,MAAMC,EAAazN,KAEnB8J,SAAS4D,UAAY,SAASH,GAC1BE,EAAWE,UAAUJ,EAAMK,IAC/B,EAGA5N,KAAK8M,eAAeQ,iBAAiB,aAAa,SAASC,GACvDE,EAAWI,kBAAkBN,EACjC,IACAvN,KAAK8M,eAAeQ,iBAAiB,WAAW,SAASC,GACrDE,EAAWK,oBAAoBP,EACnC,IACAzD,SAASiE,YAAc,SAASR,GAC5BE,EAAWO,cAAgBT,CAC/B,EACAzD,SAASwD,iBAAiB,oBAAqB,WAC3CG,EAAWQ,wBACf,IAGAC,MAAM,wBACDC,MAAMC,GAAavT,YAAYwT,iBAAiBD,KAChDD,MAAM1M,GAAWvK,EAAYuK,EAAQ,CAAEnK,IAAK,CAAC,IAC7C6W,MAAMhX,IACHsW,EAAWrB,SAAWjV,EACtBmX,QAAQC,IAAI,8BAA+BzG,YAAYC,MAAQ0F,EAAWL,gBAAkB,IAAQ,WACpGK,EAAWL,eAAiBtF,YAAYC,MAGxC,MAAMyG,EAAerX,EAAO+D,kBAGtBI,EAAOiF,KAAKkD,MAAsB,WAAhBlD,KAAKkO,UAC7BH,QAAQC,IAAI,QAASjT,GACrBnE,EAAOiE,kBAAkBoT,EAAclT,GACvCnE,EAAOkF,8BAA8BmS,EAAc,GACnDrX,EAAOgF,oCAAoCqS,EAAc,GACzDrX,EAAOsE,sBAAsB+S,EACzB,GACA,EAAG,EACH,IAIJrX,EAAO2E,uBAAuB0S,GAAc,GAC5CrX,EAAO6E,yBAAyBwS,GAAc,GAAM,GAOpDf,EAAWiB,WAAavX,EAAOoF,YAAYiS,GAE3CF,QAAQC,IAAI,uBAAwBzG,YAAYC,MAAQ0F,EAAWL,gBAAkB,IAAQ,WAC7FK,EAAWL,eAAiBtF,YAAYC,MAGxC0F,EAAWpQ,QACXoQ,EAAWnB,YAAa,EAGxBmB,EAAWZ,KAAKZ,YAChBwB,EAAWZ,KAAKX,cAAY,KAExC,CAEA+B,yBACQnE,SAAS6E,OACT3O,KAAK+F,aAED/F,KAAK2M,YACL3M,KAAK4F,UAGjB,CAEAA,WACI5F,KAAK0M,kBAAmB,EACxB1M,KAAKoN,eAAiBtF,YAAYC,MAElC/H,KAAK6M,KAAKZ,WACd,CAEAlG,aACI/F,KAAK0M,kBAAmB,EAExB1M,KAAK6M,KAAKb,UACd,CAEA4C,kBACO5O,KAAK0M,kBACJ1M,KAAK+F,aACL/F,KAAK2M,YAAa,IAElB3M,KAAK4F,WACL5F,KAAK2M,YAAa,EAE1B,CAEAkB,kBAAkBN,GAEd,GADAvN,KAAKgO,cAAgBT,EAClBvN,KAAKsM,YAActM,KAAK0M,iBAAkB,CACzC1M,KAAKwM,kBAAmB,EAExB,MAAM7K,EAAIuH,EAAkBlJ,KAAK8M,eAAgBS,GAC3CsB,EAAU7O,KAAK8O,eAAenN,EAAE,GAAIA,EAAE,IACzB3B,KAAK+O,QAAQtH,eAAezH,KAAKoM,SAAUpM,KAAK0O,WAAYG,EAAQ,GAAIA,EAAQ,IAAI,IAInG7O,KAAKgP,YAAYrN,EAAE,GAAIA,EAAE,GAAIkN,EAAQ,GAAIA,EAAQ,GAEzD,CACJ,CAEAf,oBAAoBP,GACbvN,KAAKsM,aACJtM,KAAKwM,kBAAmB,EACxBxM,KAAK+O,QAAQ9G,cAErB,CAEA0F,UAAUC,GACH5N,KAAKsM,aACM,UAAPsB,EAEC5N,KAAK4O,kBACC5O,KAAK0M,mBAED,KAAPkB,EAEC5N,KAAKoM,SAAStP,kBAAkBkD,KAAK0O,YACxB,KAAPd,EACN5N,KAAKiP,MAAMtL,gBACE,KAAPiK,EACN5N,KAAKiP,MAAMrL,WACE,KAAPgK,GACN5N,KAAKiP,MAAMpL,cAI3B,CAEAiC,SACI,GAAI9F,KAAK0M,iBAAkB,CAIvB,GAAG1M,KAAKwM,kBAAoBxM,KAAKgO,eAAiBhO,KAAK8M,eAAgB,CACnE,MAAMnL,EAAIuH,EAAkBlJ,KAAK8M,eAAgB9M,KAAKgO,eAChDa,EAAU7O,KAAK8O,eAAenN,EAAE,GAAIA,EAAE,IAC5C3B,KAAK+O,QAAQtH,eAAezH,KAAKoM,SAAUpM,KAAK0O,WAAYG,EAAQ,GAAIA,EAAQ,GACpF,CAGA,MAAMK,EAAOpH,YAAYC,MAEnBrL,GAAMwS,EAAOlP,KAAKoN,gBAAkB,IAE1CpN,KAAKoN,eAAiB8B,EAGnBlP,KAAKoM,UAGJpM,KAAKoM,SAAS5P,YAAYwD,KAAK0O,WAAYhS,GAG/CsD,KAAK+O,QAAQ7G,mBAAmBpC,OAAOpJ,GAEvCsD,KAAK6M,KAAK/G,OAAOpJ,GACjBsD,KAAK6M,KAAKd,oBAAoB/L,KAAKyM,uBAAwBzM,KAAK+O,QAAQ1G,eAAe8G,KAC3F,CAGAnP,KAAKoP,UACT,CAEAA,WACOpP,KAAKiP,OACJjP,KAAKiP,MAAMnL,MAEnB,CAKAxL,aAAaJ,EAAqBC,EAAsBC,GACpD4H,KAAK+G,cAAgB7O,EACrB8H,KAAKgH,eAAiB7O,EACtB6H,KAAKiH,kBAAoB7O,EAGzB4H,KAAK+O,QAAU,IAAIjI,EAAM9G,KAAK+G,cAC1B/G,KAAKgH,eACLhH,KAAKiH,mBAETjH,KAAKuM,YlBxT2B,GkBwTMvM,KAAKiH,kBAC3CjH,KAAK+C,UAAUjC,kBAAkBd,KAAKuM,YAC1C,CAEAxT,eAAeN,EAAwBC,EAAsBC,GAKzDqH,KAAKiP,MAAQ,IAAI9M,EAASnC,KAAKkN,UAC3BlN,KAAK+C,UACL/C,KAAKiH,kBACLxO,EACAC,EACAC,EACR,CAEAH,mBAAmBD,GAGnB,CAEA8B,YAAYD,GACR4F,KAAK+O,QAAQzG,YAAYlO,GACzB4F,KAAKqP,kBAAkBjV,EAC3B,CAEAK,YAAYH,EAAWC,EAAWH,EAAeI,GAC7C,MAAMtB,EAAQoB,EAAI0F,KAAKiH,kBACjB9N,EAAQoB,EAAIyF,KAAKiH,kBAEvBjH,KAAK+O,QAAQvG,YAAYtP,EAAOC,EAAOiB,EAAOI,GAC9CwF,KAAKsP,kBAAkBpW,EAAOC,EAAOiB,EAAOI,EAChD,CAEAvB,cAAcD,GACVgH,KAAK+O,QAAQrG,kBAAkB1P,GAC/BgH,KAAKuP,oBAAoBvW,EAC7B,CAEAM,sBAAsBJ,EAAeC,EAAeC,EAAeC,GAC/D2G,KAAK+O,QAAQtG,oBAAoBvP,EAAOC,GACxC6G,KAAK+O,QAAQpG,iBAAiBvP,GAC9B4G,KAAK+O,QAAQnG,gBAAgBvP,GAC7B2G,KAAKwP,4BAA4BtW,EAAOC,EAAOC,EAAOC,EAC1D,CAEAsB,eAAelB,EAAgBT,GAC3BgH,KAAK+O,QAAQhG,mBAAmBtP,EAAQT,GACxCgH,KAAKyP,qBAAqBhW,EAAQT,EACtC,CAEAU,uBAAuBD,EAAgBP,EAAeC,EAAeC,EAAeC,GAChF2G,KAAK+O,QAAQlG,qBAAqBpP,EAAQP,EAAOC,GACjD6G,KAAK+O,QAAQ/F,kBAAkBvP,EAAQL,GACvC4G,KAAK+O,QAAQ9F,iBAAiBxP,EAAQJ,GACtC2G,KAAK0P,6BAA6BjW,EAAQP,EAAOC,EAAOC,EAAOC,EACnE,CAEAqB,eAAejB,GACXuG,KAAK+O,QAAQrU,eAAejB,GAC5BuG,KAAK2P,qBAAqBlW,EAC9B,CAEAD,6BAA6BD,GACzByG,KAAKyM,uBAAyBlT,CAClC,CAEAK,uBAAuBH,EAAgBE,GACnC,MAAMiW,EAAc,IAAIjQ,aAAahG,EAAOiE,QAC5C,IAAI,IAAIO,EAAI,EAAGA,EAAIyR,EAAYhS,OAAQO,IACnCyR,EAAYzR,GAAKxE,EAAOwE,GAE5B6B,KAAK6P,wBAAwBpW,EAAQmW,EACzC,CAEAzV,mBAAmBN,EAAYC,EAAgBC,EAAgBC,EAAYC,EAAgBC,GACvF8F,KAAK8P,wBAAwBjW,EAAIC,EAAQC,EAAQC,EAAIC,EAAQC,EACjE,ECvXG,SAAS6V,EAAYC,EACAC,EACAC,GACxB,GAAGA,EAAOrK,aAAc,CACpB,MAAMsK,EAAe5P,KAAK6P,IAAI7P,KAAK8P,IAAIH,EAAOlK,iBAAkB,GAAM,KAGtEgK,EAAS/L,OACT+L,EAAS5L,UjBHwB,EiBIjC4L,EAAS9L,UjBNiB,2BiBO1B8L,EAAS7L,YAAclC,EACvB+N,EAASzL,YACT,MAAMQ,EAAWkL,EAAQjP,eAAekP,EAAO3K,mBACzC+K,EAAWL,EAAQ/O,YnB1BU,ImB0ByBiP,EAC5DH,EAAShL,IAAID,EAAS,GAAIA,EAAS,GAAIuL,EAAU,EAAG,EAAI/P,KAAK0E,IAC7D+K,EAASnL,OACTmL,EAASlL,SAGTkL,EAASzL,YACTyL,EAAS9L,UAAYjC,EACrB+N,EAAShL,IAAID,EAAS,GAAIA,EAAS,GjBfH,EiBeiC,EAAG,EAAIxE,KAAK0E,IAC7E+K,EAASnL,OACTmL,EAAS9K,SACb,CACJ,CAEO,SAASqL,EAAgBP,EACAC,EACAO,GAC5B,MAAMC,EAAWR,EAAQjP,eAAewP,EAAKjL,mBACvCmL,EAAST,EAAQ/O,YAAYsP,EAAKrK,iBAClC3L,EAAOgW,EAAKpK,WAClB4J,EAAS/L,OACT+L,EAAS5L,UjBpCoB,GiBqC7B4L,EAAS9L,UjBnCsB,qBiBoC/B8L,EAAS7L,YjBrCoB,qBiBuC7B6L,EAASzL,YAEE,GAAR/J,EAECwV,EAASW,KAAKF,EAAS,GAAIA,EAAS,GAAIC,EAAQA,GAClC,GAARlW,EACNwV,EAASW,KAAKF,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,EAAGA,EAAS,EAAGA,EAAS,GACzE,GAARlW,EACNwV,EAASW,KAAKF,EAAS,GAAIA,EAAS,GAAKC,EAAS,EAAGA,EAAS,EAAGA,EAAS,GAC5D,GAARlW,EACNwV,EAASW,KAAKF,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAIC,EAAS,EAAGA,EAAS,GAC5D,GAARlW,EACNwV,EAASW,KAAKF,EAAS,GAAIA,EAAS,GAAIC,EAAS,EAAGA,EAAS,GAC/C,GAARlW,EACNwV,EAASW,KAAKF,EAAS,GAAIA,EAAS,GAAKC,EAAS,EAAGA,EAAQA,EAAS,GACxD,GAARlW,EACNwV,EAASW,KAAKF,EAAS,GAAIA,EAAS,GAAIC,EAAS,EAAGA,GACtC,GAARlW,EACNwV,EAASW,KAAKF,EAAS,GAAIA,EAAS,GAAIC,EAAQA,EAAS,GAC3C,GAARlW,EACNwV,EAASW,KAAKF,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAIC,EAAS,EAAGA,GACnD,IAARlW,GACNwV,EAASrL,OAAO8L,EAAS,GAAIA,EAAS,IACtCT,EAASpL,OAAO6L,EAAS,GAAIA,EAAS,GAAKC,GAC3CV,EAASpL,OAAO6L,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,GACxDV,EAASpL,OAAO6L,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,GACjEV,EAASpL,OAAO6L,EAAS,GAAKC,EAAQD,EAAS,GAAKC,EAAS,GAC7DV,EAASpL,OAAO6L,EAAS,GAAKC,EAAQD,EAAS,KACjC,IAARjW,GACNwV,EAASrL,OAAO8L,EAAS,GAAIA,EAAS,IACtCT,EAASpL,OAAO6L,EAAS,GAAIA,EAAS,GAAKC,EAAS,GACpDV,EAASpL,OAAO6L,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,GACjEV,EAASpL,OAAO6L,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,GACxDV,EAASpL,OAAO6L,EAAS,GAAKC,EAAQD,EAAS,GAAKC,GACpDV,EAASpL,OAAO6L,EAAS,GAAKC,EAAQD,EAAS,KACjC,IAARjW,GACNwV,EAASrL,OAAO8L,EAAS,GAAIA,EAAS,IACtCT,EAASpL,OAAO6L,EAAS,GAAIA,EAAS,GAAKC,GAC3CV,EAASpL,OAAO6L,EAAS,GAAKC,EAAQD,EAAS,GAAKC,GACpDV,EAASpL,OAAO6L,EAAS,GAAKC,EAAQD,EAAS,GAAKC,EAAS,GAC7DV,EAASpL,OAAO6L,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,GACjEV,EAASpL,OAAO6L,EAAS,GAAKC,EAAS,EAAGD,EAAS,KACrC,IAARjW,IACNwV,EAASrL,OAAO8L,EAAS,GAAIA,EAAS,GAAKC,EAAS,GACpDV,EAASpL,OAAO6L,EAAS,GAAIA,EAAS,GAAKC,GAC3CV,EAASpL,OAAO6L,EAAS,GAAKC,EAAQD,EAAS,GAAKC,GACpDV,EAASpL,OAAO6L,EAAS,GAAKC,EAAQD,EAAS,IAC/CT,EAASpL,OAAO6L,EAAS,GAAKC,EAAS,EAAGD,EAAS,IACnDT,EAASpL,OAAO6L,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,IAGrEV,EAASnL,OAELmL,EAASlL,SAEbkL,EAAS9K,SACb,CAEA,SAAS0L,EAAYZ,EACAC,EACAY,EACAC,EACAC,EACAC,EACAC,EACAC,GACjBlB,EAAS/L,OACT+L,EAAS5L,UAAY0M,EACrBd,EAAS9L,UAAY2M,EAAOnK,WAAaqK,EAAaC,EACtDhB,EAAS7L,YAAc8M,EACvBjB,EAASzL,YAET,MAAM4M,EAAaN,EAAOvL,UACpB8L,EAAMnB,EAAQ7O,aAAa+P,GAE3BpM,EAAWqM,EAAIrQ,SAAS,EAAK,GAE7B/H,EAAS6X,EAAOlK,aAChB2J,EAAWc,EAAIlQ,YAAYlI,GAC3BqY,EAAKD,EAAIrQ,SAAS/H,EAASuH,KAAK+Q,MAAO,GACvC/P,EAAI4P,EAAWvQ,WACrBoP,EAAShL,IAAID,EAAS,GAAIA,EAAS,GAAIuL,EAAU/O,EAAIhB,KAAK0E,GAAK,EAAG,EAAI1E,KAAK0E,GAAK1D,EAAIhB,KAAK0E,GAAK,GAC9F+K,EAASpL,OAAOyM,EAAG,GAAIA,EAAG,IAC1BrB,EAASnL,OAENqM,GACClB,EAASlL,SAEbkL,EAAS9K,SACb,CAEO,SAASqM,EAAYvB,EACAC,EACAuB,GAExBZ,EAAYZ,EACRC,EACAuB,EjBrJ2B,EAGF,yBiBqJzBxP,EjBvJ2B,mBAFH,MiB4JhC,CAEO,SAASyP,EAAazB,EACAC,EACAuB,GAEzBZ,EAAYZ,EACRC,EACAuB,EjB7J4B,EAGF,yBADA,0BADE,mBAFH,MiBoKjC,CAEO,SAASE,EAAgB1B,EACAC,EACAL,GAC5BI,EAAS/L,OACT+L,EAAS5L,UjBrJyB,EiBsJlC4L,EAAS7L,YjBvJyB,oBiBwJlC6L,EAASzL,YACT,MAAMoN,EAAe/B,EAAYhS,OAAS,EACpC+D,EAAIsO,EAAQlP,SAAS6O,EAAY,GAAIA,EAAY,IACvDI,EAASrL,OAAOhD,EAAE,GAAIA,EAAE,IACxB,IAAI,IAAIxD,EAAI,EAAGA,EAAIwT,EAAcxT,IAAK,CAClC,MAAMyT,EAAI3B,EAAQlP,SAAS6O,EAAY,EAAEzR,GAAIyR,EAAY,EAAEzR,EAAE,IAC7D6R,EAASpL,OAAOgN,EAAE,GAAIA,EAAE,GAC5B,CACA5B,EAASlL,SACTkL,EAAS9K,SACb,CAEO,SAAS2M,EAAW7B,EACAC,EACA6B,GACvB9B,EAAS/L,OACT+L,EAAS5L,UjBpK2B,EiBqKpC4L,EAAS7L,YjBtK2B,mBiBuKpC6L,EAASzL,YACT,MAAMwN,EAAcD,EAAMlU,OAAS,EACnC,IAAI,IAAIO,EAAI,EAAGA,EAAI4T,EAAa5T,IAAK,CACjC,MAAM6T,EAAU/B,EAAQlP,SAAS+Q,EAAM,EAAE3T,GAAI2T,EAAM,EAAE3T,EAAI,IACnD8T,EAAWhC,EAAQlP,SAAS+Q,EAAM,EAAE3T,EAAI,GAAI2T,EAAM,EAAE3T,EAAI,IAC9D6R,EAASrL,OAAOqN,EAAQ,GAAIA,EAAQ,IACpChC,EAASpL,OAAOqN,EAAS,GAAIA,EAAS,GAC1C,CACAjC,EAASlL,SACTkL,EAAS9K,SACb,CC5Ma,ICMN,cAA+BiH,EAIlC+F,oBAA8B,EAC9BC,oBAA8B,EAE9BC,qBAAkD,IAAI/S,IAGtDU,cACI4F,QAEA3F,KAAKgD,eAAiBhD,KAAK8M,eAAe5J,MAC1ClD,KAAKmD,gBAAkBnD,KAAK8M,eAAe1J,OAE3CpD,KAAKoS,qBAAqBC,QAC1BrS,KAAKsS,cAAgB,IAAIpU,KAC7B,CAEAb,QACI2C,KAAKuS,gBACT,CAEAzD,eAAelS,EAAcC,GAKzB,OAFgBmD,KAAK+C,UAAUlB,UACXd,SAASnE,EAAMC,EAEvC,CAGAwS,kBAAkBjV,GAAuB,CACzCkV,kBAAkBpW,EAAeC,EAAeiB,EAAeI,GAAsB,CACrF+U,oBAAoBvW,GAAwB,CAC5CgW,YAAYwD,EAAeC,EAAeC,EAAeC,GAAuB,CAEhFnD,4BAA4BtW,EAAeC,EAAeC,EAAeC,GAErE2G,KAAKkS,oBrB5CkC,EqB4CchZ,EAAQ,EAAgC8G,KAAKkS,oBAClGlS,KAAKmS,oBrB7CkC,EqB6CchZ,EAAQ,EAAgC6G,KAAKmS,oBAElGnS,KAAK+C,UAAU3C,gBAAgBJ,KAAKgD,eAAiB,EAAIhD,KAAKkS,oBAAsBlS,KAAKuM,YAAavM,KAAKmD,gBAAkB,EAAInD,KAAKmS,oBAAsBnS,KAAKuM,YACrK,CACAkD,qBAAqBhW,EAAgBT,GAAwB,CAC7D0W,6BAA6BjW,EAAgBP,EAAeC,EAAeC,EAAeC,GAA0B,CACpHsW,qBAAqBlW,GAAuB,CAE5CoW,wBAAwBpW,EAAgBmW,GAGpC5P,KAAKoS,qBAAqBvT,IAAIpF,EAAQmW,EAC1C,CAEAE,wBAAwB8C,EAAkBC,EAAiBC,EAAiBC,EAAkBC,EAAiBC,GAC3GjT,KAAKsS,cAAcY,KAAKL,GACxB7S,KAAKsS,cAAcY,KAAKJ,GAExB9S,KAAKsS,cAAcY,KAAKF,GACxBhT,KAAKsS,cAAcY,KAAKD,EAC5B,CAEAV,iBAGIvS,KAAKoS,qBAAqBC,QAC1BrS,KAAKsS,cAAc1U,OAAS,EAE5BoC,KAAK8F,SAGL9F,KAAKmT,aAEL9F,OAAO+F,sBAAsBpT,KAAKuS,eAAe3F,KAAK5M,MAC1D,CAEAmT,aF7EG,IAAyBnD,EAAoC9M,EAAeE,EE+E3EpD,KAAK+M,YAAYhJ,UAAU,EAAG,EAAG/D,KAAKgD,eAAgBhD,KAAKmD,iBF/EnC6M,EEgFRhQ,KAAK+M,YFhFuC7J,EEgF1BlD,KAAK8M,eAAe5J,MFhFqBE,EEgFdpD,KAAK8M,eAAe1J,OF/ErF4M,EAAS/L,OACT+L,EAAS9L,UjBMyB,kBiBLlC8L,EAASqD,SAAS,EAAG,EAAGnQ,EAAOE,GAC/B4M,EAAS9K,UEgFL,MAAMoO,EAActT,KAAK+O,QAAQ5G,kBACjC,IAAI,IAAKoL,EAAY/C,KAAS8C,EAC1B/C,EAAgBvQ,KAAK+M,YAAa/M,KAAK+C,UAAWyN,GAItD,MAAMgD,EAAexT,KAAK+O,QAAQ7G,mBAClC6H,EAAY/P,KAAK+M,YAAa/M,KAAK+C,UAAWyQ,GAG9C,MAAMhC,EAASxR,KAAK+O,QAAQ3G,aAC5BmJ,EAAYvR,KAAK+M,YAAa/M,KAAK+C,UAAWyO,GAG9C,MAAMiC,EAAWzT,KAAK+O,QAAQ1G,eAC9B,IAAI,IAAK5O,EAAQqP,KAAY2K,EACzBhC,EAAazR,KAAK+M,YAAa/M,KAAK+C,UAAW+F,GAInD,IAAI,IAAKrP,EAAQmW,KAAgB5P,KAAKoS,qBAClCV,EAAgB1R,KAAK+M,YAAa/M,KAAK+C,UAAW6M,GAItDiC,EAAW7R,KAAK+M,YAAa/M,KAAK+C,UAAW/C,KAAKsS,cACtD","sources":["wasm/build/game_api.js","src/constants.ts","src/transform.ts","src/client_data_canvas/visual_styles.ts","src/scene/scene_map.ts","src/scene/scene_item.ts","src/scene/click_cursor.ts","src/scene/scene_tile.ts","src/scene/person.ts","src/scene/player.ts","src/scene/monster.ts","src/scene/scene.ts","src/utilities.ts","src/ui/ui_element.ts","src/ui/ui_html_element.ts","src/ui/ui_html_text_element.ts","src/ui/ui_fps.ts","src/ui/ui_items.ts","src/ui/ui.ts","src/client_base.ts","src/client_data_canvas/draws.ts","src/index.ts","src/client_data_canvas/client_data_canvas.ts"],"sourcesContent":["export async function instantiate(module, imports = {}) {\n  const adaptedImports = {\n    env: Object.assign(Object.create(globalThis), imports.env || {}, {\n      abort(message, fileName, lineNumber, columnNumber) {\n        // ~lib/builtins/abort(~lib/string/String | null?, ~lib/string/String | null?, u32?, u32?) => void\n        message = __liftString(message >>> 0);\n        fileName = __liftString(fileName >>> 0);\n        lineNumber = lineNumber >>> 0;\n        columnNumber = columnNumber >>> 0;\n        (() => {\n          // @external.js\n          throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);\n        })();\n      },\n      \"host.define_level\"(level_width, level_height, tile_size) {\n        // assembly/external/define_level(u32, u32, f32) => void\n        level_width = level_width >>> 0;\n        level_height = level_height >>> 0;\n        host.define_level(level_width, level_height, tile_size);\n      },\n      \"host.define_total_tiles\"(total_tiles) {\n        // assembly/external/define_total_tiles(u32) => void\n        total_tiles = total_tiles >>> 0;\n        host.define_total_tiles(total_tiles);\n      },\n      \"host.define_navmesh\"(vertices, polygons, sizes) {\n        // assembly/external/define_navmesh(~lib/staticarray/StaticArray<f32>, ~lib/staticarray/StaticArray<i32>, ~lib/staticarray/StaticArray<i32>) => void\n        vertices = __liftStaticArray(__getF32, 2, vertices >>> 0);\n        polygons = __liftStaticArray(__getI32, 2, polygons >>> 0);\n        sizes = __liftStaticArray(__getI32, 2, sizes >>> 0);\n        host.define_navmesh(vertices, polygons, sizes);\n      },\n      \"host.create_player\"(radius) {\n        // assembly/external/create_player(f32) => void\n        host.create_player(radius);\n      },\n      \"host.define_player_changes\"(pos_x, pos_y, angle, is_move) {\n        // assembly/external/define_player_changes(f32, f32, f32, bool) => void\n        is_move = is_move != 0;\n        host.define_player_changes(pos_x, pos_y, angle, is_move);\n      },\n      \"host.define_total_update_entities\"(count) {\n        // assembly/external/define_total_update_entities(u32) => void\n        count = count >>> 0;\n        host.define_total_update_entities(count);\n      },\n      \"host.define_monster_changes\"(entity, pos_x, pos_y, angle, is_move) {\n        // assembly/external/define_monster_changes(u32, f32, f32, f32, bool) => void\n        entity = entity >>> 0;\n        is_move = is_move != 0;\n        host.define_monster_changes(entity, pos_x, pos_y, angle, is_move);\n      },\n      \"host.debug_entity_walk_path\"(entity, points) {\n        // assembly/external/debug_entity_walk_path(u32, ~lib/staticarray/StaticArray<f32>) => void\n        entity = entity >>> 0;\n        points = __liftStaticArray(__getF32, 2, points >>> 0);\n        host.debug_entity_walk_path(entity, points);\n      },\n      \"host.debug_close_entity\"(e1, pos_x1, pos_y1, e2, pos_x2, pos_y2) {\n        // assembly/external/debug_close_entity(u32, f32, f32, u32, f32, f32) => void\n        e1 = e1 >>> 0;\n        e2 = e2 >>> 0;\n        host.debug_close_entity(e1, pos_x1, pos_y1, e2, pos_x2, pos_y2);\n      },\n      \"host.tile_delete\"(index) {\n        // assembly/external/tile_delete(u32) => void\n        index = index >>> 0;\n        host.tile_delete(index);\n      },\n      \"host.tile_create\"(x, y, index, type) {\n        // assembly/external/tile_create(u32, u32, u32, u32) => void\n        x = x >>> 0;\n        y = y >>> 0;\n        index = index >>> 0;\n        type = type >>> 0;\n        host.tile_create(x, y, index, type);\n      },\n      \"host.remove_monster\"(entity) {\n        // assembly/external/remove_monster(u32) => void\n        entity = entity >>> 0;\n        host.remove_monster(entity);\n      },\n      \"host.create_monster\"(entity, radius) {\n        // assembly/external/create_monster(u32, f32) => void\n        entity = entity >>> 0;\n        host.create_monster(entity, radius);\n      },\n    }),\n  };\n  const { exports } = await WebAssembly.instantiate(module, adaptedImports);\n  const memory = exports.memory || imports.env.memory;\n  const adaptedExports = Object.setPrototypeOf({\n    create_settings() {\n      // assembly/game_api/create_settings() => assembly/game/settings/Settings\n      return __liftInternref(exports.create_settings() >>> 0);\n    },\n    settings_set_seed(settings, seed) {\n      // assembly/game_api/settings_set_seed(assembly/game/settings/Settings, u32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_seed(settings, seed);\n    },\n    settings_set_generate(settings, level_size, room_min_size, room_max_size, rooms_count) {\n      // assembly/game_api/settings_set_generate(assembly/game/settings/Settings, u32, u32, u32, u32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_generate(settings, level_size, room_min_size, room_max_size, rooms_count);\n    },\n    settings_set_use_debug(settings, in_use_debug) {\n      // assembly/game_api/settings_set_use_debug(assembly/game/settings/Settings, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_use_debug = in_use_debug ? 1 : 0;\n      exports.settings_set_use_debug(settings, in_use_debug);\n    },\n    settings_set_debug_flags(settings, in_show_path, in_show_closest) {\n      // assembly/game_api/settings_set_debug_flags(assembly/game/settings/Settings, bool, bool) => void\n      settings = __lowerInternref(settings) || __notnull();\n      in_show_path = in_show_path ? 1 : 0;\n      in_show_closest = in_show_closest ? 1 : 0;\n      exports.settings_set_debug_flags(settings, in_show_path, in_show_closest);\n    },\n    settings_set_neighborhood_quad_size(settings, in_size) {\n      // assembly/game_api/settings_set_neighborhood_quad_size(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_neighborhood_quad_size(settings, in_size);\n    },\n    settings_set_rvo_time_horizon(settings, in_time) {\n      // assembly/game_api/settings_set_rvo_time_horizon(assembly/game/settings/Settings, f32) => void\n      settings = __lowerInternref(settings) || __notnull();\n      exports.settings_set_rvo_time_horizon(settings, in_time);\n    },\n    create_game(settings) {\n      // assembly/game_api/create_game(assembly/game/settings/Settings) => assembly/game/Game\n      settings = __lowerInternref(settings) || __notnull();\n      return __liftInternref(exports.create_game(settings) >>> 0);\n    },\n    game_update(game, dt) {\n      // assembly/game_api/game_update(assembly/game/Game, f32) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_update(game, dt);\n    },\n    game_client_point(game, in_x, in_y) {\n      // assembly/game_api/game_client_point(assembly/game/Game, f32, f32) => bool\n      game = __lowerInternref(game) || __notnull();\n      return exports.game_client_point(game, in_x, in_y) != 0;\n    },\n    game_add_monsters(game) {\n      // assembly/game_api/game_add_monsters(assembly/game/Game) => void\n      game = __lowerInternref(game) || __notnull();\n      exports.game_add_monsters(game);\n    },\n  }, exports);\n  function __liftString(pointer) {\n    if (!pointer) return null;\n    const\n      end = pointer + new Uint32Array(memory.buffer)[pointer - 4 >>> 2] >>> 1,\n      memoryU16 = new Uint16Array(memory.buffer);\n    let\n      start = pointer >>> 1,\n      string = \"\";\n    while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));\n    return string + String.fromCharCode(...memoryU16.subarray(start, end));\n  }\n  function __liftStaticArray(liftElement, align, pointer) {\n    if (!pointer) return null;\n    const\n      length = __getU32(pointer - 4) >>> align,\n      values = new Array(length);\n    for (let i = 0; i < length; ++i) values[i] = liftElement(pointer + (i << align >>> 0));\n    return values;\n  }\n  class Internref extends Number {}\n  const registry = new FinalizationRegistry(__release);\n  function __liftInternref(pointer) {\n    if (!pointer) return null;\n    const sentinel = new Internref(__retain(pointer));\n    registry.register(sentinel, pointer);\n    return sentinel;\n  }\n  function __lowerInternref(value) {\n    if (value == null) return 0;\n    if (value instanceof Internref) return value.valueOf();\n    throw TypeError(\"internref expected\");\n  }\n  const refcounts = new Map();\n  function __retain(pointer) {\n    if (pointer) {\n      const refcount = refcounts.get(pointer);\n      if (refcount) refcounts.set(pointer, refcount + 1);\n      else refcounts.set(exports.__pin(pointer), 1);\n    }\n    return pointer;\n  }\n  function __release(pointer) {\n    if (pointer) {\n      const refcount = refcounts.get(pointer);\n      if (refcount === 1) exports.__unpin(pointer), refcounts.delete(pointer);\n      else if (refcount) refcounts.set(pointer, refcount - 1);\n      else throw Error(`invalid refcount '${refcount}' for reference '${pointer}'`);\n    }\n  }\n  function __notnull() {\n    throw TypeError(\"value must not be null\");\n  }\n  let __dataview = new DataView(memory.buffer);\n  function __getI32(pointer) {\n    try {\n      return __dataview.getInt32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getInt32(pointer, true);\n    }\n  }\n  function __getU32(pointer) {\n    try {\n      return __dataview.getUint32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getUint32(pointer, true);\n    }\n  }\n  function __getF32(pointer) {\n    try {\n      return __dataview.getFloat32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getFloat32(pointer, true);\n    }\n  }\n  return adaptedExports;\n}\n","export const TILE_PIXELS_SIZE: number = 50; // the number of pixels for one tile of the level\r\nexport const CLICK_CURSOR_TIME: number = 400; // in milliseconds\r\nexport const CLICK_CURSOR_RADIUS: number = 0.5; // in world units\r\nexport const MAP_TILE_PIXELS_SIZES: number[] = [3, 5, 8, 12, 15, 20, 30, 40, 50];  // arrays of different sizes for map\r\nexport const CAMERA_LERP_COEFFICIENT: number = 1.0;  // for smooth camera\r\n\r\n// delay between mouse clicks, when the button is hold\r\nexport const FIRST_MOUSE_CLICK_DELTA: number = 500;  // in miliseconds\r\nexport const OTHER_MOUSE_CLICK_DELTA: number = 30;  // in miliseconds","export class Transform {\r\n    m_matrix = new Float32Array(9);\r\n\r\n    // store separate values for angle and scale\r\n    m_angle: number = 0.0;\r\n    m_scale_x: number = 1.0;\r\n    m_scale_y: number = 1.0;\r\n\r\n    constructor() {\r\n        this.m_matrix[0] = 1.0; this.m_matrix[1] = 0.0; this.m_matrix[2] = 0.0;\r\n        this.m_matrix[3] = 0.0; this.m_matrix[4] = 1.0; this.m_matrix[5] = 0.0;\r\n        this.m_matrix[6] = 0.0; this.m_matrix[7] = 0.0; this.m_matrix[8] = 1.0;  // this row always shouldbe (0.0, 0.0, 1.0)\r\n    }\r\n\r\n    matrix_array(): Float32Array {\r\n        return this.m_matrix;\r\n    }\r\n\r\n    // this method does not properly define local rotation and scale values\r\n    // it should be used only for create temp matrix, apply transform and does not use it anymore\r\n    set_matrix_array(in_array: number[]) {\r\n        for(let i = 0; i < 9; i++) {\r\n            this.m_matrix[i] = in_array[i];\r\n        }\r\n    }\r\n\r\n    set_translation(in_x: number, in_y: number) {\r\n        this.m_matrix[2] = in_x;\r\n        this.m_matrix[5] = in_y;\r\n    }\r\n\r\n    translation(): number[] {\r\n        return [this.m_matrix[2], this.m_matrix[5]];\r\n    }\r\n\r\n    private _update_rotation() {\r\n        this.m_matrix[0] = Math.cos(this.m_angle) * this.m_scale_x;\r\n        this.m_matrix[3] = Math.sin(this.m_angle) * this.m_scale_x;\r\n        this.m_matrix[1] = -Math.sin(this.m_angle) * this.m_scale_y;\r\n        this.m_matrix[4] = Math.cos(this.m_angle) * this.m_scale_y;\r\n    }\r\n\r\n    set_rotation(in_value: number) {  // in_value - in radians from OX in conter clock wise direction\r\n        this.m_angle = in_value;\r\n        this._update_rotation();\r\n    }\r\n\r\n    rotation(): number {\r\n        return this.m_angle;\r\n    }\r\n\r\n    set_scale(in_x: number, in_y: number) {\r\n        this.m_scale_x = in_x;\r\n        this.m_scale_y = in_y;\r\n\r\n        this._update_rotation();\r\n    }\r\n\r\n    set_uniform_scale(in_value: number) {\r\n        this.m_scale_x = in_value;\r\n        this.m_scale_y = in_value;\r\n\r\n        this._update_rotation();\r\n    }\r\n\r\n    multiply(in_x: number, in_y: number): number[] {\r\n        return [this.m_matrix[0] * in_x + this.m_matrix[1] * in_y + this.m_matrix[2],\r\n                this.m_matrix[3] * in_x + this.m_matrix[4] * in_y + this.m_matrix[5]];\r\n    }\r\n\r\n    multiply_array(in_coordinates: number[]): number[] {\r\n        return this.multiply(in_coordinates[0], in_coordinates[1]);\r\n    }\r\n\r\n    apply_scale(in_value: number): number {\r\n        // get length of the first vector\r\n        const l1 = Math.sqrt(this.m_matrix[0] * this.m_matrix[0] + this.m_matrix[3] * this.m_matrix[3]);\r\n        // and length of the second vector\r\n        const l2 = Math.sqrt(this.m_matrix[1] * this.m_matrix[1] + this.m_matrix[4] * this.m_matrix[4]);\r\n\r\n        // return the average of these length\r\n        return in_value * (l1 + l2) / 2;\r\n    }\r\n\r\n    // compose current tfm A with other tfm B and return A * B\r\n    compose_tfms(other: Transform): Transform {\r\n        let to_return = new Transform();\r\n\r\n        const a = this.matrix_array();\r\n        const b = other.matrix_array();\r\n\r\n        // multiply these two matrices\r\n        let result = [a[0]*b[0]+a[1]*b[3]+a[2]*b[6], a[0]*b[1]+a[1]*b[4]+a[2]*b[7], a[0]*b[2]+a[1]*b[5]+a[2]*b[8],\r\n                      a[3]*b[0]+a[4]*b[3]+a[5]*b[6], a[3]*b[1]+a[4]*b[4]+a[5]*b[7], a[3]*b[2]+a[4]*b[5]+a[5]*b[8],\r\n                      a[6]*b[0]+a[7]*b[3]+a[8]*b[6], a[6]*b[1]+a[7]*b[4]+a[8]*b[7], a[6]*b[2]+a[7]*b[5]+a[8]*b[8]];\r\n        to_return.set_matrix_array(result);\r\n\r\n        return to_return;\r\n    }\r\n\r\n    private _det2(a: number, b: number, c: number, d: number): number {\r\n        return a*d - b*c;\r\n    }\r\n\r\n    // return inverse transform\r\n    // we setup only matrix, without local scale and rotation\r\n    inverse(): Transform {\r\n        // calculate determinant\r\n        const d = this.m_matrix[0] * this.m_matrix[4] * this.m_matrix[8] +\r\n        this.m_matrix[2] * this.m_matrix[3] * this.m_matrix[7] +\r\n        this.m_matrix[1] * this.m_matrix[5] * this.m_matrix[6] -\r\n        this.m_matrix[2] * this.m_matrix[4] * this.m_matrix[6] -\r\n        this.m_matrix[0] * this.m_matrix[5] * this.m_matrix[7] -\r\n        this.m_matrix[1] * this.m_matrix[3] * this.m_matrix[8];\r\n\r\n        const m = [this._det2(this.m_matrix[4], this.m_matrix[5], this.m_matrix[7], this.m_matrix[8]) / d, -1 * this._det2(this.m_matrix[1], this.m_matrix[2], this.m_matrix[7], this.m_matrix[8]) / d, this._det2(this.m_matrix[1], this.m_matrix[2], this.m_matrix[4], this.m_matrix[5]) / d,\r\n        -1 * this._det2(this.m_matrix[3], this.m_matrix[5], this.m_matrix[6], this.m_matrix[8]) / d, this._det2(this.m_matrix[0], this.m_matrix[2], this.m_matrix[6], this.m_matrix[8]) / d, -1 * this._det2(this.m_matrix[0], this.m_matrix[2], this.m_matrix[3], this.m_matrix[5]) / d,\r\n        this._det2(this.m_matrix[3], this.m_matrix[4], this.m_matrix[6], this.m_matrix[7]) / d, -1 * this._det2(this.m_matrix[0], this.m_matrix[1], this.m_matrix[6], this.m_matrix[7]) / d, this._det2(this.m_matrix[0], this.m_matrix[1], this.m_matrix[3], this.m_matrix[4]) / d];\r\n\r\n        let to_return = new Transform();\r\n        to_return.set_matrix_array(m);\r\n\r\n        return to_return;\r\n    }\r\n\r\n    toString(): string {\r\n        let to_return = \"\";\r\n        to_return += this.m_matrix[0] + \", \" + this.m_matrix[1] + \", \" + this.m_matrix[2] + \"\\n\";\r\n        to_return += this.m_matrix[3] + \", \" + this.m_matrix[4] + \", \" + this.m_matrix[5] + \"\\n\";\r\n        to_return += this.m_matrix[6] + \", \" + this.m_matrix[7] + \", \" + this.m_matrix[8];\r\n        return to_return;\r\n    }\r\n}","export const PLAYER_IS_STROKE = false;\r\nexport const PLAYER_STROKE_WIDTH = 1.0;\r\nexport const PLAYER_STROKE_COLOR = \"rgb(74, 193, 33)\";\r\nexport const PLAYER_IDLE_COLOR = \"rgba(91, 128, 78, 0.75)\";\r\nexport const PLAYER_MOVE_COLOR = \"rgba(91, 128, 78, 0.5)\";\r\n\r\nexport const MONSTER_IS_STROKE = false;\r\nexport const MONSTER_STROKE_WIDTH = 1.0;\r\nexport const MONSTER_STROKE_COLOR = \"rgb(226, 55, 27)\";\r\nexport const MONSTER_IDLE_COLOR = \"rgba(196, 94, 45, 0.75)\";\r\nexport const MONSTER_MOVE_COLOR = \"rgba(196, 94, 45, 0.5)\";\r\n\r\nexport const TILE_IS_STROKE = true;\r\nexport const TILE_STROKE_WIDTH = 0.2;\r\nexport const TILE_STROKE_COLOR = \"rgb(152, 152, 152)\";\r\nexport const TILE_WALKABLE_COLOR = \"rgb(192, 192, 192)\";\r\nexport const TILE_NONWALKABLE_COLOR = \"rgb(64, 64, 64)\";\r\n\r\nexport const CLICK_CURSOR_COLOR = \"rgba(232, 128, 51, 0.25)\";\r\nexport const CLICK_CURSOR_STROKE_COLOR = \"rgba(234, 112, 23, 0.5)\";\r\nexport const CLICK_CURSOR_STROKE_WIDTH = 1.0;\r\nexport const CLICK_CURSOR_CENTER_SIZE = 2.0;\r\n\r\nexport const MAP_COLOR = \"rgba(48, 148, 233, 0.5)\";\r\nexport const MAP_PLAYER_SIZE = 2; // in pixels\r\n\r\nexport const DEBUG_TRAJECTORY_COLOR = \"rgb(94, 178, 219)\";\r\nexport const DEBUG_TRAJECTORY_WIDTH = 1.0;\r\n\r\nexport const DEBUG_CLOSEST_PAIR_COLOR = \"rgb(82, 209, 77)\";\r\nexport const DEBUG_CLOSEST_PAIR_WIDTH = 1.0;","import { MAP_TILE_PIXELS_SIZES } from \"../constants\";\r\nimport { Transform } from \"../transform\";\r\nimport { MAP_COLOR, MAP_PLAYER_SIZE, PLAYER_IDLE_COLOR } from \"../client_data_canvas/visual_styles\";\r\n\r\nexport class SceneMap {\r\n    m_context: CanvasRenderingContext2D;\r\n    m_wtc_tfm: Transform;\r\n    m_vertices: Float32Array;\r\n    m_polygons: Int32Array;\r\n    m_sizes: Int32Array;\r\n\r\n    m_canvas_width: number;\r\n    m_canvas_height: number;\r\n    m_tile_size: number;\r\n\r\n    m_active: boolean = false;\r\n    m_tfm: Transform = new Transform();\r\n    m_scale: number = 0.0;\r\n    m_scale_index: number = 0;\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, \r\n                in_wtc_tfm: Transform,\r\n                in_tile_size: number,\r\n                in_vertices: Float32Array, \r\n                in_polygons: Int32Array, \r\n                in_sizes: Int32Array) {\r\n        this.m_context = in_ctxt;\r\n        this.m_wtc_tfm = in_wtc_tfm;\r\n\r\n        this.m_canvas_width = in_ctxt.canvas.width;\r\n        this.m_canvas_height = in_ctxt.canvas.height;\r\n\r\n        this.m_tile_size = in_tile_size;\r\n\r\n        this.m_vertices = in_vertices;\r\n        this.m_polygons = in_polygons;\r\n        this.m_sizes = in_sizes;\r\n\r\n        this.m_scale_index = Math.floor(MAP_TILE_PIXELS_SIZES.length / 2);\r\n        this._update_scale();\r\n    }\r\n\r\n    private _update_scale() {\r\n        this.m_scale = MAP_TILE_PIXELS_SIZES[this.m_scale_index] / this.m_tile_size;\r\n    }\r\n\r\n    toggle_active() {\r\n        this.m_active = !this.m_active;\r\n    }\r\n\r\n    scale_up() {\r\n        if(this.m_active) {\r\n            this.m_scale_index++;\r\n            if(this.m_scale_index == MAP_TILE_PIXELS_SIZES.length) {\r\n                this.m_scale_index--;\r\n            }\r\n            this._update_scale();\r\n        }\r\n    }\r\n\r\n    scale_down() {\r\n        if(this.m_active) {\r\n            this.m_scale_index--;\r\n            if(this.m_scale_index == -1) {\r\n                this.m_scale_index++;\r\n            }\r\n            this._update_scale();\r\n        }\r\n    }\r\n\r\n    draw(): void {\r\n        this.m_context.clearRect(0, 0, this.m_canvas_width, this.m_canvas_height);\r\n        \r\n        if(this.m_active) {\r\n            // get player world position from world-to-canvas transform\r\n            const ctw_tfm = this.m_wtc_tfm.inverse();\r\n            const pos = ctw_tfm.multiply(this.m_canvas_width / 2, this.m_canvas_height / 2);\r\n\r\n            this.m_tfm.set_uniform_scale(this.m_scale);\r\n            this.m_tfm.set_translation(this.m_canvas_width / 2 - pos[0] * this.m_scale, this.m_canvas_height / 2 - pos[1] * this.m_scale);\r\n\r\n            this.m_context.save();\r\n            this.m_context.fillStyle = MAP_COLOR;\r\n            this.m_context.strokeStyle = MAP_COLOR;\r\n            this.m_context.lineWidth = 0.125;\r\n            let shift = 0;\r\n            for(let i = 0; i < this.m_sizes.length; i++) {\r\n                // i - polygon index\r\n                const s = this.m_sizes[i];  // polygon size\r\n                \r\n                // start new poligon\r\n                this.m_context.beginPath();\r\n                // get polygon corners\r\n                for(let j = 0; j < s; j++) {\r\n                    const v = this.m_polygons[shift + j];  // v - vertex index\r\n                    const x = this.m_vertices[3*v];\r\n                    const y = this.m_vertices[3*v + 2];  // skip second coordinate, it always equal to 0\r\n\r\n                    const c_position = this.m_tfm.multiply(x, y);\r\n                    if(j == 0) {  // start polygon\r\n                        this.m_context.moveTo(c_position[0], c_position[1]);\r\n                    } else {  // continue polygon\r\n                        this.m_context.lineTo(c_position[0], c_position[1]);\r\n                    }\r\n                }\r\n                // finish the polygon\r\n                this.m_context.fill();\r\n                this.m_context.stroke();\r\n\r\n                shift += s;\r\n            }\r\n\r\n            // next draw the player at the map\r\n            this.m_context.beginPath();\r\n            this.m_context.fillStyle = PLAYER_IDLE_COLOR;\r\n            const c_center = this.m_tfm.multiply(pos[0], pos[1]);\r\n\r\n            this.m_context.arc(c_center[0], c_center[1], MAP_PLAYER_SIZE, 0, 2 * Math.PI);\r\n            this.m_context.fill();\r\n            this.m_context.restore();\r\n        }\r\n    }\r\n}","import { Transform } from \"../transform\";\r\n\r\nexport class SceneItem {\r\n    m_tfm: Transform = new Transform();  // in-scene transform (store position, rotation and scale)\r\n\r\n    constructor() {\r\n\r\n    }\r\n    \r\n    set_position(x: number, y: number) {\r\n        this.m_tfm.set_translation(x, y);\r\n    }\r\n\r\n    set_angle(angle: number) {\r\n        this.m_tfm.set_rotation(angle);\r\n    }\r\n\r\n    get_tfm(): Transform {\r\n        return this.m_tfm;\r\n    }\r\n\r\n    get_translation(): number[] {\r\n        return this.m_tfm.translation();\r\n    }\r\n}","import { CLICK_CURSOR_TIME } from \"../constants\";\r\nimport { SceneItem } from \"./scene_item\";\r\n\r\nexport class ClickCursor extends SceneItem {\r\n    m_active: boolean = false;\r\n\r\n    m_time_accum: number = 0.0;\r\n    m_life_time: number = 0.0;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.m_life_time = CLICK_CURSOR_TIME;\r\n    }\r\n\r\n    activate(in_x: number, in_y: number) {\r\n        this.m_tfm.set_translation(in_x, in_y);\r\n\r\n        this.m_time_accum = 0.0;\r\n\r\n        this.m_active = true;\r\n    }\r\n\r\n    get_active(): boolean {\r\n        return this.m_active;\r\n    }\r\n\r\n    get_translation(): number[] {\r\n        return this.m_tfm.translation();\r\n    }\r\n\r\n    update(dt: number) {\r\n        if(this.m_active) {\r\n            this.m_time_accum += 1000 * dt;\r\n\r\n            if(this.m_time_accum >= this.m_life_time) {\r\n                this.deactivate();\r\n            }\r\n        }\r\n    }\r\n\r\n    // return the value from [0, 1], measure the cursor life time\r\n    get_proportion(): number {\r\n        return this.m_time_accum / this.m_life_time;\r\n    }\r\n\r\n    deactivate() {\r\n        this.m_active = false;\r\n    }\r\n}","import { SceneItem } from \"./scene_item\";\r\n\r\nexport class SceneTile extends SceneItem {\r\n    m_tile_size: number = 0.0;\r\n    m_type: number = 1;\r\n\r\n    constructor(pos_x: number, pos_y: number, tile_size: number, type: number) {\r\n        super();\r\n\r\n        this.set_position(pos_x, pos_y);\r\n\r\n        this.m_tile_size = tile_size;\r\n        this.m_type = type;\r\n    }\r\n\r\n    get_tile_size(): number {\r\n        return this.m_tile_size;\r\n    }\r\n\r\n    get_type(): number {\r\n        return this.m_type;\r\n    }\r\n}","import { Transform } from \"../transform\";\r\nimport { SceneItem } from \"./scene_item\";\r\n\r\n// base class for player, monster and other person stuff\r\nexport class Person extends SceneItem {\r\n    m_radius: number = 0.0;\r\n    m_is_move: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    set_radius(radius: number) {\r\n        this.m_radius = radius;\r\n    }\r\n\r\n    set_move(is_move: boolean) {\r\n        this.m_is_move = is_move;\r\n    }\r\n\r\n    get_move(): boolean {\r\n        return this.m_is_move;\r\n    }\r\n\r\n    get_radius(): number {\r\n        return this.m_radius;\r\n    }\r\n}","import { Person } from \"./person\";\r\n\r\nexport class Player extends Person {\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { Person } from \"./person\";\r\n\r\nexport class Monster extends Person {\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { __Internref16 } from \"../../wasm/build/game_api\";\r\nimport { ClickCursor } from \"./click_cursor\";\r\nimport { FIRST_MOUSE_CLICK_DELTA, OTHER_MOUSE_CLICK_DELTA } from \"../constants\";\r\nimport { SceneTile } from \"./scene_tile\";\r\nimport { Player } from \"./player\";\r\nimport { Monster } from \"./monster\";\r\n\r\n// the Scene instance contains data of objects in the game\r\nexport class Scene {\r\n    m_level_width: number = 0;\r\n    m_level_height: number = 0;\r\n    m_level_tile_size: number = 0.0;\r\n\r\n    m_last_click_time: number = 0;\r\n    m_click_number: number = 0;\r\n    m_click_cursor: ClickCursor = new ClickCursor();\r\n    m_level_tiles: Map<number, SceneTile> = new Map<number, SceneTile>();\r\n    m_player: Player = new Player();\r\n    m_monsters: Map<number, Monster> = new Map<number, Monster>();\r\n\r\n    constructor(level_width: number,\r\n                level_height: number,\r\n                level_tile_size: number) {\r\n        this.m_level_width = level_width;\r\n        this.m_level_height = level_height;\r\n        this.m_level_tile_size = level_tile_size;\r\n    }\r\n\r\n    // when we click into canvas, we should add to the scene cursor object\r\n    // input are world coordinates of the click position\r\n    // return true if the point in the walkable area\r\n    click_position(wasm_module: any, game_ptr: __Internref16, in_x: number, in_y: number, force: boolean = false): boolean {\r\n        const current_time = performance.now();\r\n        if(force || current_time - this.m_last_click_time > (this.m_click_number == 1 ? FIRST_MOUSE_CLICK_DELTA : OTHER_MOUSE_CLICK_DELTA)) {\r\n            this.m_last_click_time = current_time;\r\n            this.m_click_number += 1;\r\n            if(this.m_click_number > 2) {\r\n                this.m_click_number = 2;\r\n            }\r\n            // call to move the player\r\n            const is_define: boolean = wasm_module.game_client_point(game_ptr, in_x, in_y);\r\n\r\n            if(force && is_define) {\r\n                this.m_click_cursor.activate(in_x, in_y);\r\n            }\r\n\r\n            return is_define;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // call when release the mouse\r\n    reset_click() {\r\n        this.m_click_number = 0;\r\n    }\r\n\r\n    // may call from client to draw the cursor on the canvas\r\n    get_click_cursor(): ClickCursor {\r\n        return this.m_click_cursor;\r\n    }\r\n\r\n    get_level_tiles(): Map<number, SceneTile> {\r\n        return this.m_level_tiles;\r\n    }\r\n\r\n    get_player(): Player {\r\n        return this.m_player;\r\n    }\r\n\r\n    get_monsters(): Map<number, Monster> {\r\n        return this.m_monsters;\r\n    }\r\n\r\n    delete_tile(index: number) {\r\n        if(this.m_level_tiles.has(index)) {\r\n            this.m_level_tiles.delete(index);\r\n        }\r\n    }\r\n\r\n    create_tile(pos_x: number, pos_y: number, index: number, type: number) {\r\n        this.m_level_tiles.set(index, new SceneTile(pos_x, \r\n                                                    pos_y,\r\n                                                    this.m_level_tile_size,\r\n                                                    type));\r\n    }\r\n\r\n    set_player_position(x: number, y: number) {\r\n        this.m_player.set_position(x, y);\r\n    }\r\n\r\n    set_player_radius(radius: number) {\r\n        this.m_player.set_radius(radius);\r\n    }\r\n\r\n    set_player_angle(angle: number) {\r\n        this.m_player.set_angle(angle);\r\n    }\r\n\r\n    set_player_move(is_move: boolean) {\r\n        this.m_player.set_move(is_move);\r\n    }\r\n\r\n    set_monster_position(entity: number, x: number, y: number) {\r\n        if(this.m_monsters.has(entity)) {\r\n            const monster = this.m_monsters.get(entity);\r\n            if(monster) {\r\n                monster.set_position(x, y);\r\n            }\r\n        } else {\r\n            const monster = new Monster();\r\n            monster.set_position(x, y);\r\n\r\n            this.m_monsters.set(entity, monster);\r\n        }\r\n    }\r\n\r\n    set_monster_radius(entity: number, radius: number) {\r\n        if(this.m_monsters.has(entity)) {\r\n            const monster = this.m_monsters.get(entity);\r\n            if(monster) {\r\n                monster.set_radius(radius);\r\n            }\r\n        } else {\r\n            const monster = new Monster();\r\n            monster.set_radius(radius);\r\n\r\n            this.m_monsters.set(entity, monster);\r\n        }\r\n    }\r\n\r\n    set_monster_angle(entity: number, angle: number) {\r\n        if(this.m_monsters.has(entity)) {\r\n            const monster = this.m_monsters.get(entity);\r\n            if(monster) {\r\n                monster.set_angle(angle);\r\n            }\r\n        } else {\r\n            const monster = new Monster();\r\n            monster.set_angle(angle);\r\n\r\n            this.m_monsters.set(entity, monster);\r\n        }\r\n    }\r\n\r\n    set_monster_move(entity: number, is_move: boolean) {\r\n        if(this.m_monsters.has(entity)) {\r\n            const monster = this.m_monsters.get(entity);\r\n            if(monster) {\r\n                monster.set_move(is_move);\r\n            }\r\n        } else {\r\n            const monster = new Monster();\r\n            monster.set_move(is_move);\r\n\r\n            this.m_monsters.set(entity, monster);\r\n        }\r\n    }\r\n\r\n    remove_monster(entity: number) {\r\n        if(this.m_monsters.has(entity)) {\r\n            this.m_monsters.delete(entity);\r\n        }\r\n    }\r\n}","export function click_coordinates(canvas: HTMLCanvasElement, mouse_event: MouseEvent): number[] {\r\n    const canvas_rect = canvas.getBoundingClientRect()\r\n    return [mouse_event.clientX - canvas_rect.left, mouse_event.clientY - canvas_rect.top];\r\n}","export class UIElement {\r\n    \r\n}","import { UIElement } from \"./ui_element\";\r\n\r\nexport class UIHTMLElement extends UIElement {\r\n    m_html_element: HTMLElement | null;\r\n\r\n    constructor(html_id: string) {\r\n        super();\r\n\r\n        this.m_html_element = document.getElementById(html_id);\r\n    }\r\n\r\n    show() {\r\n        if(this.m_html_element) {\r\n            this.m_html_element.style.visibility = \"visible\";\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        if(this.m_html_element) {\r\n            this.m_html_element.style.visibility = \"hidden\";\r\n        }\r\n    }\r\n}","import { UIHTMLElement } from \"./ui_html_element\";\r\n\r\nexport class UIHTMLTextElement extends UIHTMLElement {\r\n    constructor(html_id: string) {\r\n        super(html_id);\r\n    }\r\n\r\n    set_text(text: string) {\r\n        if(this.m_html_element) {\r\n            this.m_html_element.innerText = text;\r\n        }\r\n    }\r\n}","import { UIHTMLTextElement } from \"./ui_html_text_element\";\r\n\r\nexport class FPSCounter extends UIHTMLTextElement {\r\n    m_accumulator: number = 0.0;\r\n    m_ticks: number = 0;\r\n    m_value: number = 0.0;\r\n\r\n    constructor(html_id: string) {\r\n        super(html_id);\r\n\r\n\r\n    }\r\n\r\n    update(dt: number) {\r\n        // update fps counter\r\n        // calculate fps\r\n        this.m_accumulator += dt;\r\n        this.m_ticks += 1;\r\n\r\n        if(this.m_accumulator > 2.0) {\r\n            this.m_value = this.m_ticks / this.m_accumulator;\r\n\r\n            // reset fps value\r\n            this.m_accumulator = 0.0;\r\n            this.m_ticks = 0;\r\n\r\n            this.set_text((Math.round(this.m_value * 100) / 100).toFixed(2).toString());\r\n        }\r\n    }\r\n}","import { UIHTMLTextElement } from \"./ui_html_text_element\";\r\n\r\nexport class UIItems {\r\n    m_total_element: UIHTMLTextElement;\r\n    m_visible_element: UIHTMLTextElement;\r\n\r\n    constructor(total_id: string, visible_id: string) {\r\n        this.m_total_element = new UIHTMLTextElement(total_id);\r\n        this.m_visible_element = new UIHTMLTextElement(visible_id);\r\n    }\r\n\r\n    update_values(total: number, visible: number) {\r\n        if(this.m_total_element) {\r\n            this.m_total_element.set_text(total.toString());\r\n        }\r\n\r\n        if(this.m_visible_element) {\r\n            this.m_visible_element.set_text(visible.toString());\r\n        }\r\n    }\r\n}","import { FPSCounter } from \"./ui_fps\";\r\nimport { UIHTMLElement } from \"./ui_html_element\";\r\nimport { UIItems } from \"./ui_items\";\r\n\r\nexport class GameUI {\r\n    m_active: boolean = true;\r\n\r\n    m_fps: FPSCounter;\r\n    m_items: UIItems;\r\n    m_pause_screen: UIHTMLElement;\r\n    m_loading: UIHTMLElement;\r\n\r\n    assign_fps_element(html_id: string) {\r\n        this.m_fps = new FPSCounter(html_id);\r\n    }\r\n\r\n    assign_count_elements(total_id: string, visible_id: string) {\r\n        this.m_items = new UIItems(total_id, visible_id);\r\n    }\r\n\r\n    assign_pause_screen(html_id: string) {\r\n        this.m_pause_screen = new UIHTMLElement(html_id);\r\n    }\r\n\r\n    assign_loading(html_id: string) {\r\n        this.m_loading = new UIHTMLElement(html_id);\r\n    }\r\n\r\n    update_count_values(total: number, visible: number) {\r\n        if(this.m_items) {\r\n            this.m_items.update_values(total, visible);\r\n        }\r\n    }\r\n\r\n    on_pause() {\r\n        this.m_pause_screen.show();\r\n    }\r\n\r\n    off_pause() {\r\n        this.m_pause_screen.hide();\r\n    }\r\n\r\n    loading_hide() {\r\n        this.m_loading.hide();\r\n    }\r\n\r\n    update(dt: number) {\r\n        if(this.m_active) {\r\n            this.m_fps.update(dt);\r\n        }\r\n    }\r\n}","import { __Internref17, instantiate } from \"../wasm/build/game_api\";\r\nimport { SceneMap } from \"./scene/scene_map\";\r\nimport { Scene } from \"./scene/scene\";\r\nimport { Transform } from \"./transform\";\r\nimport { TILE_PIXELS_SIZE } from \"./constants\";\r\nimport { click_coordinates } from \"./utilities\";\r\nimport { GameUI } from \"./ui/ui\";\r\n\r\n// base class for client of the game\r\n// it implement functionallity for connecting between wasm module (the server) and client IO\r\n// particluar graphic backend should use this base class\r\nexport abstract class ClientBase {\r\n    m_game_ptr: __Internref17;\r\n    m_scene_canvas: HTMLCanvasElement;\r\n    m_scene_ctx: CanvasRenderingContext2D;\r\n\r\n    m_map_canvas: HTMLCanvasElement;\r\n    m_map_ctx: CanvasRenderingContext2D;\r\n\r\n    m_scene: Scene;\r\n\r\n    m_ui: GameUI;\r\n\r\n    m_level_width: number;\r\n    m_level_height: number;\r\n    m_level_tile_size: number;\r\n\r\n    m_current_time: number;\r\n    m_module: any = undefined;\r\n    m_is_start: boolean = false;\r\n\r\n    m_map: SceneMap;\r\n    m_wtc_tfm: Transform = new Transform();\r\n    m_wtc_scale: number = 1.0;\r\n    m_is_mouse_press: boolean = false;\r\n    m_mouse_event: MouseEvent;\r\n\r\n    m_total_level_entities: number = 0;\r\n\r\n    m_is_game_active: boolean = true;\r\n    m_is_pause: boolean = false;  // turn on only when pause the game manualy\r\n\r\n    // in start method current client implementation should start render loop\r\n    // this loop should at first call update method, and only then process other stuff\r\n    abstract start(): void;\r\n    // input is coordinates on the screen, output is world coordinates of the point\r\n    // conversation depends on the client implementation\r\n    abstract point_to_world(in_x: number, in_y: number) : number[];\r\n    // mouse_click can be used for inistantiate the shape for the cursor\r\n    // input is coordinates on the canvas and corresponding coordinates on the world\r\n    abstract mouse_click(inc_x: number, inc_y: number, inw_x: number, inw_y: number): void;\r\n    // when we should delete the tile from the scene, call this method to delete the shape from the client\r\n    abstract scene_tile_delete(index: number): void;\r\n    // the same for create new tile\r\n    // pos_x and pos_y world coordinates of the tile\r\n    abstract scene_tile_create(pos_x: number, pos_y: number, index: number, type: number): void;\r\n    // define player methods called after the module update player properties\r\n    // it should be used in the client to update player shape\r\n    abstract scene_define_player_changes(pos_x: number, pos_y: number, angle: number, is_move: boolean): void;\r\n    abstract scene_create_player(radius: number): void;\r\n    abstract scene_define_monster_changes(entity: number, pos_x: number, pos_y: number, angle: number, is_move: boolean): void;\r\n    abstract scene_create_monster(entity: number, radius: number): void;\r\n    abstract scene_remove_monster(entity: number): void;\r\n    // debug callbacks\r\n    // if debug is off, then these callbacks are not required\r\n    // it never called from the module\r\n    abstract debug_entity_trajectory(entity: number, coordinates: Float32Array): void;\r\n    abstract debug_close_entity_pair(entity_a: number, a_pos_x: number, a_pos_y: number, entity_b: number, b_pos_x: number, b_pos_y: number): void;\r\n\r\n    constructor() {\r\n        // define host functions for external calls from the wasm module\r\n        globalThis.host = {\r\n            define_level: this.define_level.bind(this),\r\n            define_navmesh: this.define_navmesh.bind(this),\r\n            define_total_tiles: this.define_total_tiles.bind(this),\r\n            tile_delete: this.tile_delete.bind(this),\r\n            tile_create: this.tile_create.bind(this),\r\n            create_player: this.create_player.bind(this),\r\n            define_player_changes: this.define_player_changes.bind(this),\r\n            create_monster: this.create_monster.bind(this),\r\n            define_monster_changes: this.define_monster_changes.bind(this),\r\n            remove_monster: this.remove_monster.bind(this),\r\n            define_total_update_entities: this.define_total_update_entities.bind(this),\r\n            debug_entity_walk_path: this.debug_entity_walk_path.bind(this),\r\n            debug_close_entity: this.debug_close_entity.bind(this)\r\n        };\r\n\r\n        // setup ui\r\n        this.m_ui = new GameUI();\r\n        this.m_ui.assign_fps_element(\"fps\");\r\n        this.m_ui.assign_count_elements(\"level_count\", \"visible_count\");\r\n        this.m_ui.assign_pause_screen(\"pause\");\r\n        this.m_ui.assign_loading(\"loading\");\r\n\r\n        // get canvas elements from html\r\n        // for scene\r\n        this.m_scene_canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n        this.m_scene_ctx = this.m_scene_canvas.getContext(\"2d\")!;\r\n\r\n        // and for map\r\n        this.m_map_canvas = document.getElementById(\"map_canvas\") as HTMLCanvasElement;\r\n        this.m_map_ctx = this.m_map_canvas.getContext(\"2d\")!;\r\n\r\n        // disable map canvas mouse interaction\r\n        this.m_map_canvas.style.pointerEvents = \"none\";\r\n\r\n        // store the current time\r\n        this.m_current_time = performance.now();\r\n\r\n        // disable right click menu\r\n        window.addEventListener(\"contextmenu\", event => event.preventDefault());\r\n\r\n        // setup event\r\n        const local_this = this;\r\n        // keyboard\r\n        document.onkeydown = function(event) {\r\n            local_this.key_event(event.key);\r\n        }\r\n\r\n        // mouse click, release and move\r\n        this.m_scene_canvas.addEventListener(\"mousedown\", function(event) {\r\n            local_this.mouse_press_event(event);\r\n        });\r\n        this.m_scene_canvas.addEventListener(\"mouseup\", function(event) {\r\n            local_this.mouse_release_event(event);\r\n        });\r\n        document.onmousemove = function(event) {\r\n            local_this.m_mouse_event = event;\r\n        }\r\n        document.addEventListener(\"visibilitychange\" , function() {\r\n            local_this.visibilitychange_event();\r\n        });\r\n\r\n        // finally, load the wasm module\r\n        fetch(\"/build/game_api.wasm\")\r\n            .then((response) => WebAssembly.compileStreaming(response))\r\n            .then((result) => instantiate(result, { env: {}})\r\n            .then((module) => {\r\n                local_this.m_module = module;\r\n                console.log(\"finish to load the module:\", (performance.now() - local_this.m_current_time) / 1000.0, \"seconds\");\r\n                local_this.m_current_time = performance.now();\r\n\r\n                // create settings object\r\n                const settings_ptr = module.create_settings();\r\n                // change default settings\r\n                // select random seed\r\n                const seed = Math.floor(Math.random() * 4294967295);\r\n                console.log(\"seed:\", seed);\r\n                module.settings_set_seed(settings_ptr, seed);\r\n                module.settings_set_rvo_time_horizon(settings_ptr, 1.0);\r\n                module.settings_set_neighborhood_quad_size(settings_ptr, 1.0);\r\n                module.settings_set_generate(settings_ptr,\r\n                    22,  // level size\r\n                    2, 4,  // min and max room size\r\n                    10  // the number of rooms\r\n                );\r\n\r\n                // activate debug info\r\n                module.settings_set_use_debug(settings_ptr, false);\r\n                module.settings_set_debug_flags(settings_ptr, true, false);\r\n                \r\n                // create the game\r\n                // this method calls some callbcks:\r\n                // - define_level\r\n                // - define_total_tiles\r\n                // - define_navmesh\r\n                local_this.m_game_ptr = module.create_game(settings_ptr);\r\n\r\n                console.log(\"generate the level:\", (performance.now() - local_this.m_current_time) / 1000.0, \"seconds\");\r\n                local_this.m_current_time = performance.now();\r\n\r\n                // call client start method\r\n                local_this.start();\r\n                local_this.m_is_start = true;\r\n\r\n                // after start disable loading screen\r\n                local_this.m_ui.off_pause();\r\n                local_this.m_ui.loading_hide();\r\n        }));\r\n    }\r\n\r\n    visibilitychange_event() {\r\n        if (document.hidden) {\r\n            this.deactivate();\r\n        } else {\r\n            if(!this.m_is_pause) {\r\n                this.activate();\r\n            }\r\n        }\r\n    }\r\n\r\n    activate() {\r\n        this.m_is_game_active = true;\r\n        this.m_current_time = performance.now();\r\n\r\n        this.m_ui.off_pause();\r\n    }\r\n\r\n    deactivate() {\r\n        this.m_is_game_active = false;\r\n\r\n        this.m_ui.on_pause();\r\n    }\r\n\r\n    toggle_activate() {\r\n        if(this.m_is_game_active) {\r\n            this.deactivate();\r\n            this.m_is_pause = true;\r\n        } else {\r\n            this.activate();\r\n            this.m_is_pause = false;\r\n        }\r\n    }\r\n\r\n    mouse_press_event(event: MouseEvent) {\r\n        this.m_mouse_event = event;\r\n        if(this.m_is_start && this.m_is_game_active) {\r\n            this.m_is_mouse_press = true;\r\n    \r\n            const c = click_coordinates(this.m_scene_canvas, event);\r\n            const c_world = this.point_to_world(c[0], c[1]);\r\n            const is_defined = this.m_scene.click_position(this.m_module, this.m_game_ptr, c_world[0], c_world[1], true);\r\n            // also call click method from the client implementation\r\n            if(is_defined) {\r\n                // nothing to do if we click outside the walkable are\r\n                this.mouse_click(c[0], c[1], c_world[0], c_world[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    mouse_release_event(event: MouseEvent) {\r\n        if(this.m_is_start) {\r\n            this.m_is_mouse_press = false;\r\n            this.m_scene.reset_click();\r\n        }\r\n    }\r\n\r\n    key_event(key: string) {\r\n        if(this.m_is_start) {\r\n            if(key == \"Escape\") {\r\n                // pause the game\r\n                this.toggle_activate();\r\n            } else if(this.m_is_game_active) {\r\n                // read all other keys only when the game is active\r\n                if(key == \"s\") {\r\n                    // add monster\r\n                    this.m_module.game_add_monsters(this.m_game_ptr);\r\n                } else if(key == \"m\") {\r\n                    this.m_map.toggle_active();\r\n                } else if(key == \"+\") {\r\n                    this.m_map.scale_up();\r\n                } else if(key == \"-\") {\r\n                    this.m_map.scale_down();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    update() {\r\n        if (this.m_is_game_active) {\r\n            // update game only when tab is active\r\n            // in non-active tab the delta time is nearly 2 seconds\r\n            // it's too big value for correct behaviour\r\n            if(this.m_is_mouse_press && this.m_mouse_event && this.m_scene_canvas) {\r\n                const c = click_coordinates(this.m_scene_canvas, this.m_mouse_event);\r\n                const c_world = this.point_to_world(c[0], c[1]);\r\n                this.m_scene.click_position(this.m_module, this.m_game_ptr, c_world[0], c_world[1]);\r\n            }\r\n\r\n            // read the curent time\r\n            const time = performance.now();\r\n            // calculate delta time\r\n            const dt = (time - this.m_current_time) / 1000.0;\r\n            // write the current time\r\n            this.m_current_time = time;\r\n    \r\n            // update the game\r\n            if(this.m_module) {\r\n                // this method calls many callbacks in the current host\r\n                // it transfer data about changed entities\r\n                this.m_module.game_update(this.m_game_ptr, dt);\r\n            }\r\n\r\n            this.m_scene.get_click_cursor().update(dt);\r\n\r\n            this.m_ui.update(dt);\r\n            this.m_ui.update_count_values(this.m_total_level_entities, this.m_scene.get_monsters().size);\r\n        }\r\n\r\n        // draw the map, if we need\r\n        this.draw_map();\r\n    }\r\n\r\n    draw_map() {\r\n        if(this.m_map) {\r\n            this.m_map.draw();\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------------\r\n    // ----------------callbacks from the wasm side--------------------------\r\n\r\n    define_level(level_width: number, level_height: number, tile_size: number) {\r\n        this.m_level_width = level_width;\r\n        this.m_level_height = level_height;\r\n        this.m_level_tile_size = tile_size;\r\n\r\n        // create the scene\r\n        this.m_scene = new Scene(this.m_level_width,\r\n            this.m_level_height,\r\n            this.m_level_tile_size);\r\n        \r\n        this.m_wtc_scale = TILE_PIXELS_SIZE / this.m_level_tile_size;\r\n        this.m_wtc_tfm.set_uniform_scale(this.m_wtc_scale);\r\n    }\r\n\r\n    define_navmesh(vertices: Float32Array, polygons: Int32Array, sizes: Int32Array) {\r\n        // create the scene minimap\r\n        // this world-to-canvas transform is universal\r\n        // it can be used for different canvases and different purposes\r\n        // when the game change the player position, we should update this transform\r\n        this.m_map = new SceneMap(this.m_map_ctx,\r\n            this.m_wtc_tfm,\r\n            this.m_level_tile_size, \r\n            vertices, \r\n            polygons, \r\n            sizes);\r\n    }\r\n\r\n    define_total_tiles(total_tiles: number) {\r\n        // for info only\r\n        // nothing to do here\r\n    }\r\n\r\n    tile_delete(index: number) {\r\n        this.m_scene.delete_tile(index);\r\n        this.scene_tile_delete(index);\r\n    }\r\n\r\n    tile_create(x: number, y: number, index: number, type: number) {\r\n        const pos_x = x * this.m_level_tile_size;\r\n        const pos_y = y * this.m_level_tile_size;\r\n\r\n        this.m_scene.create_tile(pos_x, pos_y, index, type);\r\n        this.scene_tile_create(pos_x, pos_y, index, type);\r\n    }\r\n\r\n    create_player(radius: number) {\r\n        this.m_scene.set_player_radius(radius);\r\n        this.scene_create_player(radius);\r\n    }\r\n\r\n    define_player_changes(pos_x: number, pos_y: number, angle: number, is_move: boolean) {\r\n        this.m_scene.set_player_position(pos_x, pos_y);\r\n        this.m_scene.set_player_angle(angle);\r\n        this.m_scene.set_player_move(is_move);\r\n        this.scene_define_player_changes(pos_x, pos_y, angle, is_move);\r\n    }\r\n\r\n    create_monster(entity: number, radius: number) {\r\n        this.m_scene.set_monster_radius(entity, radius);\r\n        this.scene_create_monster(entity, radius);\r\n    }\r\n\r\n    define_monster_changes(entity: number, pos_x: number, pos_y: number, angle: number, is_move: boolean) {\r\n        this.m_scene.set_monster_position(entity, pos_x, pos_y);\r\n        this.m_scene.set_monster_angle(entity, angle);\r\n        this.m_scene.set_monster_move(entity, is_move);\r\n        this.scene_define_monster_changes(entity, pos_x, pos_y, angle, is_move);\r\n    }\r\n\r\n    remove_monster(entity: number) {\r\n        this.m_scene.remove_monster(entity);\r\n        this.scene_remove_monster(entity);\r\n    }\r\n\r\n    define_total_update_entities(count: number) {\r\n        this.m_total_level_entities = count;\r\n    }\r\n\r\n    debug_entity_walk_path(entity: number, points: ArrayLike<number>) {\r\n        const coordinates = new Float32Array(points.length);\r\n        for(let i = 0; i < coordinates.length; i++) {\r\n            coordinates[i] = points[i];\r\n        }\r\n        this.debug_entity_trajectory(entity, coordinates);\r\n    }\r\n\r\n    debug_close_entity(e1: number, pos_x1: number, pos_y1: number, e2: number, pos_x2: number, pos_y2: number) {\r\n        this.debug_close_entity_pair(e1, pos_x1, pos_y1, e2, pos_x2, pos_y2);\r\n    }\r\n}","import { ClickCursor } from \"../scene/click_cursor\";\r\nimport { CLICK_CURSOR_RADIUS, CLICK_CURSOR_TIME } from \"../constants\";\r\nimport { SceneTile } from \"../scene/scene_tile\";\r\nimport { Transform } from \"../transform\";\r\nimport { CLICK_CURSOR_CENTER_SIZE, CLICK_CURSOR_COLOR, CLICK_CURSOR_STROKE_COLOR, CLICK_CURSOR_STROKE_WIDTH, DEBUG_CLOSEST_PAIR_COLOR, DEBUG_CLOSEST_PAIR_WIDTH, DEBUG_TRAJECTORY_COLOR, DEBUG_TRAJECTORY_WIDTH, MONSTER_IDLE_COLOR, MONSTER_IS_STROKE, MONSTER_MOVE_COLOR, MONSTER_STROKE_COLOR, MONSTER_STROKE_WIDTH, PLAYER_IDLE_COLOR, PLAYER_IS_STROKE, PLAYER_MOVE_COLOR, PLAYER_STROKE_COLOR, PLAYER_STROKE_WIDTH, TILE_IS_STROKE, TILE_NONWALKABLE_COLOR, TILE_STROKE_COLOR, TILE_STROKE_WIDTH, TILE_WALKABLE_COLOR } from \"./visual_styles\";\r\nimport { Person } from \"../scene/person\";\r\nimport { Player } from \"../scene/player\";\r\n\r\nexport function draw_background(draw_ctx: CanvasRenderingContext2D, width: number, height: number) {\r\n    draw_ctx.save();\r\n    draw_ctx.fillStyle = TILE_NONWALKABLE_COLOR;\r\n    draw_ctx.fillRect(0, 0, width, height);\r\n    draw_ctx.restore();\r\n}\r\n\r\nexport function draw_cursor(draw_ctx: CanvasRenderingContext2D, \r\n                            wtc_tfm: Transform, \r\n                            cursor: ClickCursor) {\r\n    if(cursor.get_active()) {\r\n        const prop: number = Math.pow(Math.min(cursor.get_proportion(), 1.0), 0.15);\r\n\r\n        // actual draw\r\n        draw_ctx.save();\r\n        draw_ctx.lineWidth = CLICK_CURSOR_STROKE_WIDTH;\r\n        draw_ctx.fillStyle = CLICK_CURSOR_COLOR;\r\n        draw_ctx.strokeStyle = CLICK_CURSOR_STROKE_COLOR;\r\n        draw_ctx.beginPath();\r\n        const c_center = wtc_tfm.multiply_array(cursor.get_translation());\r\n        const c_radius = wtc_tfm.apply_scale(CLICK_CURSOR_RADIUS) * prop;\r\n        draw_ctx.arc(c_center[0], c_center[1], c_radius, 0, 2 * Math.PI);\r\n        draw_ctx.fill();\r\n        draw_ctx.stroke();\r\n\r\n        // draw center dot\r\n        draw_ctx.beginPath();\r\n        draw_ctx.fillStyle = CLICK_CURSOR_STROKE_COLOR;\r\n        draw_ctx.arc(c_center[0], c_center[1], CLICK_CURSOR_CENTER_SIZE, 0, 2 * Math.PI);\r\n        draw_ctx.fill();\r\n        draw_ctx.restore();\r\n    }\r\n}\r\n\r\nexport function draw_level_tile(draw_ctx: CanvasRenderingContext2D, \r\n                                wtc_tfm: Transform,\r\n                                tile: SceneTile) {\r\n    const c_corner = wtc_tfm.multiply_array(tile.get_translation());\r\n    const c_size = wtc_tfm.apply_scale(tile.get_tile_size());\r\n    const type = tile.get_type();\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth = TILE_STROKE_WIDTH;\r\n    draw_ctx.fillStyle = TILE_WALKABLE_COLOR;\r\n    draw_ctx.strokeStyle = TILE_STROKE_COLOR;\r\n\r\n    draw_ctx.beginPath();\r\n\r\n    if(type == 0) {\r\n        // walkable\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size, c_size);            \r\n    } else if(type == 2) {\r\n        draw_ctx.rect(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2, c_size / 2, c_size / 2);\r\n    } else if(type == 3) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1] + c_size / 2, c_size / 2, c_size / 2);\r\n    } else if(type == 4) {\r\n        draw_ctx.rect(c_corner[0] + c_size / 2, c_corner[1], c_size / 2, c_size / 2);\r\n    } else if(type == 5) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size / 2, c_size / 2);\r\n    } else if(type == 6) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1] + c_size / 2, c_size, c_size / 2);\r\n    } else if(type == 7) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size / 2, c_size);\r\n    } else if(type == 8) {\r\n        draw_ctx.rect(c_corner[0], c_corner[1], c_size, c_size / 2);\r\n    } else if(type == 9) {\r\n        draw_ctx.rect(c_corner[0] + c_size / 2, c_corner[1], c_size / 2, c_size);\r\n    } else if(type == 10) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n    } else if(type == 11) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n    } else if(type == 12) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1]);\r\n    } else if(type == 13) {\r\n        draw_ctx.moveTo(c_corner[0], c_corner[1] + c_size / 2);\r\n        draw_ctx.lineTo(c_corner[0], c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n        draw_ctx.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1]);\r\n        draw_ctx.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n    }\r\n\r\n    draw_ctx.fill();\r\n    if(TILE_IS_STROKE) {\r\n        draw_ctx.stroke();\r\n    }\r\n    draw_ctx.restore();\r\n}\r\n\r\nfunction draw_person(draw_ctx: CanvasRenderingContext2D, \r\n                     wtc_tfm: Transform, \r\n                     person: Person,\r\n                     stroke_width: number,\r\n                     move_color: string,\r\n                     iddle_color: string,\r\n                     stroke_color: string,\r\n                     is_stroke: boolean) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth = stroke_width;\r\n    draw_ctx.fillStyle = person.get_move() ? move_color : iddle_color;\r\n    draw_ctx.strokeStyle = stroke_color;\r\n    draw_ctx.beginPath();\r\n    // constuct transform from local to canvas\r\n    const person_tfm = person.get_tfm();\r\n    const tfm = wtc_tfm.compose_tfms(person_tfm);\r\n    // calculate center on canvas\r\n    const c_center = tfm.multiply(0.0, 0.0);\r\n    // calculate radius on canvas\r\n    const radius = person.get_radius();\r\n    const c_radius = tfm.apply_scale(radius);\r\n    const p2 = tfm.multiply(radius * Math.SQRT2, 0.0);\r\n    const a = person_tfm.rotation();\r\n    draw_ctx.arc(c_center[0], c_center[1], c_radius, a + Math.PI / 4, 2 * Math.PI + a - Math.PI / 4);\r\n    draw_ctx.lineTo(p2[0], p2[1]);\r\n    draw_ctx.fill();\r\n    \r\n    if(is_stroke) {\r\n        draw_ctx.stroke();\r\n    }\r\n    draw_ctx.restore();\r\n}\r\n\r\nexport function draw_player(draw_ctx: CanvasRenderingContext2D, \r\n                            wtc_tfm: Transform, \r\n                            player: Player) {\r\n    \r\n    draw_person(draw_ctx,\r\n        wtc_tfm,\r\n        player,\r\n        PLAYER_STROKE_WIDTH,\r\n        PLAYER_MOVE_COLOR,\r\n        PLAYER_IDLE_COLOR,\r\n        PLAYER_STROKE_COLOR,\r\n        PLAYER_IS_STROKE);\r\n}\r\n\r\nexport function draw_monster(draw_ctx: CanvasRenderingContext2D, \r\n                             wtc_tfm: Transform, \r\n                             player: Player) {\r\n    \r\n    draw_person(draw_ctx,\r\n        wtc_tfm,\r\n        player,\r\n        MONSTER_STROKE_WIDTH,\r\n        MONSTER_MOVE_COLOR,\r\n        MONSTER_IDLE_COLOR,\r\n        MONSTER_STROKE_COLOR,\r\n        MONSTER_IS_STROKE);\r\n}\r\n\r\nexport function draw_trajectory(draw_ctx: CanvasRenderingContext2D, \r\n                                wtc_tfm: Transform,\r\n                                coordinates: Float32Array) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth = DEBUG_TRAJECTORY_WIDTH;\r\n    draw_ctx.strokeStyle = DEBUG_TRAJECTORY_COLOR;\r\n    draw_ctx.beginPath();\r\n    const points_count = coordinates.length / 2;\r\n    const c = wtc_tfm.multiply(coordinates[0], coordinates[1]);\r\n    draw_ctx.moveTo(c[0], c[1]);\r\n    for(let i = 1; i < points_count; i++) {\r\n        const p = wtc_tfm.multiply(coordinates[2*i], coordinates[2*i+1]);\r\n        draw_ctx.lineTo(p[0], p[1]);\r\n    }\r\n    draw_ctx.stroke();\r\n    draw_ctx.restore();\r\n}\r\n\r\nexport function draw_pairs(draw_ctx: CanvasRenderingContext2D, \r\n                           wtc_tfm: Transform,\r\n                           array: Array<number>) {\r\n    draw_ctx.save();\r\n    draw_ctx.lineWidth =  DEBUG_CLOSEST_PAIR_WIDTH;\r\n    draw_ctx.strokeStyle = DEBUG_CLOSEST_PAIR_COLOR;\r\n    draw_ctx.beginPath();\r\n    const piars_count = array.length / 4;\r\n    for(let i = 0; i < piars_count; i++) {\r\n        const p_start = wtc_tfm.multiply(array[4*i], array[4*i + 1]);\r\n        const p_finish = wtc_tfm.multiply(array[4*i + 2], array[4*i + 3]);\r\n        draw_ctx.moveTo(p_start[0], p_start[1]);\r\n        draw_ctx.lineTo(p_finish[0], p_finish[1]);\r\n    }\r\n    draw_ctx.stroke();\r\n    draw_ctx.restore();\r\n}","import { ClientDataCanvas } from \"./client_data_canvas/client_data_canvas\";\r\n\r\nlet client = new ClientDataCanvas();\r\n","import { ClientBase } from \"../client_base\";\r\nimport { CAMERA_LERP_COEFFICIENT, TILE_PIXELS_SIZE } from \"../constants\";\r\nimport { TILE_NONWALKABLE_COLOR } from \"./visual_styles\";\r\nimport { draw_background, draw_cursor, draw_level_tile, draw_monster, draw_pairs, draw_player, draw_trajectory } from \"./draws\";\r\n\r\n// this version of the client application\r\n// use 2d canvas as draw device\r\n// it use simple procedural shapes for visualise all game items\r\nexport class ClientDataCanvas extends ClientBase {\r\n    m_canvas_width: number;\r\n    m_canvas_height: number;\r\n\r\n    m_camera_position_x: number = 0.0;\r\n    m_camera_position_y: number = 0.0;\r\n\r\n    m_debug_trajectories: Map<number, Float32Array> = new Map<number, Float32Array>();\r\n    m_debug_pairs: Array<number>;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.m_canvas_width = this.m_scene_canvas.width;\r\n        this.m_canvas_height = this.m_scene_canvas.height;\r\n\r\n        this.m_debug_trajectories.clear();\r\n        this.m_debug_pairs = new Array<number>();\r\n    }\r\n\r\n    start(): void {\r\n        this.update_process();\r\n    }\r\n\r\n    point_to_world(in_x: number, in_y: number) : number[] {\r\n        // in this implementaion we use m_wtc_tfm as transform from canvas to world\r\n        // this transform is also used for the map\r\n        const ctw_tfm = this.m_wtc_tfm.inverse();\r\n        const pos = ctw_tfm.multiply(in_x, in_y);\r\n        return pos;\r\n    }\r\n\r\n    // in this implementation we does not need this\r\n    scene_tile_delete(index: number): void { }\r\n    scene_tile_create(pos_x: number, pos_y: number, index: number, type: number): void { }\r\n    scene_create_player(radius: number): void { }\r\n    mouse_click(inc_x: number, inc_y: number, inw_x: number, inw_y: number): void { }\r\n    // when define player position, we should update camera to output shapes to the canvas\r\n    scene_define_player_changes(pos_x: number, pos_y: number, angle: number, is_move: boolean): void { \r\n        // update wtc transform\r\n        this.m_camera_position_x = CAMERA_LERP_COEFFICIENT * pos_x + (1 - CAMERA_LERP_COEFFICIENT) * this.m_camera_position_x;\r\n        this.m_camera_position_y = CAMERA_LERP_COEFFICIENT * pos_y + (1 - CAMERA_LERP_COEFFICIENT) * this.m_camera_position_y;\r\n\r\n        this.m_wtc_tfm.set_translation(this.m_canvas_width / 2 - this.m_camera_position_x * this.m_wtc_scale, this.m_canvas_height / 2 - this.m_camera_position_y * this.m_wtc_scale);\r\n    }\r\n    scene_create_monster(entity: number, radius: number): void { }\r\n    scene_define_monster_changes(entity: number, pos_x: number, pos_y: number, angle: number, is_move: boolean): void { }\r\n    scene_remove_monster(entity: number): void {}\r\n\r\n    debug_entity_trajectory(entity: number, coordinates: Float32Array): void {\r\n        // store coordinates in temporary map\r\n        // draw these trajectories at draw method\r\n        this.m_debug_trajectories.set(entity, coordinates);\r\n    }\r\n\r\n    debug_close_entity_pair(entity_a: number, a_pos_x: number, a_pos_y: number, entity_b: number, b_pos_x: number, b_pos_y: number): void {\r\n        this.m_debug_pairs.push(a_pos_x);\r\n        this.m_debug_pairs.push(a_pos_y);\r\n\r\n        this.m_debug_pairs.push(b_pos_x);\r\n        this.m_debug_pairs.push(b_pos_y);\r\n    }\r\n\r\n    update_process() {\r\n        // clear debug before update\r\n        // because at update it calls callbacks and fill this map\r\n        this.m_debug_trajectories.clear();\r\n        this.m_debug_pairs.length = 0;\r\n\r\n        this.update();\r\n\r\n        // in this client we should draw the scene\r\n        this.draw_scene();\r\n\r\n        window.requestAnimationFrame(this.update_process.bind(this));\r\n    }\r\n\r\n    draw_scene() {\r\n        // clear the background\r\n        this.m_scene_ctx.clearRect(0, 0, this.m_canvas_width, this.m_canvas_height);\r\n        draw_background(this.m_scene_ctx, this.m_scene_canvas.width, this.m_scene_canvas.height)\r\n\r\n        // draw scene items\r\n        // tiles\r\n        const level_tiles = this.m_scene.get_level_tiles();\r\n        for(let [tile_index, tile] of level_tiles) {\r\n            draw_level_tile(this.m_scene_ctx, this.m_wtc_tfm, tile)\r\n        }\r\n\r\n        // draw the cursor\r\n        const click_cursor = this.m_scene.get_click_cursor();\r\n        draw_cursor(this.m_scene_ctx, this.m_wtc_tfm, click_cursor);\r\n\r\n        // player\r\n        const player = this.m_scene.get_player();\r\n        draw_player(this.m_scene_ctx, this.m_wtc_tfm, player);\r\n\r\n        // monsters\r\n        const monsters = this.m_scene.get_monsters();\r\n        for(let [entity, monster] of monsters) {\r\n            draw_monster(this.m_scene_ctx, this.m_wtc_tfm, monster);\r\n        }\r\n\r\n        // draw debug trajectories\r\n        for(let [entity, coordinates] of this.m_debug_trajectories) {\r\n            draw_trajectory(this.m_scene_ctx, this.m_wtc_tfm, coordinates);\r\n        }\r\n\r\n        // and closest pairs\r\n        draw_pairs(this.m_scene_ctx, this.m_wtc_tfm, this.m_debug_pairs);\r\n    }\r\n}"],"names":["async","$c73d7759e7ded5ad$export$f9bb8d20ccc7477a","module","imports","adaptedImports","env","Object","assign","create","globalThis","abort","message","fileName","lineNumber","columnNumber","__liftString","Error","level_width","level_height","tile_size","host","define_level","total_tiles","define_total_tiles","vertices","polygons","sizes","__liftStaticArray","__getF32","__getI32","define_navmesh","radius","create_player","pos_x","pos_y","angle","is_move","define_player_changes","count","define_total_update_entities","entity","define_monster_changes","points","debug_entity_walk_path","e1","pos_x1","pos_y1","e2","pos_x2","pos_y2","debug_close_entity","index","tile_delete","x","y","type","tile_create","remove_monster","create_monster","exports","WebAssembly","instantiate","memory","adaptedExports","setPrototypeOf","create_settings","__liftInternref","settings_set_seed","settings","seed","__lowerInternref","__notnull","settings_set_generate","level_size","room_min_size","room_max_size","rooms_count","settings_set_use_debug","in_use_debug","settings_set_debug_flags","in_show_path","in_show_closest","settings_set_neighborhood_quad_size","in_size","settings_set_rvo_time_horizon","in_time","create_game","game_update","game","dt","game_client_point","in_x","in_y","game_add_monsters","pointer","end","Uint32Array","buffer","memoryU16","Uint16Array","start","string","String","fromCharCode","subarray","liftElement","align","length","__dataview","getUint32","DataView","__getU32","values","Array","i","Internref","Number","registry","FinalizationRegistry","refcount","refcounts","get","__unpin","delete","set","sentinel","__pin","__retain","register","value","valueOf","TypeError","Map","getInt32","getFloat32","$55f2ecb58225d6c7$export$dec075e787bbf2fa","$f16e9672ec91febb$export$563a914cafbdc389","m_matrix","Float32Array","m_angle","m_scale_x","m_scale_y","constructor","this","matrix_array","set_matrix_array","in_array","set_translation","translation","_update_rotation","Math","cos","sin","set_rotation","in_value","rotation","set_scale","set_uniform_scale","multiply","multiply_array","in_coordinates","apply_scale","sqrt","compose_tfms","other","to_return","a","b","result","_det2","c","d","inverse","m","toString","$178042aa2c7d65a2$export$18a53f1bbc175d6c","$178042aa2c7d65a2$export$7f5701e64ff28313","$178042aa2c7d65a2$export$8e9e21cb4ba66e8a","$570cf7c0464d6eb1$export$a67fcbf599a20f60","m_active","m_tfm","m_scale","m_scale_index","in_ctxt","in_wtc_tfm","in_tile_size","in_vertices","in_polygons","in_sizes","m_context","m_wtc_tfm","m_canvas_width","canvas","width","m_canvas_height","height","m_tile_size","m_vertices","m_polygons","m_sizes","floor","_update_scale","toggle_active","scale_up","scale_down","draw","clearRect","pos","save","fillStyle","strokeStyle","lineWidth","shift","s","beginPath","j","v","c_position","moveTo","lineTo","fill","stroke","c_center","arc","PI","restore","$034754255a7c6cea$export$9c15a42db78ae2ef","set_position","set_angle","get_tfm","get_translation","$d3cdc929a48dff87$export$a4d5907be24f10a8","m_time_accum","m_life_time","super","activate","get_active","update","deactivate","get_proportion","$276293489b0116c9$export$c0132fff8e013c5d","m_type","get_tile_size","get_type","$a3d187aad3887238$export$d0e824889e01c751","m_radius","m_is_move","set_radius","set_move","get_move","get_radius","$6416d36ee6f7b910$export$2616165974278734","$873e84d0b6afad0d$export$d2385d4b1e3b9d1a","$7b6acdcc84d7fdce$export$38af1803e3442a7f","m_level_width","m_level_height","m_level_tile_size","m_last_click_time","m_click_number","m_click_cursor","m_level_tiles","m_player","m_monsters","level_tile_size","click_position","wasm_module","game_ptr","force","current_time","performance","now","is_define","reset_click","get_click_cursor","get_level_tiles","get_player","get_monsters","delete_tile","has","create_tile","set_player_position","set_player_radius","set_player_angle","set_player_move","set_monster_position","monster","set_monster_radius","set_monster_angle","set_monster_move","$2cc090ebe2c5f8ef$export$e6ad3a0ec4b2e90f","mouse_event","canvas_rect","getBoundingClientRect","clientX","left","clientY","top","$492333b0ad62fdec$export$f03163d7279986d4","$33d4847c3617f155$export$8b768cd553057a13","html_id","m_html_element","document","getElementById","show","style","visibility","hide","$862899718e90ca39$export$ae44022dcc4e43cc","set_text","text","innerText","$2b73031844bf817e$export$bc3bf32b2a642c5a","m_accumulator","m_ticks","m_value","round","toFixed","$ac97b2179e748b61$export$f1569c0fcc611a8e","total_id","visible_id","m_total_element","m_visible_element","update_values","total","visible","$6882fe66818c8fa1$export$3828dcf1a148271e","assign_fps_element","m_fps","assign_count_elements","m_items","assign_pause_screen","m_pause_screen","assign_loading","m_loading","update_count_values","on_pause","off_pause","loading_hide","$23cae2dc541edd99$export$8f6e4be34af2779b","m_module","undefined","m_is_start","m_wtc_scale","m_is_mouse_press","m_total_level_entities","m_is_game_active","m_is_pause","bind","m_ui","m_scene_canvas","m_scene_ctx","getContext","m_map_canvas","m_map_ctx","pointerEvents","m_current_time","window","addEventListener","event","preventDefault","local_this","onkeydown","key_event","key","mouse_press_event","mouse_release_event","onmousemove","m_mouse_event","visibilitychange_event","fetch","then","response","compileStreaming","console","log","settings_ptr","random","m_game_ptr","hidden","toggle_activate","c_world","point_to_world","m_scene","mouse_click","m_map","time","size","draw_map","scene_tile_delete","scene_tile_create","scene_create_player","scene_define_player_changes","scene_create_monster","scene_define_monster_changes","scene_remove_monster","coordinates","debug_entity_trajectory","debug_close_entity_pair","$f9b95ce5c1226078$export$8552bb84728abe17","draw_ctx","wtc_tfm","cursor","prop","pow","min","c_radius","$f9b95ce5c1226078$export$44a885b113ef7fa4","tile","c_corner","c_size","rect","$f9b95ce5c1226078$var$draw_person","person","stroke_width","move_color","iddle_color","stroke_color","is_stroke","person_tfm","tfm","p2","SQRT2","$f9b95ce5c1226078$export$81d3421d8062504e","player","$f9b95ce5c1226078$export$f6c2b352dcf2259f","$f9b95ce5c1226078$export$9dcff9b689c89317","points_count","p","$f9b95ce5c1226078$export$16bc6b67ddae1d3a","array","piars_count","p_start","p_finish","m_camera_position_x","m_camera_position_y","m_debug_trajectories","clear","m_debug_pairs","update_process","inc_x","inc_y","inw_x","inw_y","entity_a","a_pos_x","a_pos_y","entity_b","b_pos_x","b_pos_y","push","draw_scene","requestAnimationFrame","fillRect","level_tiles","tile_index","click_cursor","monsters"],"version":3,"file":"module.js.map"}