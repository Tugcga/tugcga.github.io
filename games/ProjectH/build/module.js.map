{"mappings":"AAAAA,eAAeC,EAAYC,EAAQC,EAAU,CAAC,GAC5C,MAAMC,EAAiB,CACrBC,IAAKC,OAAOC,OAAOD,OAAOE,OAAOC,YAAaN,EAAQE,KAAO,CAAC,EAAG,CAC/DK,MAAMC,EAASC,EAAUC,EAAYC,GAEnCH,EAAUI,EAAaJ,IAAY,GACnCC,EAAWG,EAAaH,IAAa,GACrCC,KAA4B,EAC5BC,KAAgC,EAC/B,MAEC,MAAME,MAAM,GAAGL,QAAcC,KAAYC,KAAcC,IACzD,EAHC,EAIH,MAGEG,QAAEA,SAAkBC,YAAYC,YAAYjB,EAAQE,GACpDgB,EAASH,EAAQG,QAAUjB,EAAQE,IAAIe,OACvCC,EAAiBf,OAAOgB,eAAe,CAC3CC,8BAAA,CAA8BC,EAAMC,IAE0B,GAArDR,EAAQM,8BAA8BC,EAAMC,GAErDC,kBAAA,IAESC,EAAkBC,EAAU,EAAGX,EAAQS,sBAAwB,GAExEG,cAAA,IAESF,EAAkBC,EAAU,EAAGX,EAAQY,kBAAoB,IAEnEZ,GACH,SAASF,EAAae,GACpB,IAAKA,EAAS,OAAO,KACrB,MACEC,EAAMD,EAAU,IAAIE,YAAYZ,EAAOa,QAAQH,EAAU,IAAM,KAAO,EACtEI,EAAY,IAAIC,YAAYf,EAAOa,QACrC,IACEG,EAAQN,IAAY,EACpBO,EAAS,GACX,KAAON,EAAMK,EAAQ,MAAMC,GAAUC,OAAOC,gBAAgBL,EAAUM,SAASJ,EAAOA,GAAS,OAC/F,OAAOC,EAASC,OAAOC,gBAAgBL,EAAUM,SAASJ,EAAOL,GACnE,CACA,SAASJ,EAAkBc,EAAaC,EAAOZ,GAC7C,IAAKA,EAAS,OAAO,KACrB,MACEa,EAMJ,SAAkBb,GAChB,IACE,OAAOc,EAAWC,UAAUf,GAAS,EAIvC,CAHE,MAEA,OADAc,EAAa,IAAIE,SAAS1B,EAAOa,QAC1BW,EAAWC,UAAUf,GAAS,EACvC,CACF,CAbaiB,CAASjB,EAAU,KAAOY,EACnCM,EAAS,IAAIC,MAAMN,GACrB,IAAK,IAAIO,EAAI,EAAGA,EAAIP,IAAUO,EAAGF,EAAOE,GAAKT,EAAYX,GAAWoB,GAAKR,IAAU,IACnF,OAAOM,CACT,CACA,IAAIJ,EAAa,IAAIE,SAAS1B,EAAOa,QASrC,SAASL,EAASE,GAChB,IACE,OAAOc,EAAWO,WAAWrB,GAAS,EAIxC,CAHE,MAEA,OADAc,EAAa,IAAIE,SAAS1B,EAAOa,QAC1BW,EAAWO,WAAWrB,GAAS,EACxC,CACF,CACA,OAAOT,CACT,CACO,MAAMD,OACXgC,EAAMC,YACNC,EAAWC,YACXC,EAAWjC,8BACXkC,EAA6B/B,kBAC7BgC,EAAiBC,YACjBC,EAAW/B,cACXgC,QACQ,OAAOC,GAAO7D,OAChB,gBACSQ,WAAWS,YAAY6C,iBAAiBtD,WAAWuD,MAAMF,IADlE,GAEA,CACN,GAJQ,CAKV,IAAAG,IAAA,0CAAAC,OAAAC,KAAAL,MCnFA,IAAOM,E,IAAWC,KAAAD,MAAA,KAAAC,EACd,6BADcA,IAEd,+BAFcA,IAGd,yBAHcA,IAId,uCAJcA,IAKd,uCALcA,IAMd,iCANcA,IAOd,qCAPcA,IAQd,iCARcA,IASd,6BATcA,IAUd,+BAVcA,IAWd,oCAXcA,IAYd,wCAZcA,IAad,oCAbcA,IAcd,gCAdcA,IAed,kCAfcA,IAgBd,4CAhBcA,IAiBd,sCAjBcA,IAkBd,sCAlBcA,IAmBd,0CCnBG,MAGMC,EAAkC,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,ICHtE,MAAMC,EACTC,SAAW,IAAIC,aAAa,GAG5BC,QAAkB,EAClBC,UAAoB,EACpBC,UAAoB,EAEpBC,cACIC,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EACnEM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EACnEM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,EAAKM,KAAKN,SAAS,GAAK,CACvE,CAEAO,eACI,OAAOD,KAAKN,QAChB,CAIAQ,iBAAiBC,GACb,IAAI,IAAI/B,EAAI,EAAGA,EAAI,EAAGA,IAClB4B,KAAKN,SAAStB,GAAK+B,EAAS/B,EAEpC,CAEAgC,gBAAgB1D,EAAcC,GAC1BqD,KAAKN,SAAS,GAAKhD,EACnBsD,KAAKN,SAAS,GAAK/C,CACvB,CAEA0D,cACI,MAAO,CAACL,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAC5C,CAEQY,mBACJN,KAAKN,SAAS,GAAKa,KAAKC,IAAIR,KAAKJ,SAAWI,KAAKH,UACjDG,KAAKN,SAAS,GAAKa,KAAKE,IAAIT,KAAKJ,SAAWI,KAAKH,UACjDG,KAAKN,SAAS,IAAMa,KAAKE,IAAIT,KAAKJ,SAAWI,KAAKF,UAClDE,KAAKN,SAAS,GAAKa,KAAKC,IAAIR,KAAKJ,SAAWI,KAAKF,SACrD,CAEAY,aAAaC,GACTX,KAAKJ,QAAUe,EACfX,KAAKM,kBACT,CAEAM,WACI,OAAOZ,KAAKJ,OAChB,CAEAiB,UAAUnE,EAAcC,GACpBqD,KAAKH,UAAYnD,EACjBsD,KAAKF,UAAYnD,EAEjBqD,KAAKM,kBACT,CAEAQ,kBAAkBH,GACdX,KAAKH,UAAYc,EACjBX,KAAKF,UAAYa,EAEjBX,KAAKM,kBACT,CAEAS,SAASrE,EAAcC,GACnB,MAAO,CAACqD,KAAKN,SAAS,GAAKhD,EAAOsD,KAAKN,SAAS,GAAK/C,EAAOqD,KAAKN,SAAS,GAClEM,KAAKN,SAAS,GAAKhD,EAAOsD,KAAKN,SAAS,GAAK/C,EAAOqD,KAAKN,SAAS,GAC9E,CAEAsB,YAAYL,GAOR,OAAOA,GALIJ,KAAKU,KAAKjB,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,IAEjFa,KAAKU,KAAKjB,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,KAG9D,CAClC,CAGAwB,aAAaC,GACT,IAAIC,EAAY,IAAI3B,EAEpB,MAAM4B,EAAIrB,KAAKC,eACTqB,EAAIH,EAAMlB,eAGhB,IAAIsB,EAAS,CAACF,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GACzFD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GACzFD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAID,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE,IAGvG,OAFAF,EAAUlB,iBAAiBqB,GAEpBH,CACX,CAEQI,MAAMH,EAAWC,EAAWG,EAAWC,GAC3C,OAAOL,EAAEK,EAAIJ,EAAEG,CACnB,CAIAE,UAEI,MAAMD,EAAI1B,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAC9DM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GACpDM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GACpDM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GACpDM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GACpDM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAAKM,KAAKN,SAAS,GAE9CkC,EAAI,CAAC5B,KAAKwB,MAAMxB,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMgC,GAAG,EAAK1B,KAAKwB,MAAMxB,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMgC,EAAG1B,KAAKwB,MAAMxB,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMgC,GACrR,EAAK1B,KAAKwB,MAAMxB,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMgC,EAAG1B,KAAKwB,MAAMxB,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMgC,GAAG,EAAK1B,KAAKwB,MAAMxB,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMgC,EAC/Q1B,KAAKwB,MAAMxB,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMgC,GAAG,EAAK1B,KAAKwB,MAAMxB,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMgC,EAAG1B,KAAKwB,MAAMxB,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,GAAIM,KAAKN,SAAS,IAAMgC,GAE1Q,IAAIN,EAAY,IAAI3B,EAGpB,OAFA2B,EAAUlB,iBAAiB0B,GAEpBR,CACX,CAEAS,WACI,IAAIT,EAAY,GAIhB,OAHAA,GAAapB,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KACpF0B,GAAapB,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KACpF0B,GAAapB,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GAAK,KAAOM,KAAKN,SAAS,GACxE0B,CACX,EC/HG,MAGMU,EAAoB,0BAgBpBC,EAA4B,0BAI5BC,EAAY,0BCnBzB,MAAeC,EAIXlC,YAAYmC,EAAmCC,GAC3CnC,KAAKoC,UAAYD,EACjBnC,KAAKqC,UAAYH,CACrB,EAKG,MAAMI,UAAiBL,EAC1BM,SAAmB,EACnBC,SAAmB,EAEnBC,OAAiB,EACjBC,OAAiB,EAEjB3C,YAAYmC,EACAC,EACAzF,EACAC,EACAgG,EACAC,GACRC,MAAMX,EAASC,GAEfnC,KAAKuC,SAAW7F,EAChBsD,KAAKwC,SAAW7F,EAChBqD,KAAKyC,OAASE,EACd3C,KAAK0C,OAASE,CAClB,CAEAE,OACI,MAAMC,EAAW/C,KAAKoC,UAAUrB,SAASf,KAAKuC,SAAUvC,KAAKwC,UACvDQ,EAAShD,KAAKoC,UAAUpB,YAAYhB,KAAKyC,QAC/CzC,KAAKqC,UAAUY,OACfjD,KAAKqC,UAAUa,UD5BU,GC6BzBlD,KAAKqC,UAAUc,UD3BY,qBC4B3BnD,KAAKqC,UAAUe,YD7BU,qBC+BzBpD,KAAKqC,UAAUgB,YAEG,GAAfrD,KAAK0C,OAEJ1C,KAAKqC,UAAUiB,KAAKP,EAAS,GAAIA,EAAS,GAAIC,EAAQA,GACjC,GAAfhD,KAAK0C,OACX1C,KAAKqC,UAAUiB,KAAKP,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,EAAGA,EAAS,EAAGA,EAAS,GACxE,GAAfhD,KAAK0C,OACX1C,KAAKqC,UAAUiB,KAAKP,EAAS,GAAIA,EAAS,GAAKC,EAAS,EAAGA,EAAS,EAAGA,EAAS,GAC3D,GAAfhD,KAAK0C,OACX1C,KAAKqC,UAAUiB,KAAKP,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAIC,EAAS,EAAGA,EAAS,GAC3D,GAAfhD,KAAK0C,OACX1C,KAAKqC,UAAUiB,KAAKP,EAAS,GAAIA,EAAS,GAAIC,EAAS,EAAGA,EAAS,GAC9C,GAAfhD,KAAK0C,OACX1C,KAAKqC,UAAUiB,KAAKP,EAAS,GAAIA,EAAS,GAAKC,EAAS,EAAGA,EAAQA,EAAS,GACvD,GAAfhD,KAAK0C,OACX1C,KAAKqC,UAAUiB,KAAKP,EAAS,GAAIA,EAAS,GAAIC,EAAS,EAAGA,GACrC,GAAfhD,KAAK0C,OACX1C,KAAKqC,UAAUiB,KAAKP,EAAS,GAAIA,EAAS,GAAIC,EAAQA,EAAS,GAC1C,GAAfhD,KAAK0C,OACX1C,KAAKqC,UAAUiB,KAAKP,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAIC,EAAS,EAAGA,GAClD,IAAfhD,KAAK0C,QACX1C,KAAKqC,UAAUkB,OAAOR,EAAS,GAAIA,EAAS,IAC5C/C,KAAKqC,UAAUmB,OAAOT,EAAS,GAAIA,EAAS,GAAKC,GACjDhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,GAC9DhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,GACvEhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAQD,EAAS,GAAKC,EAAS,GACnEhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAQD,EAAS,KAChC,IAAf/C,KAAK0C,QACX1C,KAAKqC,UAAUkB,OAAOR,EAAS,GAAIA,EAAS,IAC5C/C,KAAKqC,UAAUmB,OAAOT,EAAS,GAAIA,EAAS,GAAKC,EAAS,GAC1DhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,GACvEhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,GAC9DhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAQD,EAAS,GAAKC,GAC1DhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAQD,EAAS,KAChC,IAAf/C,KAAK0C,QACX1C,KAAKqC,UAAUkB,OAAOR,EAAS,GAAIA,EAAS,IAC5C/C,KAAKqC,UAAUmB,OAAOT,EAAS,GAAIA,EAAS,GAAKC,GACjDhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAQD,EAAS,GAAKC,GAC1DhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAQD,EAAS,GAAKC,EAAS,GACnEhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,GACvEhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAS,EAAGD,EAAS,KACpC,IAAf/C,KAAK0C,SACX1C,KAAKqC,UAAUkB,OAAOR,EAAS,GAAIA,EAAS,GAAKC,EAAS,GAC1DhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAIA,EAAS,GAAKC,GACjDhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAQD,EAAS,GAAKC,GAC1DhD,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAQD,EAAS,IACrD/C,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAS,EAAGD,EAAS,IACzD/C,KAAKqC,UAAUmB,OAAOT,EAAS,GAAKC,EAAS,EAAGD,EAAS,GAAKC,EAAS,IAG3EhD,KAAKqC,UAAUoB,OAEXzD,KAAKqC,UAAUqB,SAEnB1D,KAAKqC,UAAUsB,SACnB,EAGJ,MAAMC,UAAmB3B,EACrB4B,SAAmB,EACnBC,WAAqB,EAErBC,MAAmB,IAAItE,EAGvBuE,eAAyB,EACzBC,aAAuB,GACvBC,cAAwB,GACxBC,cAAwB,GACxBC,aAAuB,EAEvBrE,YAAYmC,EACAC,GACRU,MAAMX,EAASC,EACnB,CAEAkC,SAAS1D,GACLX,KAAK8D,UAAYnD,CACrB,CAEA2D,aAAa5H,EAAcC,GACvBqD,KAAK+D,MAAM3D,gBAAgB1D,EAAMC,EACrC,CAEA+D,aAAaC,GACTX,KAAK+D,MAAMrD,aAAaC,EAC5B,CAEA4D,WAAWC,GACPxE,KAAK6D,SAAWW,CACpB,CAEA1B,OACI9C,KAAKqC,UAAUY,OACfjD,KAAKqC,UAAUa,UAAYlD,KAAKgE,eAChChE,KAAKqC,UAAUc,UAAYnD,KAAK8D,UAAY9D,KAAKiE,aAAejE,KAAKkE,cACrElE,KAAKqC,UAAUe,YAAcpD,KAAKmE,cAClCnE,KAAKqC,UAAUgB,YAEf,MAAMoB,EAAMzE,KAAKoC,UAAUlB,aAAalB,KAAK+D,OAEvCW,EAAWD,EAAI1D,SAAS,EAAK,GAE7B4D,EAAWF,EAAIzD,YAAYhB,KAAK6D,UAChCe,EAAKH,EAAI1D,SAASf,KAAK6D,SAAWtD,KAAKsE,MAAO,GAC9CxD,EAAIrB,KAAK+D,MAAMnD,WACrBZ,KAAKqC,UAAUyC,IAAIJ,EAAS,GAAIA,EAAS,GAAIC,EAAUtD,EAAId,KAAKwE,GAAK,EAAG,EAAIxE,KAAKwE,GAAK1D,EAAId,KAAKwE,GAAK,GACpG/E,KAAKqC,UAAUmB,OAAOoB,EAAG,GAAIA,EAAG,IAChC5E,KAAKqC,UAAUoB,OAEZzD,KAAKoE,aACJpE,KAAKqC,UAAUqB,SAEnB1D,KAAKqC,UAAUsB,SACnB,EAGG,MAAMqB,UAAmBpB,EAE5B7D,YAAYmC,EACAC,GACRU,MAAMX,EAASC,GAEfnC,KAAKgE,eDxKsB,ECyK3BhE,KAAKiE,aDtKoB,yBCuKzBjE,KAAKkE,cAAgBpC,EACrB9B,KAAKmE,cD1KsB,mBC2K3BnE,KAAKoE,YD7KmB,KC8K5B,EAGG,MAAMa,UAAoBrB,EAE7B7D,YAAYmC,EACAC,GACRU,MAAMX,EAASC,GAEfnC,KAAKgE,eDhLuB,ECiL5BhE,KAAKiE,aD9KqB,yBC+K1BjE,KAAKkE,cDhLqB,0BCiL1BlE,KAAKmE,cDlLuB,mBCmL5BnE,KAAKoE,YDrLoB,KCsL7B,EAGG,MAAMc,UAAwBjD,EACjCkD,UAAoB,EAEpBC,QAAkB,EAClBC,QAAkB,EAElBC,aAAuB,EAEvBvF,YAAYmC,EACAC,GACRU,MAAMX,EAASC,EAEnB,CAEAoD,SAAS7I,EAAcC,GACnBqD,KAAKoF,QAAU1I,EACfsD,KAAKqF,QAAU1I,EAEfqD,KAAKsF,aAAeE,YAAYC,MAEhCzF,KAAKmF,UAAW,CACpB,CAEArC,OACI,GAAG9C,KAAKmF,SAAU,CACd,MACMO,EADeF,YAAYC,MACCzF,KAAKsF,aAEjCK,EAAepF,KAAKqF,IAAIrF,KAAKsF,IAAIH,EH1NV,IG0N0C,GAAM,KAG7E1F,KAAKqC,UAAUY,OACfjD,KAAKqC,UAAUa,UD3Mc,EC4M7BlD,KAAKqC,UAAUc,UD9MO,2BC+MtBnD,KAAKqC,UAAUe,YAAcrB,EAC7B/B,KAAKqC,UAAUgB,YACf,MAAMqB,EAAW1E,KAAKoC,UAAUrB,SAASf,KAAKoF,QAASpF,KAAKqF,SACtDV,EAAW3E,KAAKoC,UAAUpB,YHlOD,IGkOoC2E,EACnE3F,KAAKqC,UAAUyC,IAAIJ,EAAS,GAAIA,EAAS,GAAIC,EAAU,EAAG,EAAIpE,KAAKwE,IACnE/E,KAAKqC,UAAUoB,OACfzD,KAAKqC,UAAUqB,SAGf1D,KAAKqC,UAAUgB,YACfrD,KAAKqC,UAAUc,UAAYpB,EAC3B/B,KAAKqC,UAAUyC,IAAIJ,EAAS,GAAIA,EAAS,GDvNb,ECuN2C,EAAG,EAAInE,KAAKwE,IACnF/E,KAAKqC,UAAUoB,OACfzD,KAAKqC,UAAUsB,UAEZ+B,EH/O0B,MGgPzB1F,KAAKmF,UAAW,EAExB,CACJ,EAGG,MAAMW,UAAgB7D,EASzBkD,UAAoB,EACpBpB,MAAmB,IAAItE,EACvBsG,QAAkB,EAClBC,cAAwB,EAExBjG,YAAYmC,EAAmCC,EAC3C8D,EACAC,EAA2BC,EAAyBC,GACpDvD,MAAMX,EAASC,GAEfnC,KAAKqG,eAAiBnE,EAAQoE,OAAOC,MACrCvG,KAAKwG,gBAAkBtE,EAAQoE,OAAOG,OAEtCzG,KAAK0G,YAAcT,EAEnBjG,KAAK2G,WAAaT,EAClBlG,KAAK4G,WAAaT,EAClBnG,KAAK6G,QAAUT,EAEfpG,KAAKgG,cAAgBzF,KAAKuG,MAAMtH,EAAsB3B,OAAS,GAC/DmC,KAAK+G,eACT,CAEQA,gBACJ/G,KAAK+F,QAAUvG,EAAsBQ,KAAKgG,eAAiBhG,KAAK0G,WACpE,CAEAM,gBACIhH,KAAKmF,UAAYnF,KAAKmF,QAC1B,CAEA8B,WACOjH,KAAKmF,WACJnF,KAAKgG,gBACFhG,KAAKgG,eAAiBxG,EAAsB3B,QAC3CmC,KAAKgG,gBAEThG,KAAK+G,gBAEb,CAEAG,aACOlH,KAAKmF,WACJnF,KAAKgG,iBACoB,GAAtBhG,KAAKgG,eACJhG,KAAKgG,gBAEThG,KAAK+G,gBAEb,CAEAjE,OACI,GAAG9C,KAAKmF,SAAU,CAEd,MACMgC,EADUnH,KAAKoC,UAAUT,UACXZ,SAASf,KAAKqG,eAAiB,EAAGrG,KAAKwG,gBAAkB,GAE7ExG,KAAK+D,MAAMjD,kBAAkBd,KAAK+F,SAClC/F,KAAK+D,MAAM3D,gBAAgBJ,KAAKqG,eAAiB,EAAIc,EAAI,GAAKnH,KAAK+F,QAAS/F,KAAKwG,gBAAkB,EAAIW,EAAI,GAAKnH,KAAK+F,SAErH/F,KAAKqC,UAAUY,OACfjD,KAAKqC,UAAUc,UAAYnB,EAC3BhC,KAAKqC,UAAUe,YAAcpB,EAC7BhC,KAAKqC,UAAUa,UAAY,KAC3B,IAAIkE,EAAQ,EACZ,IAAI,IAAIhJ,EAAI,EAAGA,EAAI4B,KAAK6G,QAAQhJ,OAAQO,IAAK,CAEzC,MAAMiJ,EAAIrH,KAAK6G,QAAQzI,GAGvB4B,KAAKqC,UAAUgB,YAEf,IAAI,IAAIiE,EAAI,EAAGA,EAAID,EAAGC,IAAK,CACvB,MAAMC,EAAIvH,KAAK4G,WAAWQ,EAAQE,GAC5BE,EAAIxH,KAAK2G,WAAW,EAAEY,GACtBE,EAAIzH,KAAK2G,WAAW,EAAEY,EAAI,GAE1BG,EAAa1H,KAAK+D,MAAMhD,SAASyG,EAAGC,GAClC,GAALH,EACCtH,KAAKqC,UAAUkB,OAAOmE,EAAW,GAAIA,EAAW,IAEhD1H,KAAKqC,UAAUmB,OAAOkE,EAAW,GAAIA,EAAW,GAExD,CAEA1H,KAAKqC,UAAUoB,OACfzD,KAAKqC,UAAUqB,SAEf0D,GAASC,CACb,CAGArH,KAAKqC,UAAUgB,YACfrD,KAAKqC,UAAUc,UAAYrB,EAC3B,MAAM4C,EAAW1E,KAAK+D,MAAMhD,SAASoG,EAAI,GAAIA,EAAI,IAEjDnH,KAAKqC,UAAUyC,IAAIJ,EAAS,GAAIA,EAAS,GDxUtB,ECwU2C,EAAG,EAAInE,KAAKwE,IAC1E/E,KAAKqC,UAAUoB,OACfzD,KAAKqC,UAAUsB,SACnB,CACJ,EC7VG,MAAMgE,EAKTC,cAAwB,EACxBC,eAAyB,EACzBC,kBAA4B,EAE5BC,kBAA4B,EAC5BC,eAAyB,EAEzBC,cAAuC,IAAIC,IAE3CC,YAAsB,EACtB/F,UAAY,IAAI3C,EAMhB2I,WAAuC,IAAIF,IAC3CG,iBAA2B,EAE3BC,eAAyB,EACzBC,eAAyB,EAEzBC,kBAA4B,EAC5BC,YAAsB,EACtBC,YAAsB,EAEtB3I,YAAY4I,EAAkCC,EAAsBC,EAAuBC,GACvF9I,KAAKqC,UAAYsG,EACjB3I,KAAKqG,eAAiBuC,EACtB5I,KAAKwG,gBAAkBqC,EAEvB,IAAIE,EAAoC,IAAIpJ,aACxCqJ,EAAkC,IAAIC,WACtCC,EAA+B,IAAID,WAGvC,IAAIE,GAAqB,EACrBC,EAAU,EACd,MAAMC,EAAeP,EAAcjL,OACnC,MAAOsL,GAAW,CACd,MAAMG,EAAoBR,EAAcM,GAClCG,EAAcT,EAAcM,EAAU,GAG5C,GADAA,GAAW,EACRG,EAAc,EAEb,GAAGD,GAAahK,EAAKkK,YACjBxJ,KAAK4H,cAAgBkB,EAAcM,QAChC,GAAGE,GAAahK,EAAKmK,aACxBzJ,KAAK6H,eAAiBiB,EAAcM,QACjC,GAAGE,GAAahK,EAAKoK,UACxB1J,KAAK8H,kBAAoBgB,EAAcM,QACpC,GAAGE,GAAahK,EAAKqK,iBAAkB,CAC1CZ,EAAsB,IAAIpJ,aAAa4J,GACvC,IAAI,IAAInL,EAAI,EAAGA,EAAImL,EAAanL,IAC5B2K,EAAoB3K,GAAK0K,EAAcM,EAAUhL,EAEzD,MAAO,GAAGkL,GAAahK,EAAKsK,iBAAkB,CAC1CZ,EAAsB,IAAIC,WAAWM,GACrC,IAAI,IAAInL,EAAI,EAAGA,EAAImL,EAAanL,IAC5B4K,EAAoB5K,GAAK0K,EAAcM,EAAUhL,EAEzD,MAAO,GAAGkL,GAAahK,EAAKuK,cAAe,CACvCX,EAAmB,IAAID,WAAWM,GAClC,IAAI,IAAInL,EAAI,EAAGA,EAAImL,EAAanL,IAC5B8K,EAAiB9K,GAAK0K,EAAcM,EAAUhL,EAEtD,MAAUkL,GAAahK,EAAKwK,mBACxBC,QAAQC,IAAI,eAAgBlB,EAAcM,KAIlDA,GAAWG,IACGF,IACVF,GAAY,EAEpB,CAMAnJ,KAAKoC,UAAUhC,gBAAgB,EAAK,GACpCJ,KAAKmI,YJ/F2B,GI+FMnI,KAAK8H,kBAC3C9H,KAAKoC,UAAUtB,kBAAkBd,KAAKmI,aAGtCnI,KAAKiK,SAAW,IAAIjF,EAAWhF,KAAKqC,UAAWrC,KAAKoC,WACpDpC,KAAKkK,eAAiB,IAAIhF,EAAgBlF,KAAKqC,UAAWrC,KAAKoC,WAE/DpC,KAAKmK,MAAQ,IAAIrE,EAAQ9F,KAAKqC,UAAWrC,KAAKoC,UAAWpC,KAAK8H,kBAAmBiB,EAAqBC,EAAqBE,EAC/H,CAEAkB,cACIpK,KAAKgI,eAAiB,CAC1B,CAGAqC,eAAe3N,EAAcC,EAAc2N,GAAiB,GACxD,MAAMC,EAAe/E,YAAYC,MACjC,GAAG6E,GAASC,EAAevK,KAAK+H,mBAA4C,GAAvB/H,KAAKgI,eJzGnB,IACA,IIwG6F,CAChIhI,KAAK+H,kBAAoBwC,EACzBvK,KAAKgI,gBAAkB,EACpBhI,KAAKgI,eAAiB,IACrBhI,KAAKgI,eAAiB,GAM1B,MAAMb,EADQnH,KAAKoC,UAAUT,UACTZ,SAASrE,EAAMC,GAG7B6N,EAAqB7L,EAA8BwI,EAAI,GAAIA,EAAI,IAElEmD,GAASE,GACRxK,KAAKkK,eAAe3E,SAAS4B,EAAI,GAAIA,EAAI,GAEjD,CACJ,CAEAsD,YACI,IAAIC,EAAcC,SAASC,eAAe,eACvCF,IACCA,EAAYG,UAAY7K,KAAKqI,iBAAiBxG,YAGlD,IAAIiJ,EAAgBH,SAASC,eAAe,iBACzCE,IACCA,EAAcD,UAAY7K,KAAKoI,WAAW2C,KAAKlJ,YAGnD,IAAImJ,EAAML,SAASC,eAAe,OAC/BI,IACCA,EAAIH,WAAatK,KAAK0K,MAAyB,IAAnBjL,KAAK0I,aAAqB,KAAKwC,QAAQ,GAAGrJ,WAE9E,CAEAsJ,UAAUC,GACI,KAAPA,EACCpL,KAAKmK,MAAMnD,gBACE,KAAPoE,EACNpL,KAAKmK,MAAMlD,WACE,KAAPmE,GACNpL,KAAKmK,MAAMjD,YAEnB,CAEQmE,kBACJrL,KAAKqC,UAAUiJ,UAAU,EAAG,EAAGtL,KAAKqG,eAAgBrG,KAAKwG,iBAEzDxG,KAAKqC,UAAUY,OACfjD,KAAKqC,UAAUc,UFpJe,kBEqJ9BnD,KAAKqC,UAAUkJ,SAAS,EAAG,EAAGvL,KAAKqG,eAAgBrG,KAAKwG,iBACxDxG,KAAKqC,UAAUsB,SACnB,CAEAb,OACI9C,KAAKqL,kBAGL,IAAI,IAAKG,EAAYC,KAASzL,KAAKiI,cAC/BwD,EAAK3I,OAIT9C,KAAKkK,eAAepH,OAGpB9C,KAAKiK,SAASnH,OAGd,IAAI,IAAK4I,EAAgBC,KAAY3L,KAAKoI,WACtCuD,EAAQ7I,OAIZ9C,KAAKmK,MAAMrH,MACf,CAEA8I,OAAOC,EAA+BC,GAIlC,IAFA,IAAI3C,GAAY,EACZ4C,EAAgB,GACb5C,GAAW,CACd,MAAMG,EAAYuC,EAAWE,GACvBC,EAAaH,EAAWE,EAAgB,GAG9C,GADAA,GAAiB,EACdC,EAAa,EACZ,GAAG1C,GAAahK,EAAK2M,gBAAiB,CAClC,MAAMC,EAAQL,EAAWE,GACnBI,EAAQN,EAAWE,EAAgB,GACzC/L,KAAKiK,SAAS3F,aAAa4H,EAAOC,GAGlCnM,KAAKsI,eJ5MsB,EI4MqB4D,EAAQ,EAAgClM,KAAKsI,eAC7FtI,KAAKuI,eJ7MsB,EI6MqB4D,EAAQ,EAAgCnM,KAAKuI,eAG7FvI,KAAKoC,UAAUhC,gBAAgBJ,KAAKqG,eAAiB,EAAIrG,KAAKsI,eAAiBtI,KAAKmI,YAAanI,KAAKwG,gBAAkB,EAAIxG,KAAKuI,eAAiBvI,KAAKmI,YAC3J,MAAO,GAAGmB,GAAahK,EAAK8M,cAAe,CACvC,MAAMC,EAAIR,EAAWE,GACrB/L,KAAKiK,SAAS1F,WAAW8H,EAC7B,MAAO,GAAG/C,GAAahK,EAAKgN,aAAc,CACtC,MAAMjL,EAAIwK,EAAWE,GACrB/L,KAAKiK,SAASvJ,aAAaW,EAC/B,MAAO,GAAGiI,GAAahK,EAAKiN,YAAa,CACrC,MAAM3K,EAAIiK,EAAWE,GACrB/L,KAAKiK,SAAS5F,SAASzC,EAAI,GAC/B,MAAO,GAAG0H,GAAahK,EAAKkN,gBAExB,IAAI,IAAIC,EAAI,EAAGA,EAAIT,EAAYS,IAAK,CAChC,MAAMC,EAAYb,EAAWE,EAAgBU,GAC1CzM,KAAKiI,cAAc0E,IAAID,IACtB1M,KAAKiI,cAAc2E,OAAOF,EAElC,MAEC,GAAGpD,GAAahK,EAAKuN,gBAAiB,CAEvC,MAAMC,EAAkBd,EAAa,EACrC,IAAI,IAAIS,EAAI,EAAGA,EAAIK,EAAiBL,IAAK,CACrC,MAAMM,EAAQlB,EAAWE,EAAgB,EAAIU,GACvCO,EAAQnB,EAAWE,EAAgB,EAAIU,EAAI,GAC3CQ,EAAYpB,EAAWE,EAAgB,EAAIU,EAAI,GAC/CS,EAAWrB,EAAWE,EAAgB,EAAIU,EAAI,GAEpDzM,KAAKiI,cAAckF,IAAIF,EAAW,IAAI3K,EAAStC,KAAKqC,UAAWrC,KAAKoC,UAAW2K,EAAQ/M,KAAK8H,kBAAmBkF,EAAQhN,KAAK8H,kBAAmB9H,KAAK8H,kBAAmBoF,GAC3K,CACJ,MAAO,GAAG5D,GAAahK,EAAK8N,eACxBpN,KAAKqI,iBAAmBwD,EAAWE,QAChC,GAAGzC,GAAahK,EAAK+N,iBAAkB,CAC1C,MAAMC,EAAOzB,EAAWE,GAClBwB,EAAM1B,EAAWE,EAAgB,GACjCyB,EAAM3B,EAAWE,EAAgB,GAEvC,GAAG/L,KAAKoI,WAAWuE,IAAIW,GAAO,CAC1B,MAAM1L,EAAI5B,KAAKoI,WAAWqF,IAAIH,GAC3B1L,GACCA,EAAE0C,aAAaiJ,EAAKC,EAE5B,KAAO,CACH,IAAI5L,EAAI,IAAIqD,EAAYjF,KAAKqC,UAAWrC,KAAKoC,WAC7CR,EAAE0C,aAAaiJ,EAAKC,GACpBxN,KAAKoI,WAAW+E,IAAIG,EAAM1L,EAE9B,CACJ,MAAO,GAAG0H,GAAahK,EAAKoO,eAAgB,CACxC,MAAMJ,EAAOzB,EAAWE,GAClBlI,EAAWgI,EAAWE,EAAgB,GAC5C,GAAG/L,KAAKoI,WAAWuE,IAAIW,GAAO,CAC1B,MAAM1L,EAAI5B,KAAKoI,WAAWqF,IAAIH,GAC3B1L,GACCA,EAAE2C,WAAWV,EAErB,MACI7D,KAAKoI,WAAW+E,IAAIG,EAAM,IAAIrI,EAAYjF,KAAKqC,UAAWrC,KAAKoC,WAEvE,MAAO,GAAGkH,GAAahK,EAAKqO,cAAe,CACvC,MAAML,EAAOzB,EAAWE,GAClBnM,EAAUiM,EAAWE,EAAgB,GAC3C,GAAG/L,KAAKoI,WAAWuE,IAAIW,GAAO,CAC1B,MAAM1L,EAAI5B,KAAKoI,WAAWqF,IAAIH,GAC3B1L,GACCA,EAAElB,aAAad,EAEvB,MACII,KAAKoI,WAAW+E,IAAIG,EAAM,IAAIrI,EAAYjF,KAAKqC,UAAWrC,KAAKoC,WAEvE,MAAO,GAAGkH,GAAahK,EAAKsO,aAAc,CACtC,MAAMN,EAAOzB,EAAWE,GAClB8B,EAAShC,EAAWE,EAAgB,GAAK,GAC/C,GAAG/L,KAAKoI,WAAWuE,IAAIW,GAAO,CAC1B,MAAM1L,EAAI5B,KAAKoI,WAAWqF,IAAIH,GAC3B1L,GACCA,EAAEyC,SAASwJ,EAEnB,MACI7N,KAAKoI,WAAW+E,IAAIG,EAAM,IAAIrI,EAAYjF,KAAKqC,UAAWrC,KAAKoC,WAEvE,MAAO,GAAGkH,GAAahK,EAAKwO,mBACxB,IAAI,IAAIrB,EAAI,EAAGA,EAAIT,EAAYS,IAAK,CAChC,MAAMsB,EAAalC,EAAWE,EAAgBU,GAC3CzM,KAAKoI,WAAWuE,IAAIoB,IACnB/N,KAAKoI,WAAWwE,OAAOmB,EAE/B,EAIRhC,GAAiBC,IACGH,EAAWhO,SAC3BsL,GAAY,EAEpB,CAGAnJ,KAAKwI,mBAAqBsD,EAC1B9L,KAAKyI,aAAe,EAEpBzI,KAAK8C,OACL9C,KAAKyK,YAEFzK,KAAKwI,kBAAoB,IACxBxI,KAAK0I,YAAc1I,KAAKyI,YAAczI,KAAKwI,kBAG3CxI,KAAKwI,kBAAoB,EACzBxI,KAAKyI,YAAc,EAE3B,EChUJ,MAAMuF,EAASrD,SAASC,eAAe,UACvC,IAAIqD,GAA0B,EAC1BC,EAAiC,KAErC,SAASC,EAAkB7H,EAA2B8H,GAClD,MAAMC,EAAc/H,EAAOgI,wBAC3B,MAAO,CAACF,EAAYG,QAAUF,EAAYG,KAAMJ,EAAYK,QAAUJ,EAAYK,IACtF,CAEA,GAAGV,EAAQ,CACP,MAAMW,EAAMX,EAAOY,WAAW,MAG9B,IAAIC,EAAuBrJ,YAAYC,MAGvC,MAAMqJ,EAAOvO,KAAKuG,MAAsB,WAAhBvG,KAAKwO,UAE7BhF,QAAQC,IAAI,YAAc8E,GAC1BtQ,EAAYsQ,GACZ/E,QAAQC,IAAI,wBAAyBxE,YAAYC,MAAQoJ,GAAgB,IAAQ,WAGjF,IAAIG,EAAUrE,SAASC,eAAe,WACnCoE,IACCA,EAAQC,QAAS,GAIrB,IAAIC,EAAmCtQ,IAInCuQ,EAAe,IAAIxH,EAAMgH,EAAKX,EAAOzH,MAAOyH,EAAOvH,OAAQyI,GAE/DlB,EAAOoB,iBAAiB,aAAa,SAASC,GAE1CpB,GAAiB,EAEjB,MAAMxM,EAAI0M,EAAkBH,EAH5BE,EAAcmB,GAIdF,EAAM9E,eAAe5I,EAAE,GAAIA,EAAE,IAAI,EACrC,IAEAuM,EAAOoB,iBAAiB,WAAW,SAASC,GACxCpB,GAAiB,EACjBkB,EAAM/E,aACV,IAEAO,SAAS2E,YAAc,SAASD,GAC5BnB,EAAcmB,CAClB,EAGA1E,SAAS4E,UAAY,SAASF,GAC1B,MAAMjE,EAAMiE,EAAMjE,IACR,KAAPA,EACC1M,IAEAyQ,EAAMhE,UAAUC,EAExB,EAKA,SAASQ,IAEL,GAAGqC,GAAkBC,GAAeF,EAAQ,CACxC,MAAMvM,EAAI0M,EAAkBH,EAAQE,GACpCiB,EAAM9E,eAAe5I,EAAE,GAAIA,EAAE,GACjC,CAEA,MAAM+N,EAAOhK,YAAYC,MACnBgK,GAAcD,EAAOX,GAAgB,IAC3CA,EAAeW,EACf1Q,EAAY2Q,GAGZ,IAAI5D,EAAa9M,IAGjBoQ,EAAMvD,OAAOC,EAAY4D,GAEzBC,OAAOC,sBAAsB/D,EACjC,CArBAA,EAsBJ","sources":["wasm/build/game_api.js","wasm/assembly/game/data_constants.ts","src/constants.ts","src/transform.ts","src/visual_styles.ts","src/drawable_items.ts","src/scene.ts","src/index.ts"],"sourcesContent":["async function instantiate(module, imports = {}) {\n  const adaptedImports = {\n    env: Object.assign(Object.create(globalThis), imports.env || {}, {\n      abort(message, fileName, lineNumber, columnNumber) {\n        // ~lib/builtins/abort(~lib/string/String | null?, ~lib/string/String | null?, u32?, u32?) => void\n        message = __liftString(message >>> 0);\n        fileName = __liftString(fileName >>> 0);\n        lineNumber = lineNumber >>> 0;\n        columnNumber = columnNumber >>> 0;\n        (() => {\n          // @external.js\n          throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);\n        })();\n      },\n    }),\n  };\n  const { exports } = await WebAssembly.instantiate(module, adaptedImports);\n  const memory = exports.memory || imports.env.memory;\n  const adaptedExports = Object.setPrototypeOf({\n    define_player_target_position(in_x, in_y) {\n      // assembly/game_api/define_player_target_position(f32, f32) => bool\n      return exports.define_player_target_position(in_x, in_y) != 0;\n    },\n    get_game_settings() {\n      // assembly/game_api/get_game_settings() => ~lib/staticarray/StaticArray<f32>\n      return __liftStaticArray(__getF32, 2, exports.get_game_settings() >>> 0);\n    },\n    get_game_data() {\n      // assembly/game_api/get_game_data() => ~lib/staticarray/StaticArray<f32>\n      return __liftStaticArray(__getF32, 2, exports.get_game_data() >>> 0);\n    },\n  }, exports);\n  function __liftString(pointer) {\n    if (!pointer) return null;\n    const\n      end = pointer + new Uint32Array(memory.buffer)[pointer - 4 >>> 2] >>> 1,\n      memoryU16 = new Uint16Array(memory.buffer);\n    let\n      start = pointer >>> 1,\n      string = \"\";\n    while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));\n    return string + String.fromCharCode(...memoryU16.subarray(start, end));\n  }\n  function __liftStaticArray(liftElement, align, pointer) {\n    if (!pointer) return null;\n    const\n      length = __getU32(pointer - 4) >>> align,\n      values = new Array(length);\n    for (let i = 0; i < length; ++i) values[i] = liftElement(pointer + (i << align >>> 0));\n    return values;\n  }\n  let __dataview = new DataView(memory.buffer);\n  function __getU32(pointer) {\n    try {\n      return __dataview.getUint32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getUint32(pointer, true);\n    }\n  }\n  function __getF32(pointer) {\n    try {\n      return __dataview.getFloat32(pointer, true);\n    } catch {\n      __dataview = new DataView(memory.buffer);\n      return __dataview.getFloat32(pointer, true);\n    }\n  }\n  return adaptedExports;\n}\nexport const {\n  memory,\n  create_game,\n  add_monster,\n  define_player_target_position,\n  get_game_settings,\n  game_update,\n  get_game_data\n} = await (async url => instantiate(\n  await (async () => {\n    return await globalThis.WebAssembly.compileStreaming(globalThis.fetch(url));\n  })(), {\n  }\n))(new URL(\"game_api.wasm\", import.meta.url));\n","export const enum DATA {\r\n    LEVEL_WIDHT,\r\n    LEVEL_HEIGHT,\r\n    TILE_SIZE,\r\n    NAVMESH_VERTICES,\r\n    NAVMESH_POLYGONS,\r\n    NAVMESH_SIZES,\r\n    PLAYER_POSITION,\r\n    PLAYER_RADIUS,\r\n    PLAYER_MOVE,\r\n    PLAYER_ANGLE,\r\n    MONSTERS_COUNT,\r\n    MONSTER_POSITION,\r\n    MONSTER_RADIUS,\r\n    MONSTER_MOVE,\r\n    MONSTER_ANGLE,\r\n    MONSTERS_TO_DELETE,\r\n    TILES_TO_DELETE,\r\n    TILES_TO_CREATE,\r\n    LEVEL_TOTAL_TILES\r\n}","export const TILE_PIXELS_SIZE: number = 50; // the number of pixels for one tile of the level\r\nexport const CLICK_CURSOR_TIME: number = 400; // in milliseconds\r\nexport const CLICK_CURSOR_RADIUS: number = 0.5; // in world units\r\nexport const MAP_TILE_PIXELS_SIZES: number[] = [3, 5, 8, 12, 15, 20, 30, 40, 50];  // arrays of different sizes for map\r\nexport const CAMERA_LERP_COEFFICIENT: number = 1.0;  // for smooth camera\r\n\r\n// delay between mouse clicks, when the button is hold\r\nexport const FIRST_MOUSE_CLICK_DELTA: number = 500;  // in miliseconds\r\nexport const OTHER_MOUSE_CLICK_DELTA: number = 30;  // in miliseconds","export class Transform {\r\n    m_matrix = new Float32Array(9);\r\n\r\n    // store separate values for angle and scale\r\n    m_angle: number = 0.0;\r\n    m_scale_x: number = 1.0;\r\n    m_scale_y: number = 1.0;\r\n\r\n    constructor() {\r\n        this.m_matrix[0] = 1.0; this.m_matrix[1] = 0.0; this.m_matrix[2] = 0.0;\r\n        this.m_matrix[3] = 0.0; this.m_matrix[4] = 1.0; this.m_matrix[5] = 0.0;\r\n        this.m_matrix[6] = 0.0; this.m_matrix[7] = 0.0; this.m_matrix[8] = 1.0;  // this row always shouldbe (0.0, 0.0, 1.0)\r\n    }\r\n\r\n    matrix_array(): Float32Array {\r\n        return this.m_matrix;\r\n    }\r\n\r\n    // this method does not properly define local rotation and scale values\r\n    // it should be used only for create temp matrix, apply transform and does not use it anymore\r\n    set_matrix_array(in_array: number[]) {\r\n        for(let i = 0; i < 9; i++) {\r\n            this.m_matrix[i] = in_array[i];\r\n        }\r\n    }\r\n\r\n    set_translation(in_x: number, in_y: number) {\r\n        this.m_matrix[2] = in_x;\r\n        this.m_matrix[5] = in_y;\r\n    }\r\n\r\n    translation(): number[] {\r\n        return [this.m_matrix[2], this.m_matrix[5]];\r\n    }\r\n\r\n    private _update_rotation() {\r\n        this.m_matrix[0] = Math.cos(this.m_angle) * this.m_scale_x;\r\n        this.m_matrix[3] = Math.sin(this.m_angle) * this.m_scale_x;\r\n        this.m_matrix[1] = -Math.sin(this.m_angle) * this.m_scale_y;\r\n        this.m_matrix[4] = Math.cos(this.m_angle) * this.m_scale_y;\r\n    }\r\n\r\n    set_rotation(in_value: number) {  // in_value - in radians from OX in conter clock wise direction\r\n        this.m_angle = in_value;\r\n        this._update_rotation();\r\n    }\r\n\r\n    rotation(): number {\r\n        return this.m_angle;\r\n    }\r\n\r\n    set_scale(in_x: number, in_y: number) {\r\n        this.m_scale_x = in_x;\r\n        this.m_scale_y = in_y;\r\n\r\n        this._update_rotation();\r\n    }\r\n\r\n    set_uniform_scale(in_value: number) {\r\n        this.m_scale_x = in_value;\r\n        this.m_scale_y = in_value;\r\n\r\n        this._update_rotation();\r\n    }\r\n\r\n    multiply(in_x: number, in_y: number): number[] {\r\n        return [this.m_matrix[0] * in_x + this.m_matrix[1] * in_y + this.m_matrix[2],\r\n                this.m_matrix[3] * in_x + this.m_matrix[4] * in_y + this.m_matrix[5]];\r\n    }\r\n\r\n    apply_scale(in_value: number): number {\r\n        // get length of the first vector\r\n        const l1 = Math.sqrt(this.m_matrix[0] * this.m_matrix[0] + this.m_matrix[3] * this.m_matrix[3]);\r\n        // and length of the second vector\r\n        const l2 = Math.sqrt(this.m_matrix[1] * this.m_matrix[1] + this.m_matrix[4] * this.m_matrix[4]);\r\n\r\n        // return the average of these length\r\n        return in_value * (l1 + l2) / 2;\r\n    }\r\n\r\n    // compose current tfm A with other tfm B and return A * B\r\n    compose_tfms(other: Transform): Transform {\r\n        let to_return = new Transform();\r\n\r\n        const a = this.matrix_array();\r\n        const b = other.matrix_array();\r\n\r\n        // multiply these two matrices\r\n        let result = [a[0]*b[0]+a[1]*b[3]+a[2]*b[6], a[0]*b[1]+a[1]*b[4]+a[2]*b[7], a[0]*b[2]+a[1]*b[5]+a[2]*b[8],\r\n                      a[3]*b[0]+a[4]*b[3]+a[5]*b[6], a[3]*b[1]+a[4]*b[4]+a[5]*b[7], a[3]*b[2]+a[4]*b[5]+a[5]*b[8],\r\n                      a[6]*b[0]+a[7]*b[3]+a[8]*b[6], a[6]*b[1]+a[7]*b[4]+a[8]*b[7], a[6]*b[2]+a[7]*b[5]+a[8]*b[8]];\r\n        to_return.set_matrix_array(result);\r\n\r\n        return to_return;\r\n    }\r\n\r\n    private _det2(a: number, b: number, c: number, d: number): number {\r\n        return a*d - b*c;\r\n    }\r\n\r\n    // return inverse transform\r\n    // we setup only matrix, without local scale and rotation\r\n    inverse(): Transform {\r\n        // calculate determinant\r\n        const d = this.m_matrix[0] * this.m_matrix[4] * this.m_matrix[8] +\r\n        this.m_matrix[2] * this.m_matrix[3] * this.m_matrix[7] +\r\n        this.m_matrix[1] * this.m_matrix[5] * this.m_matrix[6] -\r\n        this.m_matrix[2] * this.m_matrix[4] * this.m_matrix[6] -\r\n        this.m_matrix[0] * this.m_matrix[5] * this.m_matrix[7] -\r\n        this.m_matrix[1] * this.m_matrix[3] * this.m_matrix[8];\r\n\r\n        const m = [this._det2(this.m_matrix[4], this.m_matrix[5], this.m_matrix[7], this.m_matrix[8]) / d, -1 * this._det2(this.m_matrix[1], this.m_matrix[2], this.m_matrix[7], this.m_matrix[8]) / d, this._det2(this.m_matrix[1], this.m_matrix[2], this.m_matrix[4], this.m_matrix[5]) / d,\r\n        -1 * this._det2(this.m_matrix[3], this.m_matrix[5], this.m_matrix[6], this.m_matrix[8]) / d, this._det2(this.m_matrix[0], this.m_matrix[2], this.m_matrix[6], this.m_matrix[8]) / d, -1 * this._det2(this.m_matrix[0], this.m_matrix[2], this.m_matrix[3], this.m_matrix[5]) / d,\r\n        this._det2(this.m_matrix[3], this.m_matrix[4], this.m_matrix[6], this.m_matrix[7]) / d, -1 * this._det2(this.m_matrix[0], this.m_matrix[1], this.m_matrix[6], this.m_matrix[7]) / d, this._det2(this.m_matrix[0], this.m_matrix[1], this.m_matrix[3], this.m_matrix[4]) / d];\r\n\r\n        let to_return = new Transform();\r\n        to_return.set_matrix_array(m);\r\n\r\n        return to_return;\r\n    }\r\n\r\n    toString(): string {\r\n        let to_return = \"\";\r\n        to_return += this.m_matrix[0] + \", \" + this.m_matrix[1] + \", \" + this.m_matrix[2] + \"\\n\";\r\n        to_return += this.m_matrix[3] + \", \" + this.m_matrix[4] + \", \" + this.m_matrix[5] + \"\\n\";\r\n        to_return += this.m_matrix[6] + \", \" + this.m_matrix[7] + \", \" + this.m_matrix[8];\r\n        return to_return;\r\n    }\r\n}","export const PLAYER_IS_STROKE = false;\r\nexport const PLAYER_STROKE_WIDTH = 1.0;\r\nexport const PLAYER_STROKE_COLOR = \"rgb(74, 193, 33)\";\r\nexport const PLAYER_IDLE_COLOR = \"rgba(91, 128, 78, 0.75)\";\r\nexport const PLAYER_MOVE_COLOR = \"rgba(91, 128, 78, 0.5)\";\r\n\r\nexport const MONSTER_IS_STROKE = false;\r\nexport const MONSTER_STROKE_WIDTH = 1.0;\r\nexport const MONSTER_STROKE_COLOR = \"rgb(226, 55, 27)\";\r\nexport const MONSTER_IDLE_COLOR = \"rgba(196, 94, 45, 0.75)\";\r\nexport const MONSTER_MOVE_COLOR = \"rgba(196, 94, 45, 0.5)\";\r\n\r\nexport const TILE_IS_STROKE = true;\r\nexport const TILE_STROKE_WIDTH = 0.2;\r\nexport const TILE_STROKE_COLOR = \"rgb(152, 152, 152)\";\r\nexport const TILE_WALKABLE_COLOR = \"rgb(192, 192, 192)\";\r\nexport const TILE_NONWALKABLE_COLOR = \"rgb(64, 64, 64)\";\r\n\r\nexport const CLICK_CURSOR_COLOR = \"rgba(232, 128, 51, 0.25)\";\r\nexport const CLICK_CURSOR_STROKE_COLOR = \"rgba(234, 112, 23, 0.5)\";\r\nexport const CLICK_CURSOR_STROKE_WIDTH = 1.0;\r\nexport const CLICK_CURSOR_CENTER_SIZE = 2.0;\r\n\r\nexport const MAP_COLOR = \"rgba(48, 148, 233, 0.5)\";\r\nexport const MAP_PLAYER_SIZE = 2; // in pixels","import { CLICK_CURSOR_RADIUS, CLICK_CURSOR_TIME, MAP_TILE_PIXELS_SIZES } from \"./constants\";\r\nimport { Transform } from \"./transform\";\r\nimport { CLICK_CURSOR_CENTER_SIZE, CLICK_CURSOR_COLOR, CLICK_CURSOR_STROKE_COLOR, CLICK_CURSOR_STROKE_WIDTH, MAP_PLAYER_SIZE, PLAYER_IDLE_COLOR, PLAYER_MOVE_COLOR, PLAYER_IS_STROKE, PLAYER_STROKE_COLOR, PLAYER_STROKE_WIDTH, TILE_IS_STROKE, TILE_STROKE_COLOR, TILE_STROKE_WIDTH, TILE_WALKABLE_COLOR, MONSTER_STROKE_WIDTH, MONSTER_MOVE_COLOR, MONSTER_IDLE_COLOR, MONSTER_STROKE_COLOR, MONSTER_IS_STROKE, MAP_COLOR } from \"./visual_styles\";\r\n\r\nabstract class Drawable {\r\n    m_wtc_tfm: Transform;  // wtc - world to canvas\r\n    m_context: CanvasRenderingContext2D;\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, in_wtc_tfm: Transform) {\r\n        this.m_wtc_tfm = in_wtc_tfm;\r\n        this.m_context = in_ctxt;\r\n    }\r\n\r\n    abstract draw(): void;\r\n}\r\n\r\nexport class DrawTile extends Drawable {\r\n    m_posx_x: number = 0.0;\r\n    m_posx_y: number = 0.0;\r\n\r\n    m_size: number = 0.0;\r\n    m_type: number = 1;  // 1 - non-walkable tile\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, \r\n                in_wtc_tfm: Transform, \r\n                in_x: number, // these are a world position of the start tile corner (not integer coordinates)\r\n                in_y: number, \r\n                in_size: number,\r\n                in_type: number) {\r\n        super(in_ctxt, in_wtc_tfm);\r\n\r\n        this.m_posx_x = in_x;\r\n        this.m_posx_y = in_y;\r\n        this.m_size = in_size;\r\n        this.m_type = in_type;\r\n    }\r\n\r\n    draw(): void {\r\n        const c_corner = this.m_wtc_tfm.multiply(this.m_posx_x, this.m_posx_y);\r\n        const c_size = this.m_wtc_tfm.apply_scale(this.m_size);\r\n        this.m_context.save();\r\n        this.m_context.lineWidth = TILE_STROKE_WIDTH;\r\n        this.m_context.fillStyle = TILE_WALKABLE_COLOR;\r\n        this.m_context.strokeStyle = TILE_STROKE_COLOR;\r\n\r\n        this.m_context.beginPath();\r\n\r\n        if(this.m_type == 0) {\r\n            // walkable\r\n            this.m_context.rect(c_corner[0], c_corner[1], c_size, c_size);            \r\n        } else if(this.m_type == 2) {\r\n            this.m_context.rect(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2, c_size / 2, c_size / 2);\r\n        } else if(this.m_type == 3) {\r\n            this.m_context.rect(c_corner[0], c_corner[1] + c_size / 2, c_size / 2, c_size / 2);\r\n        } else if(this.m_type == 4) {\r\n            this.m_context.rect(c_corner[0] + c_size / 2, c_corner[1], c_size / 2, c_size / 2);\r\n        } else if(this.m_type == 5) {\r\n            this.m_context.rect(c_corner[0], c_corner[1], c_size / 2, c_size / 2);\r\n        } else if(this.m_type == 6) {\r\n            this.m_context.rect(c_corner[0], c_corner[1] + c_size / 2, c_size, c_size / 2);\r\n        } else if(this.m_type == 7) {\r\n            this.m_context.rect(c_corner[0], c_corner[1], c_size / 2, c_size);\r\n        } else if(this.m_type == 8) {\r\n            this.m_context.rect(c_corner[0], c_corner[1], c_size, c_size / 2);\r\n        } else if(this.m_type == 9) {\r\n            this.m_context.rect(c_corner[0] + c_size / 2, c_corner[1], c_size / 2, c_size);\r\n        } else if(this.m_type == 10) {\r\n            this.m_context.moveTo(c_corner[0], c_corner[1]);\r\n            this.m_context.lineTo(c_corner[0], c_corner[1] + c_size);\r\n            this.m_context.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size);\r\n            this.m_context.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n            this.m_context.lineTo(c_corner[0] + c_size, c_corner[1] + c_size / 2);\r\n            this.m_context.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n        } else if(this.m_type == 11) {\r\n            this.m_context.moveTo(c_corner[0], c_corner[1]);\r\n            this.m_context.lineTo(c_corner[0], c_corner[1] + c_size / 2);\r\n            this.m_context.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n            this.m_context.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size);\r\n            this.m_context.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n            this.m_context.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n        } else if(this.m_type == 12) {\r\n            this.m_context.moveTo(c_corner[0], c_corner[1]);\r\n            this.m_context.lineTo(c_corner[0], c_corner[1] + c_size);\r\n            this.m_context.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n            this.m_context.lineTo(c_corner[0] + c_size, c_corner[1] + c_size / 2);\r\n            this.m_context.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n            this.m_context.lineTo(c_corner[0] + c_size / 2, c_corner[1]);\r\n        } else if(this.m_type == 13) {\r\n            this.m_context.moveTo(c_corner[0], c_corner[1] + c_size / 2);\r\n            this.m_context.lineTo(c_corner[0], c_corner[1] + c_size);\r\n            this.m_context.lineTo(c_corner[0] + c_size, c_corner[1] + c_size);\r\n            this.m_context.lineTo(c_corner[0] + c_size, c_corner[1]);\r\n            this.m_context.lineTo(c_corner[0] + c_size / 2, c_corner[1]);\r\n            this.m_context.lineTo(c_corner[0] + c_size / 2, c_corner[1] + c_size / 2);\r\n        }\r\n\r\n        this.m_context.fill();\r\n        if(TILE_IS_STROKE) {\r\n            this.m_context.stroke();\r\n        }\r\n        this.m_context.restore();\r\n    }    \r\n}\r\n\r\nclass DrawPerson extends Drawable {\r\n    m_radius: number = 0.0;\r\n    m_is_move: boolean = false;\r\n\r\n    m_tfm: Transform = new Transform();  // player in-scene transform (store position, rotation and scale)\r\n\r\n    // visual constants\r\n    m_stroke_width: number = 0.0;\r\n    m_move_color: string = \"\";\r\n    m_iddle_color: string = \"\";\r\n    m_stroke_clor: string = \"\";\r\n    m_is_stroke: boolean = false;\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, \r\n                in_wtc_tfm: Transform) {\r\n        super(in_ctxt, in_wtc_tfm);\r\n    }\r\n\r\n    set_move(in_value: boolean) {\r\n        this.m_is_move = in_value;\r\n    }\r\n\r\n    set_position(in_x: number, in_y: number) {\r\n        this.m_tfm.set_translation(in_x, in_y);\r\n    }\r\n\r\n    set_rotation(in_value: number) {\r\n        this.m_tfm.set_rotation(in_value);\r\n    }\r\n\r\n    set_radius(in_r: number) {\r\n        this.m_radius = in_r;\r\n    }\r\n\r\n    draw(): void {\r\n        this.m_context.save();\r\n        this.m_context.lineWidth = this.m_stroke_width;\r\n        this.m_context.fillStyle = this.m_is_move ? this.m_move_color : this.m_iddle_color;\r\n        this.m_context.strokeStyle = this.m_stroke_clor;\r\n        this.m_context.beginPath();\r\n        // constuct transform from local to canvas\r\n        const tfm = this.m_wtc_tfm.compose_tfms(this.m_tfm);\r\n        // calculate center on canvas\r\n        const c_center = tfm.multiply(0.0, 0.0);\r\n        // calculate radius on canvas\r\n        const c_radius = tfm.apply_scale(this.m_radius);\r\n        const p2 = tfm.multiply(this.m_radius * Math.SQRT2, 0.0);\r\n        const a = this.m_tfm.rotation();\r\n        this.m_context.arc(c_center[0], c_center[1], c_radius, a + Math.PI / 4, 2 * Math.PI + a - Math.PI / 4);\r\n        this.m_context.lineTo(p2[0], p2[1]);\r\n        this.m_context.fill();\r\n        \r\n        if(this.m_is_stroke) {\r\n            this.m_context.stroke();\r\n        }\r\n        this.m_context.restore();\r\n    }    \r\n}\r\n\r\nexport class DrawPlayer extends DrawPerson {\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, \r\n                in_wtc_tfm: Transform) {\r\n        super(in_ctxt, in_wtc_tfm);\r\n\r\n        this.m_stroke_width = PLAYER_STROKE_WIDTH;\r\n        this.m_move_color = PLAYER_MOVE_COLOR;\r\n        this.m_iddle_color = PLAYER_IDLE_COLOR;\r\n        this.m_stroke_clor = PLAYER_STROKE_COLOR;\r\n        this.m_is_stroke = PLAYER_IS_STROKE;\r\n    }\r\n}\r\n\r\nexport class DrawMonster extends DrawPerson {\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, \r\n                in_wtc_tfm: Transform) {\r\n        super(in_ctxt, in_wtc_tfm);\r\n\r\n        this.m_stroke_width = MONSTER_STROKE_WIDTH;\r\n        this.m_move_color = MONSTER_MOVE_COLOR;\r\n        this.m_iddle_color = MONSTER_IDLE_COLOR;\r\n        this.m_stroke_clor = MONSTER_STROKE_COLOR;\r\n        this.m_is_stroke = MONSTER_IS_STROKE;\r\n    }\r\n}\r\n\r\nexport class DrawClickCursor extends Drawable {\r\n    m_active: boolean = false;\r\n\r\n    m_pos_x: number = 0.0;  // positions in world coordinates\r\n    m_pos_y: number = 0.0;\r\n\r\n    m_start_time: number = 0;\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, \r\n                in_wtc_tfm: Transform) {\r\n        super(in_ctxt, in_wtc_tfm);\r\n\r\n    }\r\n\r\n    activate(in_x: number, in_y: number) {\r\n        this.m_pos_x = in_x;\r\n        this.m_pos_y = in_y;\r\n\r\n        this.m_start_time = performance.now();\r\n\r\n        this.m_active = true;\r\n    }\r\n\r\n    draw(): void {\r\n        if(this.m_active) {\r\n            const current_time = performance.now();\r\n            const time_delta = current_time - this.m_start_time;\r\n\r\n            const prop: number = Math.pow(Math.min(time_delta / CLICK_CURSOR_TIME, 1.0), 0.15);\r\n\r\n            // actual draw\r\n            this.m_context.save();\r\n            this.m_context.lineWidth = CLICK_CURSOR_STROKE_WIDTH;\r\n            this.m_context.fillStyle = CLICK_CURSOR_COLOR;\r\n            this.m_context.strokeStyle = CLICK_CURSOR_STROKE_COLOR;\r\n            this.m_context.beginPath();\r\n            const c_center = this.m_wtc_tfm.multiply(this.m_pos_x, this.m_pos_y);\r\n            const c_radius = this.m_wtc_tfm.apply_scale(CLICK_CURSOR_RADIUS) * prop;\r\n            this.m_context.arc(c_center[0], c_center[1], c_radius, 0, 2 * Math.PI);\r\n            this.m_context.fill();\r\n            this.m_context.stroke();\r\n\r\n            // draw center dot\r\n            this.m_context.beginPath();\r\n            this.m_context.fillStyle = CLICK_CURSOR_STROKE_COLOR;\r\n            this.m_context.arc(c_center[0], c_center[1], CLICK_CURSOR_CENTER_SIZE, 0, 2 * Math.PI);\r\n            this.m_context.fill();\r\n            this.m_context.restore();\r\n\r\n            if(time_delta > CLICK_CURSOR_TIME) {\r\n                this.m_active = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class DrawMap extends Drawable {\r\n    m_vertices: Float32Array;\r\n    m_polygons: Int32Array;\r\n    m_sizes: Int32Array;\r\n\r\n    m_canvas_width: number;\r\n    m_canvas_height: number;\r\n    m_tile_size: number;\r\n\r\n    m_active: boolean = false;\r\n    m_tfm: Transform = new Transform();\r\n    m_scale: number = 0.0;\r\n    m_scale_index: number = 0;\r\n\r\n    constructor(in_ctxt: CanvasRenderingContext2D, in_wtc_tfm: Transform,\r\n        in_tile_size: number,\r\n        in_vertices: Float32Array, in_polygons: Int32Array, in_sizes: Int32Array) {\r\n        super(in_ctxt, in_wtc_tfm);\r\n\r\n        this.m_canvas_width = in_ctxt.canvas.width;\r\n        this.m_canvas_height = in_ctxt.canvas.height;\r\n\r\n        this.m_tile_size = in_tile_size;\r\n\r\n        this.m_vertices = in_vertices;\r\n        this.m_polygons = in_polygons;\r\n        this.m_sizes = in_sizes;\r\n\r\n        this.m_scale_index = Math.floor(MAP_TILE_PIXELS_SIZES.length / 2);\r\n        this._update_scale();\r\n    }\r\n\r\n    private _update_scale() {\r\n        this.m_scale = MAP_TILE_PIXELS_SIZES[this.m_scale_index] / this.m_tile_size;\r\n    }\r\n\r\n    toggle_active() {\r\n        this.m_active = !this.m_active;\r\n    }\r\n\r\n    scale_up() {\r\n        if(this.m_active) {\r\n            this.m_scale_index++;\r\n            if(this.m_scale_index == MAP_TILE_PIXELS_SIZES.length) {\r\n                this.m_scale_index--;\r\n            }\r\n            this._update_scale();\r\n        }\r\n    }\r\n\r\n    scale_down() {\r\n        if(this.m_active) {\r\n            this.m_scale_index--;\r\n            if(this.m_scale_index == -1) {\r\n                this.m_scale_index++;\r\n            }\r\n            this._update_scale();\r\n        }\r\n    }\r\n\r\n    draw(): void {\r\n        if(this.m_active) {\r\n            // get player world position from world-to-canvas transform\r\n            const ctw_tfm = this.m_wtc_tfm.inverse();\r\n            const pos = ctw_tfm.multiply(this.m_canvas_width / 2, this.m_canvas_height / 2);\r\n\r\n            this.m_tfm.set_uniform_scale(this.m_scale);\r\n            this.m_tfm.set_translation(this.m_canvas_width / 2 - pos[0] * this.m_scale, this.m_canvas_height / 2 - pos[1] * this.m_scale);\r\n\r\n            this.m_context.save();\r\n            this.m_context.fillStyle = MAP_COLOR;\r\n            this.m_context.strokeStyle = MAP_COLOR;\r\n            this.m_context.lineWidth = 0.125;\r\n            let shift = 0;\r\n            for(let i = 0; i < this.m_sizes.length; i++) {\r\n                // i - polygon index\r\n                const s = this.m_sizes[i];  // polygon size\r\n                \r\n                // start new poligon\r\n                this.m_context.beginPath();\r\n                // get polygon corners\r\n                for(let j = 0; j < s; j++) {\r\n                    const v = this.m_polygons[shift + j];  // v - vertex index\r\n                    const x = this.m_vertices[3*v];\r\n                    const y = this.m_vertices[3*v + 2];  // skip second coordinate, it always equal to 0\r\n\r\n                    const c_position = this.m_tfm.multiply(x, y);\r\n                    if(j == 0) {  // start polygon\r\n                        this.m_context.moveTo(c_position[0], c_position[1]);\r\n                    } else {  // continue polygon\r\n                        this.m_context.lineTo(c_position[0], c_position[1]);\r\n                    }\r\n                }\r\n                // finish the polygon\r\n                this.m_context.fill();\r\n                this.m_context.stroke();\r\n\r\n                shift += s;\r\n            }\r\n\r\n            // next draw the player at the map\r\n            this.m_context.beginPath();\r\n            this.m_context.fillStyle = PLAYER_IDLE_COLOR;\r\n            const c_center = this.m_tfm.multiply(pos[0], pos[1]);\r\n\r\n            this.m_context.arc(c_center[0], c_center[1], MAP_PLAYER_SIZE, 0, 2 * Math.PI);\r\n            this.m_context.fill();\r\n            this.m_context.restore();\r\n        }\r\n    }\r\n}","import { DATA } from \"../wasm/assembly/game/data_constants\";  // use the same data keys as in wasm\r\nimport { define_player_target_position } from \"../wasm/build/game_api\";\r\nimport { DrawClickCursor, DrawMap, DrawMonster, DrawPlayer, DrawTile } from \"./drawable_items\";\r\nimport { Transform } from \"./transform\";\r\nimport { TILE_NONWALKABLE_COLOR } from \"./visual_styles\";\r\nimport { CAMERA_LERP_COEFFICIENT, FIRST_MOUSE_CLICK_DELTA, OTHER_MOUSE_CLICK_DELTA, TILE_PIXELS_SIZE } from \"./constants\";\r\n\r\nexport class Scene {\r\n    m_context: CanvasRenderingContext2D;\r\n    m_canvas_width: number;\r\n    m_canvas_height: number;\r\n\r\n    m_level_width: number = 0;\r\n    m_level_height: number = 0;\r\n    m_level_tile_size: number = 0.0;\r\n\r\n    m_last_click_time: number = 0;\r\n    m_click_number: number = 0;\r\n\r\n    m_level_tiles: Map<number, DrawTile> = new Map<number, DrawTile>();\r\n\r\n    m_wtc_scale: number = 0.0;\r\n    m_wtc_tfm = new Transform();  // use one transform object for convert world coordinates to canvas coordinates\r\n\r\n    m_player: DrawPlayer;\r\n    m_click_cursor: DrawClickCursor;\r\n    m_map: DrawMap;\r\n\r\n    m_monsters: Map<number, DrawMonster> = new Map<number, DrawMonster>();\r\n    m_monstars_total: number = 0;\r\n\r\n    m_camera_pos_x: number = 0.0;\r\n    m_camera_pos_y: number = 0.0;\r\n\r\n    m_fps_accumulator: number = 0.0;\r\n    m_fps_ticks: number = 0;\r\n    m_fps_value: number = 0.0;\r\n\r\n    constructor(in_ctx: CanvasRenderingContext2D, canvas_width: number, canvas_height: number, game_settings: ArrayLike<number>) {\r\n        this.m_context = in_ctx;\r\n        this.m_canvas_width = canvas_width;\r\n        this.m_canvas_height = canvas_height;\r\n\r\n        let in_navmesh_vertices: Float32Array = new Float32Array();\r\n        let in_navmesh_polygons: Int32Array = new Int32Array();\r\n        let in_navmesh_sizes: Int32Array = new Int32Array();\r\n\r\n        // we should parse input game settings\r\n        var is_finish: boolean = false;\r\n        var v_index = 0;\r\n        const array_length = game_settings.length;\r\n        while(!is_finish) {\r\n            const data_type: number = game_settings[v_index];\r\n            const data_length = game_settings[v_index + 1];\r\n\r\n            v_index += 2;  // point to the first value in the data container\r\n            if(data_length > 0) {\r\n                // parse data type\r\n                if(data_type == DATA.LEVEL_WIDHT) {\r\n                    this.m_level_width = game_settings[v_index];\r\n                } else if(data_type == DATA.LEVEL_HEIGHT) {\r\n                    this.m_level_height = game_settings[v_index];\r\n                } else if(data_type == DATA.TILE_SIZE) {\r\n                    this.m_level_tile_size = game_settings[v_index];\r\n                } else if(data_type == DATA.NAVMESH_VERTICES) {\r\n                    in_navmesh_vertices = new Float32Array(data_length);\r\n                    for(let i = 0; i < data_length; i++) {\r\n                        in_navmesh_vertices[i] = game_settings[v_index + i];\r\n                    }\r\n                } else if(data_type == DATA.NAVMESH_POLYGONS) {\r\n                    in_navmesh_polygons = new Int32Array(data_length);\r\n                    for(let i = 0; i < data_length; i++) {\r\n                        in_navmesh_polygons[i] = game_settings[v_index + i];\r\n                    }\r\n                } else if(data_type == DATA.NAVMESH_SIZES) {\r\n                    in_navmesh_sizes = new Int32Array(data_length);\r\n                    for(let i = 0; i < data_length; i++) {\r\n                        in_navmesh_sizes[i] = game_settings[v_index + i];\r\n                    }\r\n                } else if(data_type == DATA.LEVEL_TOTAL_TILES) {\r\n                    console.log(\"Level tiles:\", game_settings[v_index]);\r\n                }\r\n            }\r\n            \r\n            v_index += data_length;\r\n            if(v_index >= array_length) {\r\n                is_finish = true;\r\n            }\r\n        }\r\n\r\n        // now we are ready to setup world-to-canvas transform\r\n        // by default it is identity\r\n        // we should setup scale and translation\r\n        // now translation is zero, because it depends on camera position\r\n        this.m_wtc_tfm.set_translation(0.0, 0.0);\r\n        this.m_wtc_scale = TILE_PIXELS_SIZE / this.m_level_tile_size;\r\n        this.m_wtc_tfm.set_uniform_scale(this.m_wtc_scale);\r\n\r\n        // create player drawable item\r\n        this.m_player = new DrawPlayer(this.m_context, this.m_wtc_tfm);\r\n        this.m_click_cursor = new DrawClickCursor(this.m_context, this.m_wtc_tfm);\r\n\r\n        this.m_map = new DrawMap(this.m_context, this.m_wtc_tfm, this.m_level_tile_size, in_navmesh_vertices, in_navmesh_polygons, in_navmesh_sizes);\r\n    }\r\n\r\n    reset_click() {\r\n        this.m_click_number = 0;\r\n    }\r\n\r\n    // input are canvas coordinates of the mouse click\r\n    click_position(in_x: number, in_y: number, force: boolean = false) {\r\n        const current_time = performance.now();\r\n        if(force || current_time - this.m_last_click_time > (this.m_click_number == 1 ? FIRST_MOUSE_CLICK_DELTA : OTHER_MOUSE_CLICK_DELTA)) {\r\n            this.m_last_click_time = current_time;\r\n            this.m_click_number += 1;\r\n            if(this.m_click_number > 2) {\r\n                this.m_click_number = 2;\r\n            }\r\n\r\n            // convert click position to world position\r\n            // for this we should use inverse transform matrix\r\n            let ctw_tfm = this.m_wtc_tfm.inverse();\r\n            const pos = ctw_tfm.multiply(in_x, in_y);\r\n\r\n            // call to move the player\r\n            const is_define: boolean = define_player_target_position(pos[0], pos[1]);\r\n\r\n            if(force && is_define) {\r\n                this.m_click_cursor.activate(pos[0], pos[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    update_ui() {\r\n        let level_count = document.getElementById(\"level_count\");\r\n        if(level_count) {\r\n            level_count.innerText = this.m_monstars_total.toString();\r\n        }\r\n\r\n        let visible_count = document.getElementById(\"visible_count\");\r\n        if(visible_count) {\r\n            visible_count.innerText = this.m_monsters.size.toString();\r\n        }\r\n\r\n        let fps = document.getElementById(\"fps\");\r\n        if(fps) {\r\n            fps.innerText = (Math.round(this.m_fps_value * 100) / 100).toFixed(2).toString();\r\n        }\r\n    }\r\n\r\n    press_key(key: string) {\r\n        if(key == \"m\") {\r\n            this.m_map.toggle_active();\r\n        } else if(key == \"+\") {\r\n            this.m_map.scale_up();\r\n        } else if(key == \"-\") {\r\n            this.m_map.scale_down();\r\n        }\r\n    }\r\n\r\n    private draw_background() {\r\n        this.m_context.clearRect(0, 0, this.m_canvas_width, this.m_canvas_height);\r\n\r\n        this.m_context.save();\r\n        this.m_context.fillStyle = TILE_NONWALKABLE_COLOR;\r\n        this.m_context.fillRect(0, 0, this.m_canvas_width, this.m_canvas_height);\r\n        this.m_context.restore();\r\n    }\r\n\r\n    draw() {\r\n        this.draw_background();\r\n\r\n        // draw level tiles\r\n        for(let [tile_index, tile] of this.m_level_tiles) {\r\n            tile.draw();\r\n        }\r\n\r\n        // cursor\r\n        this.m_click_cursor.draw();\r\n\r\n        // draw player\r\n        this.m_player.draw();\r\n\r\n        // monsters\r\n        for(let [monster_entity, monster] of this.m_monsters) {\r\n            monster.draw();\r\n        }\r\n\r\n        // map\r\n        this.m_map.draw();\r\n    }\r\n\r\n    update(game_state: ArrayLike<number>, dt: number) {\r\n        // parse game state array\r\n        var is_finish = false;\r\n        var data_iterator = 0;\r\n        while(!is_finish) {\r\n            const data_type = game_state[data_iterator];\r\n            const data_count = game_state[data_iterator + 1];\r\n\r\n            data_iterator += 2;\r\n            if(data_count > 0) {\r\n                if(data_type == DATA.PLAYER_POSITION) {\r\n                    const pos_x = game_state[data_iterator];\r\n                    const pos_y = game_state[data_iterator + 1];\r\n                    this.m_player.set_position(pos_x, pos_y);\r\n\r\n                    // recalculate camera position\r\n                    this.m_camera_pos_x = CAMERA_LERP_COEFFICIENT * pos_x + (1 - CAMERA_LERP_COEFFICIENT) * this.m_camera_pos_x;\r\n                    this.m_camera_pos_y = CAMERA_LERP_COEFFICIENT * pos_y + (1 - CAMERA_LERP_COEFFICIENT) * this.m_camera_pos_y;\r\n\r\n                    // also define camera position\r\n                    this.m_wtc_tfm.set_translation(this.m_canvas_width / 2 - this.m_camera_pos_x * this.m_wtc_scale, this.m_canvas_height / 2 - this.m_camera_pos_y * this.m_wtc_scale);\r\n                } else if(data_type == DATA.PLAYER_RADIUS) {\r\n                    const r = game_state[data_iterator];\r\n                    this.m_player.set_radius(r);\r\n                } else if(data_type == DATA.PLAYER_ANGLE) {\r\n                    const a = game_state[data_iterator];\r\n                    this.m_player.set_rotation(a);\r\n                } else if(data_type == DATA.PLAYER_MOVE) {\r\n                    const m = game_state[data_iterator];\r\n                    this.m_player.set_move(m > 0.5);\r\n                } else if(data_type == DATA.TILES_TO_DELETE) {\r\n                    // for delete we send only indices\r\n                    for(let t = 0; t < data_count; t++) {\r\n                        const del_index = game_state[data_iterator + t];\r\n                        if(this.m_level_tiles.has(del_index)) {\r\n                            this.m_level_tiles.delete(del_index);\r\n                        }\r\n                    }\r\n                }\r\n                else if(data_type == DATA.TILES_TO_CREATE) {\r\n                    // get the number of new tiles\r\n                    const new_tiles_count = data_count / 4;  // because for each tile we send 4 values (x, y, i, type)\r\n                    for(let t = 0; t < new_tiles_count; t++) {\r\n                        const new_x = game_state[data_iterator + 4 * t];  // these values are tile indices (integers), not actual positions\r\n                        const new_y = game_state[data_iterator + 4 * t + 1];\r\n                        const new_index = game_state[data_iterator + 4 * t + 2];\r\n                        const new_type = game_state[data_iterator + 4 * t + 3];\r\n\r\n                        this.m_level_tiles.set(new_index, new DrawTile(this.m_context, this.m_wtc_tfm, new_x * this.m_level_tile_size, new_y * this.m_level_tile_size, this.m_level_tile_size, new_type));\r\n                    }\r\n                } else if(data_type == DATA.MONSTERS_COUNT) {\r\n                    this.m_monstars_total = game_state[data_iterator];\r\n                } else if(data_type == DATA.MONSTER_POSITION) {\r\n                    const m_id = game_state[data_iterator];\r\n                    const m_x = game_state[data_iterator + 1];\r\n                    const m_y = game_state[data_iterator + 2];\r\n\r\n                    if(this.m_monsters.has(m_id)) {\r\n                        const m = this.m_monsters.get(m_id);\r\n                        if(m) {\r\n                            m.set_position(m_x, m_y);\r\n                        }                        \r\n                    } else {\r\n                        let m = new DrawMonster(this.m_context, this.m_wtc_tfm);\r\n                        m.set_position(m_x, m_y);\r\n                        this.m_monsters.set(m_id, m);\r\n\r\n                    }\r\n                } else if(data_type == DATA.MONSTER_RADIUS) {\r\n                    const m_id = game_state[data_iterator];\r\n                    const m_radius = game_state[data_iterator + 1];\r\n                    if(this.m_monsters.has(m_id)) {\r\n                        const m = this.m_monsters.get(m_id);\r\n                        if(m) {\r\n                            m.set_radius(m_radius);\r\n                        }                        \r\n                    } else {\r\n                        this.m_monsters.set(m_id, new DrawMonster(this.m_context, this.m_wtc_tfm));\r\n                    }\r\n                } else if(data_type == DATA.MONSTER_ANGLE) {\r\n                    const m_id = game_state[data_iterator];\r\n                    const m_angle = game_state[data_iterator + 1];\r\n                    if(this.m_monsters.has(m_id)) {\r\n                        const m = this.m_monsters.get(m_id);\r\n                        if(m) {\r\n                            m.set_rotation(m_angle);\r\n                        }                        \r\n                    } else {\r\n                        this.m_monsters.set(m_id, new DrawMonster(this.m_context, this.m_wtc_tfm));\r\n                    }\r\n                } else if(data_type == DATA.MONSTER_MOVE) {\r\n                    const m_id = game_state[data_iterator];\r\n                    const m_move = game_state[data_iterator + 1] > 0.5;\r\n                    if(this.m_monsters.has(m_id)) {\r\n                        const m = this.m_monsters.get(m_id);\r\n                        if(m) {\r\n                            m.set_move(m_move);\r\n                        }                        \r\n                    } else {\r\n                        this.m_monsters.set(m_id, new DrawMonster(this.m_context, this.m_wtc_tfm));\r\n                    }\r\n                } else if(data_type == DATA.MONSTERS_TO_DELETE) {\r\n                    for(let t = 0; t < data_count; t++) {\r\n                        const del_entity = game_state[data_iterator + t];\r\n                        if(this.m_monsters.has(del_entity)) {\r\n                            this.m_monsters.delete(del_entity);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            data_iterator += data_count;\r\n            if(data_iterator >= game_state.length) {\r\n                is_finish = true;\r\n            }\r\n        }\r\n\r\n        // calculate fps\r\n        this.m_fps_accumulator += dt;\r\n        this.m_fps_ticks += 1;\r\n\r\n        this.draw();\r\n        this.update_ui();\r\n\r\n        if(this.m_fps_accumulator > 2.0) {\r\n            this.m_fps_value = this.m_fps_ticks / this.m_fps_accumulator;\r\n\r\n            // reset fps value\r\n            this.m_fps_accumulator = 0.0;\r\n            this.m_fps_ticks = 0;\r\n        }\r\n    }\r\n}\r\n","import { add_monster, create_game, game_update, get_game_data, get_game_settings } from \"../wasm/build/game_api\";\r\nimport { Scene } from \"./scene\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement | null;\r\nvar is_mouse_press: boolean = false;\r\nvar mouse_event: MouseEvent | null = null;\r\n\r\nfunction click_coordinates(canvas: HTMLCanvasElement, mouse_event: MouseEvent): number[] {\r\n    const canvas_rect = canvas.getBoundingClientRect()\r\n    return [mouse_event.clientX - canvas_rect.left, mouse_event.clientY - canvas_rect.top];\r\n}\r\n\r\nif(canvas) {\r\n    const ctx = canvas.getContext(\"2d\")!;\r\n\r\n    // global variables\r\n    var current_time: number = performance.now();\r\n\r\n    // start the game in the server side\r\n    const seed = Math.floor(Math.random() * 4294967295);\r\n    //const seed = 2616276912;\r\n    console.log(\"use seed \" + seed);\r\n    create_game(seed);\r\n    console.log(\"generate level time:\", (performance.now() - current_time) / 1000.0, \"seconds\");\r\n\r\n    // disable start screen\r\n    var loading = document.getElementById(\"loading\");\r\n    if(loading) {\r\n        loading.hidden = true;\r\n    }\r\n\r\n    // get common game settings\r\n    var game_settings: ArrayLike<number> = get_game_settings();\r\n\r\n    // create scene\r\n    // and use obtained game settings\r\n    var scene: Scene = new Scene(ctx, canvas.width, canvas.height, game_settings);\r\n\r\n    canvas.addEventListener(\"mousedown\", function(event) {\r\n        mouse_event = event;\r\n        is_mouse_press = true;\r\n\r\n        const c = click_coordinates(canvas, mouse_event);\r\n        scene.click_position(c[0], c[1], true);\r\n    });\r\n\r\n    canvas.addEventListener(\"mouseup\", function(event) {\r\n        is_mouse_press = false;\r\n        scene.reset_click();\r\n    });\r\n\r\n    document.onmousemove = function(event) {\r\n        mouse_event = event;\r\n    }\r\n\r\n    // press the keyboard button\r\n    document.onkeydown = function(event) {\r\n        const key = event.key;\r\n        if(key == \"s\") {\r\n            add_monster();\r\n        } else {\r\n            scene.press_key(key);\r\n        }\r\n    }\r\n\r\n    // start game loop\r\n    update();\r\n\r\n    function update() {\r\n        // at first we send interactions\r\n        if(is_mouse_press && mouse_event && canvas) {\r\n            const c = click_coordinates(canvas, mouse_event);\r\n            scene.click_position(c[0], c[1]);\r\n        }\r\n\r\n        const time = performance.now();\r\n        const delta_time = (time - current_time) / 1000.0;\r\n        current_time = time;\r\n        game_update(delta_time);\r\n\r\n        // get current game state\r\n        var game_state = get_game_data();\r\n        \r\n        // update the scene\r\n        scene.update(game_state, delta_time);\r\n\r\n        window.requestAnimationFrame(update);\r\n    }\r\n}"],"names":["async","$c73d7759e7ded5ad$var$instantiate","module","imports","adaptedImports","env","Object","assign","create","globalThis","abort","message","fileName","lineNumber","columnNumber","__liftString","Error","exports","WebAssembly","instantiate","memory","adaptedExports","setPrototypeOf","define_player_target_position","in_x","in_y","get_game_settings","__liftStaticArray","__getF32","get_game_data","pointer","end","Uint32Array","buffer","memoryU16","Uint16Array","start","string","String","fromCharCode","subarray","liftElement","align","length","__dataview","getUint32","DataView","__getU32","values","Array","i","getFloat32","$c73d7759e7ded5ad$export$827b61424e8f52d2","create_game","$c73d7759e7ded5ad$export$3c21de097f787d3b","add_monster","$c73d7759e7ded5ad$export$aa79f89ecf5ba76e","$c73d7759e7ded5ad$export$4b249574f99ed2eb","$c73d7759e7ded5ad$export$2bf8c3265d75f9df","game_update","$c73d7759e7ded5ad$export$65cdd2cb3198cfad","$c73d7759e7ded5ad$export$9b9fb04cb9feb7df","url","compileStreaming","fetch","URL","import","meta","$be9859f1906f141a$export$15a2497367026b23","DATA","$55f2ecb58225d6c7$export$dec075e787bbf2fa","$f16e9672ec91febb$export$563a914cafbdc389","m_matrix","Float32Array","m_angle","m_scale_x","m_scale_y","constructor","this","matrix_array","set_matrix_array","in_array","set_translation","translation","_update_rotation","Math","cos","sin","set_rotation","in_value","rotation","set_scale","set_uniform_scale","multiply","apply_scale","sqrt","compose_tfms","other","to_return","a","b","result","_det2","c","d","inverse","m","toString","$cd8015cb717cc260$export$18a53f1bbc175d6c","$cd8015cb717cc260$export$7f5701e64ff28313","$cd8015cb717cc260$export$8e9e21cb4ba66e8a","$1020131ca96dc9f5$var$Drawable","in_ctxt","in_wtc_tfm","m_wtc_tfm","m_context","$1020131ca96dc9f5$export$24f52b61e8a55bd","m_posx_x","m_posx_y","m_size","m_type","in_size","in_type","super","draw","c_corner","c_size","save","lineWidth","fillStyle","strokeStyle","beginPath","rect","moveTo","lineTo","fill","stroke","restore","$1020131ca96dc9f5$var$DrawPerson","m_radius","m_is_move","m_tfm","m_stroke_width","m_move_color","m_iddle_color","m_stroke_clor","m_is_stroke","set_move","set_position","set_radius","in_r","tfm","c_center","c_radius","p2","SQRT2","arc","PI","$1020131ca96dc9f5$export$bea9cb0fe9138da3","$1020131ca96dc9f5$export$bd04ef23d2291267","$1020131ca96dc9f5$export$f8016fec438439b","m_active","m_pos_x","m_pos_y","m_start_time","activate","performance","now","time_delta","prop","pow","min","$1020131ca96dc9f5$export$74fd141075c0a32","m_scale","m_scale_index","in_tile_size","in_vertices","in_polygons","in_sizes","m_canvas_width","canvas","width","m_canvas_height","height","m_tile_size","m_vertices","m_polygons","m_sizes","floor","_update_scale","toggle_active","scale_up","scale_down","pos","shift","s","j","v","x","y","c_position","$e060a8ec354ef7e4$export$38af1803e3442a7f","m_level_width","m_level_height","m_level_tile_size","m_last_click_time","m_click_number","m_level_tiles","Map","m_wtc_scale","m_monsters","m_monstars_total","m_camera_pos_x","m_camera_pos_y","m_fps_accumulator","m_fps_ticks","m_fps_value","in_ctx","canvas_width","canvas_height","game_settings","in_navmesh_vertices","in_navmesh_polygons","Int32Array","in_navmesh_sizes","is_finish","v_index","array_length","data_type","data_length","LEVEL_WIDHT","LEVEL_HEIGHT","TILE_SIZE","NAVMESH_VERTICES","NAVMESH_POLYGONS","NAVMESH_SIZES","LEVEL_TOTAL_TILES","console","log","m_player","m_click_cursor","m_map","reset_click","click_position","force","current_time","is_define","update_ui","level_count","document","getElementById","innerText","visible_count","size","fps","round","toFixed","press_key","key","draw_background","clearRect","fillRect","tile_index","tile","monster_entity","monster","update","game_state","dt","data_iterator","data_count","PLAYER_POSITION","pos_x","pos_y","PLAYER_RADIUS","r","PLAYER_ANGLE","PLAYER_MOVE","TILES_TO_DELETE","t","del_index","has","delete","TILES_TO_CREATE","new_tiles_count","new_x","new_y","new_index","new_type","set","MONSTERS_COUNT","MONSTER_POSITION","m_id","m_x","m_y","get","MONSTER_RADIUS","MONSTER_ANGLE","MONSTER_MOVE","m_move","MONSTERS_TO_DELETE","del_entity","$23ccb22ac3ecb2a2$var$canvas","$23ccb22ac3ecb2a2$var$is_mouse_press","$23ccb22ac3ecb2a2$var$mouse_event","$23ccb22ac3ecb2a2$var$click_coordinates","mouse_event","canvas_rect","getBoundingClientRect","clientX","left","clientY","top","ctx","getContext","$23ccb22ac3ecb2a2$var$current_time","seed","random","$23ccb22ac3ecb2a2$var$loading","hidden","$23ccb22ac3ecb2a2$var$game_settings","$23ccb22ac3ecb2a2$var$scene","addEventListener","event","onmousemove","onkeydown","time","delta_time","window","requestAnimationFrame"],"version":3,"file":"module.js.map"}